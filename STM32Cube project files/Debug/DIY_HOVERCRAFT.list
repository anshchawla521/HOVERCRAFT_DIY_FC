
DIY_HOVERCRAFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800725c  0800725c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007264  08007264  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800726c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000064c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000670  20000670  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012105  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e4e  00000000  00000000  0003219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f60  00000000  00000000  00034ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf2  00000000  00000000  00035f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217b3  00000000  00000000  00036b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001497a  00000000  00000000  000582f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd840  00000000  00000000  0006cc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004084  00000000  00000000  0013a4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0013e534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800721c 	.word	0x0800721c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	0800721c 	.word	0x0800721c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <HAL_UART_ErrorCallback>:
volatile crsf_sensor_battery_t bat = {1,2,4,34};

int last_parsed_packet_location = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_UART_ErrorCallback+0x74>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12c      	bne.n	8000d0c <HAL_UART_ErrorCallback+0x6c>
	{
		if((USART6->SR && (1<<3)))
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_UART_ErrorCallback+0x74>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d028      	beq.n	8000d0c <HAL_UART_ErrorCallback+0x6c>
		{	// over run error
			HAL_UART_DMAStop(&huart6);
 8000cba:	4817      	ldr	r0, [pc, #92]	; (8000d18 <HAL_UART_ErrorCallback+0x78>)
 8000cbc:	f005 f872 	bl	8005da4 <HAL_UART_DMAStop>
			uint8_t temp = USART6->DR;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_UART_ErrorCallback+0x74>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	73fb      	strb	r3, [r7, #15]
			UNUSED(temp);
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <HAL_UART_ErrorCallback+0x7c>)
 8000cca:	f003 fc3e 	bl	800454a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	4813      	ldr	r0, [pc, #76]	; (8000d20 <HAL_UART_ErrorCallback+0x80>)
 8000cd4:	f003 fc39 	bl	800454a <HAL_GPIO_TogglePin>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	4912      	ldr	r1, [pc, #72]	; (8000d24 <HAL_UART_ErrorCallback+0x84>)
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <HAL_UART_ErrorCallback+0x78>)
 8000cde:	f005 f8e0 	bl	8005ea2 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_UART_ErrorCallback+0x78>)
 8000ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_UART_ErrorCallback+0x78>)
 8000cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0208 	bic.w	r2, r2, #8
 8000cf4:	601a      	str	r2, [r3, #0]
			channel_data.channel5 = CRSF_CHANNEL_VALUE_MIN; // disarm
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_UART_ErrorCallback+0x88>)
 8000cf8:	6853      	ldr	r3, [r2, #4]
 8000cfa:	21ac      	movs	r1, #172	; 0xac
 8000cfc:	f361 3316 	bfi	r3, r1, #12, #11
 8000d00:	6053      	str	r3, [r2, #4]
			// log in future how many times have to reset
			last_packet_received_time = HAL_GetTick();
 8000d02:	f001 fffd 	bl	8002d00 <HAL_GetTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_UART_ErrorCallback+0x8c>)
 8000d0a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40011400 	.word	0x40011400
 8000d18:	20000568 	.word	0x20000568
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40020000 	.word	0x40020000
 8000d24:	20000040 	.word	0x20000040
 8000d28:	20000100 	.word	0x20000100
 8000d2c:	20000218 	.word	0x20000218

08000d30 <crsf_init>:


void crsf_init()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
//	(&huart6)->hdmarx->XferCpltCallback = check_and_decode_crsf;
//	HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	491d      	ldr	r1, [pc, #116]	; (8000db0 <crsf_init+0x80>)
 8000d3a:	481e      	ldr	r0, [pc, #120]	; (8000db4 <crsf_init+0x84>)
 8000d3c:	f005 f8b1 	bl	8005ea2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <crsf_init+0x84>)
 8000d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <crsf_init+0x84>)
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0208 	bic.w	r2, r2, #8
 8000d52:	601a      	str	r2, [r3, #0]


	// gen poly lookup table
	for(int i= 0 ; i < 256 ; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e021      	b.n	8000d9e <crsf_init+0x6e>
	{
		uint8_t crc = i;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	72fb      	strb	r3, [r7, #11]
		for(int shift = 0 ; shift < 8 ;shift++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e011      	b.n	8000d88 <crsf_init+0x58>
		{
			crc = (crc << 1) ^ ((crc&0x80) ? gen_poly : 0);
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da03      	bge.n	8000d7a <crsf_init+0x4a>
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <crsf_init+0x88>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	e000      	b.n	8000d7c <crsf_init+0x4c>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4053      	eors	r3, r2
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	72fb      	strb	r3, [r7, #11]
		for(int shift = 0 ; shift < 8 ;shift++)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	ddea      	ble.n	8000d64 <crsf_init+0x34>
		}
		_lut[i] = crc & 0xff;
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <crsf_init+0x8c>)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	7afa      	ldrb	r2, [r7, #11]
 8000d96:	701a      	strb	r2, [r3, #0]
	for(int i= 0 ; i < 256 ; i++)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2bff      	cmp	r3, #255	; 0xff
 8000da2:	ddda      	ble.n	8000d5a <crsf_init+0x2a>
	}


}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000040 	.word	0x20000040
 8000db4:	20000568 	.word	0x20000568
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000118 	.word	0x20000118

08000dc0 <HAL_UARTEx_RxEventCallback>:

int time_to_execute = 0;

//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART6){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a54      	ldr	r2, [pc, #336]	; (8000f24 <HAL_UARTEx_RxEventCallback+0x164>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f040 80a1 	bne.w	8000f1a <HAL_UARTEx_RxEventCallback+0x15a>
//	HAL_UART_DMAStop(&huart6); // y do i need to do this
	uint8_t length = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	74fb      	strb	r3, [r7, #19]

	// check if its a valid packet
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) && i < Size ; i++)
 8000ddc:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <HAL_UARTEx_RxEventCallback+0x168>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e04a      	b.n	8000e7a <HAL_UARTEx_RxEventCallback+0xba>
	{
		if (rx_buffer[i] == CRSF_ADDRESS_FLIGHT_CONTROLLER)
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2bc8      	cmp	r3, #200	; 0xc8
 8000dee:	d141      	bne.n	8000e74 <HAL_UARTEx_RxEventCallback+0xb4>
		{
			length = rx_buffer[i+1];
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	74fb      	strb	r3, [r7, #19]
			// check length
			//then get all packets and check CRC if pass then packet valid
			if((length+i+2 > sizeof(rx_buffer)-1) || (i+1 > sizeof(rx_buffer)-1))
 8000dfa:	7cfa      	ldrb	r2, [r7, #19]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	4413      	add	r3, r2
 8000e00:	3302      	adds	r3, #2
 8000e02:	2b7f      	cmp	r3, #127	; 0x7f
 8000e04:	d835      	bhi.n	8000e72 <HAL_UARTEx_RxEventCallback+0xb2>
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e0c:	d831      	bhi.n	8000e72 <HAL_UARTEx_RxEventCallback+0xb2>
				// handel cases with non full packets
				// can occur when the whole packet crc fails
				continue;
			}
			// if any packet received then reset counter
			last_packet_received_time = HAL_GetTick(); // non hal way of doing it
 8000e0e:	f001 ff77 	bl	8002d00 <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a46      	ldr	r2, [pc, #280]	; (8000f30 <HAL_UARTEx_RxEventCallback+0x170>)
 8000e16:	6013      	str	r3, [r2, #0]
			if(calculateCRC(rx_buffer , i+2,length) == 0) // start crc calculation from type byte
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	7cfa      	ldrb	r2, [r7, #19]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4842      	ldr	r0, [pc, #264]	; (8000f2c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e22:	f000 f895 	bl	8000f50 <calculateCRC>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d123      	bne.n	8000e74 <HAL_UARTEx_RxEventCallback+0xb4>
			{
				// valid packet

//				last_packet_received_time = __HAL_TIM_GET_COUNTER(&htim4);
				new_packet_recieved = true;
 8000e2c:	4b41      	ldr	r3, [pc, #260]	; (8000f34 <HAL_UARTEx_RxEventCallback+0x174>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
				if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3302      	adds	r3, #2
 8000e36:	4a3d      	ldr	r2, [pc, #244]	; (8000f2c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	2b16      	cmp	r3, #22
 8000e3c:	d112      	bne.n	8000e64 <HAL_UARTEx_RxEventCallback+0xa4>
 8000e3e:	7cfb      	ldrb	r3, [r7, #19]
 8000e40:	2b18      	cmp	r3, #24
 8000e42:	d10f      	bne.n	8000e64 <HAL_UARTEx_RxEventCallback+0xa4>
				{
					memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3303      	adds	r3, #3
 8000e48:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a3a      	ldr	r2, [pc, #232]	; (8000f38 <HAL_UARTEx_RxEventCallback+0x178>)
 8000e4e:	4614      	mov	r4, r2
 8000e50:	461d      	mov	r5, r3
 8000e52:	6828      	ldr	r0, [r5, #0]
 8000e54:	6869      	ldr	r1, [r5, #4]
 8000e56:	68aa      	ldr	r2, [r5, #8]
 8000e58:	68eb      	ldr	r3, [r5, #12]
 8000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5c:	6928      	ldr	r0, [r5, #16]
 8000e5e:	6020      	str	r0, [r4, #0]
 8000e60:	8aab      	ldrh	r3, [r5, #20]
 8000e62:	80a3      	strh	r3, [r4, #4]
				}
				i = i + 2 + length - 1; // -1 because for loop will increment this
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	1c9a      	adds	r2, r3, #2
 8000e68:	7cfb      	ldrb	r3, [r7, #19]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e000      	b.n	8000e74 <HAL_UARTEx_RxEventCallback+0xb4>
				continue;
 8000e72:	bf00      	nop
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) && i < Size ; i++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7e:	d803      	bhi.n	8000e88 <HAL_UARTEx_RxEventCallback+0xc8>
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbad      	blt.n	8000de4 <HAL_UARTEx_RxEventCallback+0x24>
			}
		}
	}

	last_parsed_packet_location = 0;
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_UARTEx_RxEventCallback+0x168>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
	// chcek RXNE before starting dma
	if(send_telemetry)
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d032      	beq.n	8000efc <HAL_UARTEx_RxEventCallback+0x13c>
	{     crsf_sensor_battery_t temp_bat = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
		  memcpy((void*)&temp_bat , (void*)&bat, sizeof(bat));
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <HAL_UARTEx_RxEventCallback+0x180>)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eaa:	e883 0003 	stmia.w	r3, {r0, r1}
		  convert_to_big_endian((uint8_t*)&temp_bat, 2); // battery voltage
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f8af 	bl	8001018 <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&temp_bat)[2]), 2); // battery current
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f8a8 	bl	8001018 <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&temp_bat)[4]), 3); // mah
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2103      	movs	r1, #3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f8a1 	bl	8001018 <convert_to_big_endian>
		send_telem(CRSF_FRAMETYPE_BATTERY_SENSOR, (uint8_t*)&temp_bat, sizeof(temp_bat)/sizeof(uint8_t));
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2208      	movs	r2, #8
 8000edc:	4619      	mov	r1, r3
 8000ede:	2008      	movs	r0, #8
 8000ee0:	f000 f85c 	bl	8000f9c <send_telem>
		sent_telemetry = true;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UARTEx_RxEventCallback+0x184>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
		send_telemetry = false;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		telem_last_sent = HAL_GetTick();
 8000ef0:	f001 ff06 	bl	8002d00 <HAL_GetTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_UARTEx_RxEventCallback+0x188>)
 8000efa:	801a      	strh	r2, [r3, #0]
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	490b      	ldr	r1, [pc, #44]	; (8000f2c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000f00:	4812      	ldr	r0, [pc, #72]	; (8000f4c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f02:	f004 ffce 	bl	8005ea2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0208 	bic.w	r2, r2, #8
 8000f18:	601a      	str	r2, [r3, #0]

}
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bdb0      	pop	{r4, r5, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40011400 	.word	0x40011400
 8000f28:	20000220 	.word	0x20000220
 8000f2c:	20000040 	.word	0x20000040
 8000f30:	20000218 	.word	0x20000218
 8000f34:	2000021c 	.word	0x2000021c
 8000f38:	20000100 	.word	0x20000100
 8000f3c:	2000021d 	.word	0x2000021d
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000001 	.word	0x20000001
 8000f48:	2000021e 	.word	0x2000021e
 8000f4c:	20000568 	.word	0x20000568

08000f50 <calculateCRC>:
//    time_to_execute = (TIM4->CNT) - time_to_execute;
//    return dividend;
//}

uint8_t calculateCRC(uint8_t* buffer , int start_index , int bytes)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	uint8_t crc = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75fb      	strb	r3, [r7, #23]
	uint8_t* data = &(buffer[start_index]);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
	while(bytes--)
 8000f68:	e00a      	b.n	8000f80 <calculateCRC+0x30>
	{
		crc = _lut[crc ^ *(data++)];
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	613a      	str	r2, [r7, #16]
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	4053      	eors	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <calculateCRC+0x48>)
 8000f7c:	5c9b      	ldrb	r3, [r3, r2]
 8000f7e:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ef      	bne.n	8000f6a <calculateCRC+0x1a>
	}
    return crc;
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000118 	.word	0x20000118

08000f9c <send_telem>:

void send_telem(uint8_t type , uint8_t* payload , uint8_t payload_length)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
	tx_buffer[0] = CRSF_ADDRESS_CRSF_RECEIVER;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <send_telem+0x70>)
 8000fae:	22ec      	movs	r2, #236	; 0xec
 8000fb0:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = payload_length+2;
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <send_telem+0x70>)
 8000fba:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = type;
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <send_telem+0x70>)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	7093      	strb	r3, [r2, #2]
	memcpy(&(tx_buffer[3]),payload,payload_length);
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4811      	ldr	r0, [pc, #68]	; (8001010 <send_telem+0x74>)
 8000fca:	f006 f8d9 	bl	8007180 <memcpy>
	tx_buffer[3+payload_length] = 0; // CRC set as 0 for calculation
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <send_telem+0x70>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	54d1      	strb	r1, [r2, r3]
	tx_buffer[3+payload_length] = calculateCRC(tx_buffer ,2, payload_length+1);
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	1cdc      	adds	r4, r3, #3
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	480a      	ldr	r0, [pc, #40]	; (800100c <send_telem+0x70>)
 8000fe4:	f7ff ffb4 	bl	8000f50 <calculateCRC>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <send_telem+0x70>)
 8000fee:	551a      	strb	r2, [r3, r4]

	HAL_UART_Transmit_DMA(&huart6 ,tx_buffer, payload_length+4);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4904      	ldr	r1, [pc, #16]	; (800100c <send_telem+0x70>)
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <send_telem+0x78>)
 8000ffe:	f004 fe53 	bl	8005ca8 <HAL_UART_Transmit_DMA>
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	200000c0 	.word	0x200000c0
 8001010:	200000c3 	.word	0x200000c3
 8001014:	20000568 	.word	0x20000568

08001018 <convert_to_big_endian>:

void convert_to_big_endian(uint8_t * dst , uint8_t bytes)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
	uint8_t temp =0;
 8001024:	2300      	movs	r3, #0
 8001026:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i < bytes/2;i++)
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e01c      	b.n	8001068 <convert_to_big_endian+0x50>
	{
		//swap
		temp = dst[i];
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	72fb      	strb	r3, [r7, #11]
		dst[i] = dst[(bytes-1)-i];
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	441a      	add	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	440b      	add	r3, r1
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	701a      	strb	r2, [r3, #0]
		dst[(bytes-1)-i] = temp;
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	7afa      	ldrb	r2, [r7, #11]
 8001060:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < bytes/2;i++)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4293      	cmp	r3, r2
 8001074:	dbdb      	blt.n	800102e <convert_to_big_endian+0x16>
	}

}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <MX_ADC1_Init+0xb4>)
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <MX_ADC1_Init+0xb8>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_ADC1_Init+0xb4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <MX_ADC1_Init+0xbc>)
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_ADC1_Init+0xb4>)
 80010e6:	f001 fe3b 	bl	8002d60 <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010f0:	f001 f866 	bl	80021c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010f4:	230b      	movs	r3, #11
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010fc:	2304      	movs	r3, #4
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_ADC1_Init+0xb4>)
 8001106:	f002 f8ad 	bl	8003264 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001110:	f001 f856 	bl	80021c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001114:	230d      	movs	r3, #13
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_ADC1_Init+0xb4>)
 8001122:	f002 f89f 	bl	8003264 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800112c:	f001 f848 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000224 	.word	0x20000224
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a37      	ldr	r2, [pc, #220]	; (8001240 <HAL_ADC_MspInit+0xfc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d167      	bne.n	8001236 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_ADC_MspInit+0x100>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a35      	ldr	r2, [pc, #212]	; (8001244 <HAL_ADC_MspInit+0x100>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <HAL_ADC_MspInit+0x100>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_ADC_MspInit+0x100>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <HAL_ADC_MspInit+0x100>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_ADC_MspInit+0x100>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800119e:	230a      	movs	r3, #10
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4825      	ldr	r0, [pc, #148]	; (8001248 <HAL_ADC_MspInit+0x104>)
 80011b2:	f003 f815 	bl	80041e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011b8:	4a25      	ldr	r2, [pc, #148]	; (8001250 <HAL_ADC_MspInit+0x10c>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011f4:	2204      	movs	r2, #4
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_ADC_MspInit+0x108>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_ADC_MspInit+0x108>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_ADC_MspInit+0x108>)
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <HAL_ADC_MspInit+0x108>)
 800120c:	f002 fbe6 	bl	80039dc <HAL_DMA_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001216:	f000 ffd3 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_ADC_MspInit+0x108>)
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_ADC_MspInit+0x108>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2012      	movs	r0, #18
 800122c:	f002 fb9f 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001230:	2012      	movs	r0, #18
 8001232:	f002 fbb8 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40012000 	.word	0x40012000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020800 	.word	0x40020800
 800124c:	2000026c 	.word	0x2000026c
 8001250:	40026410 	.word	0x40026410

08001254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_DMA_Init+0x98>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <MX_DMA_Init+0x98>)
 8001264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_DMA_Init+0x98>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_DMA_Init+0x98>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_DMA_Init+0x98>)
 8001280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_DMA_Init+0x98>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200d      	movs	r0, #13
 8001298:	f002 fb69 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800129c:	200d      	movs	r0, #13
 800129e:	f002 fb82 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2011      	movs	r0, #17
 80012a8:	f002 fb61 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012ac:	2011      	movs	r0, #17
 80012ae:	f002 fb7a 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f002 fb59 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f002 fb72 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 2, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2102      	movs	r1, #2
 80012c6:	2039      	movs	r0, #57	; 0x39
 80012c8:	f002 fb51 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012cc:	2039      	movs	r0, #57	; 0x39
 80012ce:	f002 fb6a 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2045      	movs	r0, #69	; 0x45
 80012d8:	f002 fb49 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012dc:	2045      	movs	r0, #69	; 0x45
 80012de:	f002 fb62 	bl	80039a6 <HAL_NVIC_EnableIRQ>

}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f84b 	bl	8001398 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8001302:	f000 f8d5 	bl	80014b0 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8001306:	f000 f8e9 	bl	80014dc <dshot_start_pwm>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <dshot_write>:

void dshot_write(uint16_t *motor_value , bool dshot_telemetry)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
	last_sent_motor_value[0] = motor_value[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <dshot_write+0x48>)
 8001326:	801a      	strh	r2, [r3, #0]
	last_sent_motor_value[1] = motor_value[1];
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	885a      	ldrh	r2, [r3, #2]
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <dshot_write+0x48>)
 800132e:	805a      	strh	r2, [r3, #2]
	last_sent_motor_value[2] = motor_value[2];
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	889a      	ldrh	r2, [r3, #4]
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <dshot_write+0x48>)
 8001336:	809a      	strh	r2, [r3, #4]
	last_sent_motor_value[3] = motor_value[3];
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	88da      	ldrh	r2, [r3, #6]
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <dshot_write+0x48>)
 800133e:	80da      	strh	r2, [r3, #6]
	dshot_prepare_dmabuffer_all(motor_value, dshot_telemetry);
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f943 	bl	80015d0 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800134a:	f000 f95f 	bl	800160c <dshot_dma_start>
	dshot_enable_dma_request();
 800134e:	f000 f97d 	bl	800164c <dshot_enable_dma_request>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000360 	.word	0x20000360

08001360 <dshot_choose_type>:

/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d003      	beq.n	8001378 <dshot_choose_type+0x18>
 8001370:	2b02      	cmp	r3, #2
 8001372:	d103      	bne.n	800137c <dshot_choose_type+0x1c>
	{
	case (DSHOT600):
		return DSHOT600_HZ;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <dshot_choose_type+0x2c>)
 8001376:	e002      	b.n	800137e <dshot_choose_type+0x1e>

	case (DSHOT300):
		return DSHOT300_HZ;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <dshot_choose_type+0x30>)
 800137a:	e000      	b.n	800137e <dshot_choose_type+0x1e>

	default:
	case (DSHOT150):
		return DSHOT150_HZ;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <dshot_choose_type+0x34>)
	}
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	00b71b00 	.word	0x00b71b00
 8001390:	005b8d80 	.word	0x005b8d80
 8001394:	002dc6c0 	.word	0x002dc6c0

08001398 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	ed2d 8b02 	vpush	{d8}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <dshot_set_timer+0x80>)
 80013a8:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float)timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffd2 	bl	8001360 <dshot_choose_type>
 80013bc:	ee07 0a90 	vmov	s15, r0
 80013c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80013c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800141c <dshot_set_timer+0x84>
 80013cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	f005 fee2 	bl	800719c <lrintf>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	817b      	strh	r3, [r7, #10]

	// motor1
#ifdef MOTOR_1_TIM
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <dshot_set_timer+0x88>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	897a      	ldrh	r2, [r7, #10]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <dshot_set_timer+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2214      	movs	r2, #20
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <dshot_set_timer+0x88>)
 80013f2:	2214      	movs	r2, #20
 80013f4:	60da      	str	r2, [r3, #12]
	 __HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
	 __HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
#endif
	// motor3
#ifdef MOTOR_3_TIM
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <dshot_set_timer+0x8c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	897a      	ldrh	r2, [r7, #10]
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <dshot_set_timer+0x8c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2214      	movs	r2, #20
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <dshot_set_timer+0x8c>)
 8001408:	2214      	movs	r2, #20
 800140a:	60da      	str	r2, [r3, #12]
	// // motor4
#ifdef MOTOR_4_TIM
	 __HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
	 __HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
#endif
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	ecbd 8b02 	vpop	{d8}
 8001416:	bd80      	pop	{r7, pc}
 8001418:	02dc6c00 	.word	0x02dc6c00
 800141c:	3c23d70a 	.word	0x3c23d70a
 8001420:	200003d0 	.word	0x200003d0
 8001424:	20000388 	.word	0x20000388

08001428 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d108      	bne.n	8001452 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800144e:	60da      	str	r2, [r3, #12]
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8001450:	e028      	b.n	80014a4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d108      	bne.n	800146e <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800146a:	60da      	str	r2, [r3, #12]
}
 800146c:	e01a      	b.n	80014a4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d108      	bne.n	800148a <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001486:	60da      	str	r2, [r3, #12]
}
 8001488:	e00c      	b.n	80014a4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	d107      	bne.n	80014a4 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
// TIM_DMA_ID_CCx depends on timer channel
#ifdef MOTOR_1_TIM
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <dshot_put_tc_callback_function+0x20>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <dshot_put_tc_callback_function+0x24>)
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_2_TIM
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
#endif
#ifdef MOTOR_3_TIM
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <dshot_put_tc_callback_function+0x28>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <dshot_put_tc_callback_function+0x24>)
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_4_TIM
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200003d0 	.word	0x200003d0
 80014d4:	08001429 	.word	0x08001429
 80014d8:	20000388 	.word	0x20000388

080014dc <dshot_start_pwm>:

static void dshot_start_pwm()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	// Start the timer channel now.
	// Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
#ifdef MOTOR_1_TIM
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 80014e0:	210c      	movs	r1, #12
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <dshot_start_pwm+0x18>)
 80014e4:	f003 fdb4 	bl	8005050 <HAL_TIM_PWM_Start>
#endif
#ifdef MOTOR_2_TIM
	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
#endif
#ifdef MOTOR_3_TIM
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 80014e8:	210c      	movs	r1, #12
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <dshot_start_pwm+0x1c>)
 80014ec:	f003 fdb0 	bl	8005050 <HAL_TIM_PWM_Start>
#endif
#ifdef MOTOR_4_TIM
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
#endif
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200003d0 	.word	0x200003d0
 80014f8:	20000388 	.word	0x20000388

080014fc <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value , bool dshot_telemetry)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	460a      	mov	r2, r1
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	717b      	strb	r3, [r7, #5]
	uint16_t packet;


	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b21a      	sxth	r2, r3
 8001512:	797b      	ldrb	r3, [r7, #5]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	817b      	strh	r3, [r7, #10]

	// compute checksum
	unsigned csum = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8001520:	897b      	ldrh	r3, [r7, #10]
 8001522:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 3; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e009      	b.n	800153e <dshot_prepare_packet+0x42>
	{
		csum ^= csum_data; // xor data by nibbles
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4053      	eors	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b02      	cmp	r3, #2
 8001542:	ddf2      	ble.n	800152a <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	b29a      	uxth	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	817b      	strh	r3, [r7, #10]

	return packet;
 800155a:	897b      	ldrh	r3, [r7, #10]
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t *motor_dmabuffer, uint16_t value , bool dshot_telemetry)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
	uint16_t packet;
	packet = dshot_prepare_packet(value ,dshot_telemetry );
 8001578:	787a      	ldrb	r2, [r7, #1]
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ffbc 	bl	80014fc <dshot_prepare_packet>
 8001584:	4603      	mov	r3, r0
 8001586:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < 16; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	e011      	b.n	80015b2 <dshot_prepare_dmabuffer+0x4a>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 800158e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da01      	bge.n	800159a <dshot_prepare_dmabuffer+0x32>
 8001596:	220e      	movs	r2, #14
 8001598:	e000      	b.n	800159c <dshot_prepare_dmabuffer+0x34>
 800159a:	2207      	movs	r2, #7
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	440b      	add	r3, r1
 80015a4:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	ddea      	ble.n	800158e <dshot_prepare_dmabuffer+0x26>
	}

	motor_dmabuffer[16] = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3340      	adds	r3, #64	; 0x40
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3344      	adds	r3, #68	; 0x44
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t *motor_value , bool dshot_telemetry)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
#ifdef MOTOR_1_TIM
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0], dshot_telemetry);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <dshot_prepare_dmabuffer_all+0x34>)
 80015e6:	f7ff ffbf 	bl	8001568 <dshot_prepare_dmabuffer>
#endif
#ifdef MOTOR_2_TIM
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
#endif
#ifdef MOTOR_3_TIM
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2] ,dshot_telemetry);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <dshot_prepare_dmabuffer_all+0x38>)
 80015f6:	f7ff ffb7 	bl	8001568 <dshot_prepare_dmabuffer>
#endif
#ifdef MOTOR_4_TIM
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
#endif
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002cc 	.word	0x200002cc
 8001608:	20000314 	.word	0x20000314

0800160c <dshot_dma_start>:

static void dshot_dma_start()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
#ifdef MOTOR_1_TIM
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <dshot_dma_start+0x30>)
 8001612:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001614:	490a      	ldr	r1, [pc, #40]	; (8001640 <dshot_dma_start+0x34>)
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <dshot_dma_start+0x30>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3340      	adds	r3, #64	; 0x40
 800161c:	461a      	mov	r2, r3
 800161e:	2312      	movs	r3, #18
 8001620:	f002 fa8a 	bl	8003b38 <HAL_DMA_Start_IT>
#endif
#ifdef MOTOR_2_TIM
	 HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
#endif
#ifdef MOTOR_3_TIM
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <dshot_dma_start+0x38>)
 8001626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <dshot_dma_start+0x3c>)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <dshot_dma_start+0x38>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3340      	adds	r3, #64	; 0x40
 8001630:	461a      	mov	r2, r3
 8001632:	2312      	movs	r3, #18
 8001634:	f002 fa80 	bl	8003b38 <HAL_DMA_Start_IT>
#endif
#ifdef MOTOR_4_TIM
	 HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
#endif
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200003d0 	.word	0x200003d0
 8001640:	200002cc 	.word	0x200002cc
 8001644:	20000388 	.word	0x20000388
 8001648:	20000314 	.word	0x20000314

0800164c <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
#ifdef MOTOR_1_TIM
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <dshot_enable_dma_request+0x30>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <dshot_enable_dma_request+0x30>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800165e:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_2_TIM
	 __HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
#endif
#ifdef MOTOR_3_TIM
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC4);
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <dshot_enable_dma_request+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <dshot_enable_dma_request+0x34>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800166e:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_4_TIM
	 __HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
#endif
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200003d0 	.word	0x200003d0
 8001680:	20000388 	.word	0x20000388

08001684 <dshot_arm>:

void dshot_arm()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	uint16_t arr[4] = {0,0,0,0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
	is_armed = true;
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <dshot_arm+0x44>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < 2000 ; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e00a      	b.n	80016b4 <dshot_arm+0x30>
	  {
		  dshot_write(arr , false);
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe36 	bl	8001314 <dshot_write>
		  HAL_Delay(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f001 fb35 	bl	8002d18 <HAL_Delay>
	for(int i =0 ; i < 2000 ; i++)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016ba:	dbf0      	blt.n	800169e <dshot_arm+0x1a>
		  // send 0 for first 2 seconds

	  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000035c 	.word	0x2000035c

080016cc <dshot_beep>:
		  // send 0 for first 2 seconds
	  }
	save_settings(motor_number);
}
void dshot_beep(uint8_t motor_number ,uint8_t beep_number)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	460a      	mov	r2, r1
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	4613      	mov	r3, r2
 80016da:	71bb      	strb	r3, [r7, #6]
	beep_number = beep_number < 0 ? 0:beep_number;
	beep_number = beep_number > 5 ? 5:beep_number;
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	bf28      	it	cs
 80016e2:	2305      	movcs	r3, #5
 80016e4:	71bb      	strb	r3, [r7, #6]

	last_sent_motor_value[motor_number] = 2;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <dshot_beep+0x3c>)
 80016ea:	2102      	movs	r1, #2
 80016ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dshot_write(last_sent_motor_value,true);
 80016f0:	2101      	movs	r1, #1
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <dshot_beep+0x3c>)
 80016f4:	f7ff fe0e 	bl	8001314 <dshot_write>
	HAL_Delay(100);
 80016f8:	2064      	movs	r0, #100	; 0x64
 80016fa:	f001 fb0d 	bl	8002d18 <HAL_Delay>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000360 	.word	0x20000360

0800170c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a30      	ldr	r2, [pc, #192]	; (80017ec <MX_GPIO_Init+0xe0>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a29      	ldr	r2, [pc, #164]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MX_GPIO_Init+0xe0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_GPIO_Init+0xe0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MX_GPIO_Init+0xe0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	4815      	ldr	r0, [pc, #84]	; (80017f0 <MX_GPIO_Init+0xe4>)
 800179a:	f002 febd 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2130      	movs	r1, #48	; 0x30
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <MX_GPIO_Init+0xe8>)
 80017a4:	f002 feb8 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <MX_GPIO_Init+0xe4>)
 80017c2:	f002 fd0d 	bl	80041e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017c6:	2330      	movs	r3, #48	; 0x30
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_GPIO_Init+0xe8>)
 80017de:	f002 fcff 	bl	80041e0 <HAL_GPIO_Init>

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fc:	f001 fa1a 	bl	8002c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001800:	f000 fb10 	bl	8001e24 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001804:	f7ff ff82 	bl	800170c <MX_GPIO_Init>
  MX_DMA_Init();
 8001808:	f7ff fd24 	bl	8001254 <MX_DMA_Init>
  MX_TIM2_Init();
 800180c:	f000 fd8a 	bl	8002324 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001810:	f000 fdfc 	bl	800240c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001814:	f000 fef2 	bl	80025fc <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001818:	f001 f8fa 	bl	8002a10 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 800181c:	f000 fe6c 	bl	80024f8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001820:	f7ff fc30 	bl	8001084 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  dshot_init(DSHOT600);
 8001824:	2002      	movs	r0, #2
 8001826:	f7ff fd63 	bl	80012f0 <dshot_init>
  crsf_init();
 800182a:	f7ff fa81 	bl	8000d30 <crsf_init>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800182e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001832:	488b      	ldr	r0, [pc, #556]	; (8001a60 <main+0x268>)
 8001834:	f002 fe89 	bl	800454a <HAL_GPIO_TogglePin>

	// want the timer to run at 1 mhz (u can choose any )
	// so prescaler = 48mhz(apb1) / 1mhz = 48
	__HAL_TIM_SET_PRESCALER(&htim5, 48);
 8001838:	4b8a      	ldr	r3, [pc, #552]	; (8001a64 <main+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2230      	movs	r2, #48	; 0x30
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim4, 48);
 8001840:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <main+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2230      	movs	r2, #48	; 0x30
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
		//for 50hz the arr value should be 1mhz/50 = 20000
	__HAL_TIM_SET_AUTORELOAD(&htim5, 20000);
 8001848:	4b86      	ldr	r3, [pc, #536]	; (8001a64 <main+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
 8001852:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <main+0x26c>)
 8001854:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001858:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 , 1200);
 800185a:	4b82      	ldr	r3, [pc, #520]	; (8001a64 <main+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001864:	2100      	movs	r1, #0
 8001866:	487f      	ldr	r0, [pc, #508]	; (8001a64 <main+0x26c>)
 8001868:	f003 fbf2 	bl	8005050 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_AUTORELOAD(&htim4, 20000);
 800186c:	4b7e      	ldr	r3, [pc, #504]	; (8001a68 <main+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
 8001876:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <main+0x270>)
 8001878:	f644 6220 	movw	r2, #20000	; 0x4e20
 800187c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1 , 1200);
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <main+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2 , 1200);
 8001888:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <main+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001890:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001892:	2100      	movs	r1, #0
 8001894:	4874      	ldr	r0, [pc, #464]	; (8001a68 <main+0x270>)
 8001896:	f003 fbdb 	bl	8005050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800189a:	2104      	movs	r1, #4
 800189c:	4872      	ldr	r0, [pc, #456]	; (8001a68 <main+0x270>)
 800189e:	f003 fbd7 	bl	8005050 <HAL_TIM_PWM_Start>
	// adc
    //HAL_ADC_Start_DMA(&hadc1,(uint32_t *)raw_adc_data , 2); // take readings from adc


	// arm esc
    dshot_arm();
 80018a2:	f7ff feef 	bl	8001684 <dshot_arm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80018a6:	2120      	movs	r1, #32
 80018a8:	4870      	ldr	r0, [pc, #448]	; (8001a6c <main+0x274>)
 80018aa:	f002 fe4e 	bl	800454a <HAL_GPIO_TogglePin>
	  if(arm_state == ARMED && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = IDLE ;
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <main+0x278>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d110      	bne.n	80018d8 <main+0xe0>
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <main+0x27c>)
 80018b8:	795a      	ldrb	r2, [r3, #5]
 80018ba:	0912      	lsrs	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	799b      	ldrb	r3, [r3, #6]
 80018c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80018ce:	d203      	bcs.n	80018d8 <main+0xe0>
 80018d0:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <main+0x278>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e085      	b.n	80019e4 <main+0x1ec>
	  else if(arm_state == IDLE && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = PREARMED ;
 80018d8:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <main+0x278>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d120      	bne.n	8001922 <main+0x12a>
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <main+0x27c>)
 80018e2:	799a      	ldrb	r2, [r3, #6]
 80018e4:	09d2      	lsrs	r2, r2, #7
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	79d9      	ldrb	r1, [r3, #7]
 80018ea:	0049      	lsls	r1, r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	7a1b      	ldrb	r3, [r3, #8]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80018fe:	d910      	bls.n	8001922 <main+0x12a>
 8001900:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <main+0x27c>)
 8001902:	795a      	ldrb	r2, [r3, #5]
 8001904:	0912      	lsrs	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	799b      	ldrb	r3, [r3, #6]
 800190a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4313      	orrs	r3, r2
 8001912:	b29b      	uxth	r3, r3
 8001914:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001918:	d203      	bcs.n	8001922 <main+0x12a>
 800191a:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <main+0x278>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e060      	b.n	80019e4 <main+0x1ec>
	  else if(arm_state == IDLE && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = NOPREARM ;
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <main+0x278>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d120      	bne.n	800196c <main+0x174>
 800192a:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <main+0x27c>)
 800192c:	799a      	ldrb	r2, [r3, #6]
 800192e:	09d2      	lsrs	r2, r2, #7
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	79d9      	ldrb	r1, [r3, #7]
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	7a1b      	ldrb	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	4313      	orrs	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001948:	d210      	bcs.n	800196c <main+0x174>
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <main+0x27c>)
 800194c:	795a      	ldrb	r2, [r3, #5]
 800194e:	0912      	lsrs	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	799b      	ldrb	r3, [r3, #6]
 8001954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4313      	orrs	r3, r2
 800195c:	b29b      	uxth	r3, r3
 800195e:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001962:	d903      	bls.n	800196c <main+0x174>
 8001964:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <main+0x278>)
 8001966:	2202      	movs	r2, #2
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e03b      	b.n	80019e4 <main+0x1ec>
	  else if(arm_state == PREARMED && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = ARMED ;
 800196c:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <main+0x278>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d120      	bne.n	80019b6 <main+0x1be>
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <main+0x27c>)
 8001976:	799a      	ldrb	r2, [r3, #6]
 8001978:	09d2      	lsrs	r2, r2, #7
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	79d9      	ldrb	r1, [r3, #7]
 800197e:	0049      	lsls	r1, r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	025b      	lsls	r3, r3, #9
 800198a:	4313      	orrs	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001992:	d910      	bls.n	80019b6 <main+0x1be>
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <main+0x27c>)
 8001996:	795a      	ldrb	r2, [r3, #5]
 8001998:	0912      	lsrs	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	799b      	ldrb	r3, [r3, #6]
 800199e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80019ac:	d903      	bls.n	80019b6 <main+0x1be>
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <main+0x278>)
 80019b0:	2203      	movs	r2, #3
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e016      	b.n	80019e4 <main+0x1ec>
	  else if(arm_state == NOPREARM && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 ) arm_state = IDLE ;
 80019b6:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <main+0x278>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d112      	bne.n	80019e4 <main+0x1ec>
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <main+0x27c>)
 80019c0:	799a      	ldrb	r2, [r3, #6]
 80019c2:	09d2      	lsrs	r2, r2, #7
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	79d9      	ldrb	r1, [r3, #7]
 80019c8:	0049      	lsls	r1, r1, #1
 80019ca:	430a      	orrs	r2, r1
 80019cc:	7a1b      	ldrb	r3, [r3, #8]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80019dc:	d202      	bcs.n	80019e4 <main+0x1ec>
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <main+0x278>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
//	  if(rx_buffer[0] | rx_buffer[1] | rx_buffer[2] | rx_buffer[3] | rx_buffer[4])
//	  {
//		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
//	  }

	  if(arm_state == ARMED) // arm channel
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <main+0x278>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	f040 8149 	bne.w	8001c80 <main+0x488>
	  {
		  if(channel_data.channel6 < 1500)
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <main+0x27c>)
 80019f0:	799a      	ldrb	r2, [r3, #6]
 80019f2:	09d2      	lsrs	r2, r2, #7
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	79d9      	ldrb	r1, [r3, #7]
 80019f8:	0049      	lsls	r1, r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	7a1b      	ldrb	r3, [r3, #8]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f240 52db 	movw	r2, #1499	; 0x5db
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d83d      	bhi.n	8001a8c <main+0x294>
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true);
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <main+0x27c>)
 8001a12:	789a      	ldrb	r2, [r3, #2]
 8001a14:	0992      	lsrs	r2, r2, #6
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	78d9      	ldrb	r1, [r3, #3]
 8001a1a:	0089      	lsls	r1, r1, #2
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	029b      	lsls	r3, r3, #10
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	2001      	movs	r0, #1
 8001a34:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8001a78 <main+0x280>
 8001a38:	eddf 1a10 	vldr	s3, [pc, #64]	; 8001a7c <main+0x284>
 8001a3c:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001a80 <main+0x288>
 8001a40:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001a84 <main+0x28c>
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	f000 fa58 	bl	8001efc <map>
 8001a4c:	eef0 7a40 	vmov.f32	s15, s0
 8001a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <main+0x290>)
 8001a5c:	809a      	strh	r2, [r3, #4]
 8001a5e:	e03c      	b.n	8001ada <main+0x2e2>
 8001a60:	40020000 	.word	0x40020000
 8001a64:	20000460 	.word	0x20000460
 8001a68:	20000418 	.word	0x20000418
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	2000037c 	.word	0x2000037c
 8001a74:	20000100 	.word	0x20000100
 8001a78:	447a0000 	.word	0x447a0000
 8001a7c:	42400000 	.word	0x42400000
 8001a80:	44e00000 	.word	0x44e00000
 8001a84:	433f0000 	.word	0x433f0000
 8001a88:	20000368 	.word	0x20000368
		  else
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DR_MIN_THROTTLE, DSHOT_3DR_MAX_THROTTLE, true);
 8001a8c:	4ba3      	ldr	r3, [pc, #652]	; (8001d1c <main+0x524>)
 8001a8e:	789a      	ldrb	r2, [r3, #2]
 8001a90:	0992      	lsrs	r2, r2, #6
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	78d9      	ldrb	r1, [r3, #3]
 8001a96:	0089      	lsls	r1, r1, #2
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	029b      	lsls	r3, r3, #10
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aae:	2001      	movs	r0, #1
 8001ab0:	ed9f 2a9b 	vldr	s4, [pc, #620]	; 8001d20 <main+0x528>
 8001ab4:	eddf 1a9b 	vldr	s3, [pc, #620]	; 8001d24 <main+0x52c>
 8001ab8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8001d28 <main+0x530>
 8001abc:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001d2c <main+0x534>
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	f000 fa1a 	bl	8001efc <map>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <main+0x538>)
 8001ad8:	809a      	strh	r2, [r3, #4]


		  // back motor
		  if(channel_data.channel2 >= CRSF_CHANNEL_VALUE_MID + deadband)
 8001ada:	4b90      	ldr	r3, [pc, #576]	; (8001d1c <main+0x524>)
 8001adc:	785a      	ldrb	r2, [r3, #1]
 8001ade:	08d2      	lsrs	r2, r2, #3
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	789b      	ldrb	r3, [r3, #2]
 8001ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae8:	015b      	lsls	r3, r3, #5
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f240 4243 	movw	r2, #1091	; 0x443
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d924      	bls.n	8001b40 <main+0x348>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_MID + deadband, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true); // correct this
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <main+0x524>)
 8001af8:	785a      	ldrb	r2, [r3, #1]
 8001afa:	08d2      	lsrs	r2, r2, #3
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b04:	015b      	lsls	r3, r3, #5
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	2001      	movs	r0, #1
 8001b14:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8001d34 <main+0x53c>
 8001b18:	eddf 1a87 	vldr	s3, [pc, #540]	; 8001d38 <main+0x540>
 8001b1c:	ed9f 1a82 	vldr	s2, [pc, #520]	; 8001d28 <main+0x530>
 8001b20:	eddf 0a86 	vldr	s1, [pc, #536]	; 8001d3c <main+0x544>
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	f000 f9e8 	bl	8001efc <map>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <main+0x538>)
 8001b3c:	801a      	strh	r2, [r3, #0]
 8001b3e:	e034      	b.n	8001baa <main+0x3b2>
		  else if(channel_data.channel2 <= CRSF_CHANNEL_VALUE_MID - deadband)
 8001b40:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <main+0x524>)
 8001b42:	785a      	ldrb	r2, [r3, #1]
 8001b44:	08d2      	lsrs	r2, r2, #3
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	789b      	ldrb	r3, [r3, #2]
 8001b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f5b3 7f5f 	cmp.w	r3, #892	; 0x37c
 8001b58:	d824      	bhi.n	8001ba4 <main+0x3ac>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_MID - deadband, DSHOT_3DR_MAX_THROTTLE, DSHOT_3DR_MIN_THROTTLE, true); // correct this
 8001b5a:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <main+0x524>)
 8001b5c:	785a      	ldrb	r2, [r3, #1]
 8001b5e:	08d2      	lsrs	r2, r2, #3
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b76:	2001      	movs	r0, #1
 8001b78:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 8001d24 <main+0x52c>
 8001b7c:	eddf 1a68 	vldr	s3, [pc, #416]	; 8001d20 <main+0x528>
 8001b80:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8001d40 <main+0x548>
 8001b84:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001d2c <main+0x534>
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	f000 f9b6 	bl	8001efc <map>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b98:	ee17 3a90 	vmov	r3, s15
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <main+0x538>)
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	e002      	b.n	8001baa <main+0x3b2>
		  else
			  my_motor_value[0]= DSHOT_3D_NEUTRAL;
 8001ba4:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <main+0x538>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	801a      	strh	r2, [r3, #0]


		  angle = map(channel_data.channel1,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 8001baa:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <main+0x524>)
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 8001d44 <main+0x54c>
 8001bc8:	eddf 1a5f 	vldr	s3, [pc, #380]	; 8001d48 <main+0x550>
 8001bcc:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001d28 <main+0x530>
 8001bd0:	eddf 0a56 	vldr	s1, [pc, #344]	; 8001d2c <main+0x534>
 8001bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd8:	f000 f990 	bl	8001efc <map>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be4:	ee17 2a90 	vmov	r2, s15
 8001be8:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <main+0x554>)
 8001bea:	601a      	str	r2, [r3, #0]
		  anglex = map(channel_data.channel10,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,750, 2500,true);
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <main+0x524>)
 8001bee:	7b1a      	ldrb	r2, [r3, #12]
 8001bf0:	08d2      	lsrs	r2, r2, #3
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	7b5b      	ldrb	r3, [r3, #13]
 8001bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bfa:	015b      	lsls	r3, r3, #5
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c08:	2001      	movs	r0, #1
 8001c0a:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8001d50 <main+0x558>
 8001c0e:	eddf 1a51 	vldr	s3, [pc, #324]	; 8001d54 <main+0x55c>
 8001c12:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8001d28 <main+0x530>
 8001c16:	eddf 0a45 	vldr	s1, [pc, #276]	; 8001d2c <main+0x534>
 8001c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1e:	f000 f96d 	bl	8001efc <map>
 8001c22:	eef0 7a40 	vmov.f32	s15, s0
 8001c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2a:	ee17 2a90 	vmov	r2, s15
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <main+0x560>)
 8001c30:	601a      	str	r2, [r3, #0]
		  angley = map(channel_data.channel11,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <main+0x524>)
 8001c34:	7b5a      	ldrb	r2, [r3, #13]
 8001c36:	0992      	lsrs	r2, r2, #6
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	7b99      	ldrb	r1, [r3, #14]
 8001c3c:	0089      	lsls	r1, r1, #2
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	7bdb      	ldrb	r3, [r3, #15]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c54:	2001      	movs	r0, #1
 8001c56:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8001d44 <main+0x54c>
 8001c5a:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8001d48 <main+0x550>
 8001c5e:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8001d28 <main+0x530>
 8001c62:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001d2c <main+0x534>
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f000 f947 	bl	8001efc <map>
 8001c6e:	eef0 7a40 	vmov.f32	s15, s0
 8001c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c76:	ee17 2a90 	vmov	r2, s15
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <main+0x564>)
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e009      	b.n	8001c94 <main+0x49c>
	  }
	  else{
		  my_motor_value[0] = 0;
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <main+0x538>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
		  my_motor_value[2] = 0;
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <main+0x538>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	809a      	strh	r2, [r3, #4]
		  angle = (min_servo+max_servo)/2;
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <main+0x554>)
 8001c8e:	f240 621d 	movw	r2, #1565	; 0x61d
 8001c92:	601a      	str	r2, [r3, #0]
	  }

	  if(arm_state == FAILSAFE )
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <main+0x568>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d113      	bne.n	8001cc4 <main+0x4cc>
	  {
		  if(!(USART6->SR && (1<<3)))
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <main+0x56c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <main+0x4b6>
		  {
			  // not over run error
			  dshot_beep(0,2);
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff fd10 	bl	80016cc <dshot_beep>
 8001cac:	e002      	b.n	8001cb4 <main+0x4bc>
		  }else
		  {
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
			  HAL_UART_ErrorCallback(&huart6);
 8001cae:	482e      	ldr	r0, [pc, #184]	; (8001d68 <main+0x570>)
 8001cb0:	f7fe fff6 	bl	8000ca0 <HAL_UART_ErrorCallback>
		  }
		  dshot_beep(2,2);
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff fd08 	bl	80016cc <dshot_beep>
		  angle = 1000;
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <main+0x554>)
 8001cbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc2:	601a      	str	r2, [r3, #0]

	  }
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 ,angle);
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <main+0x554>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <main+0x574>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1 ,anglex);
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <main+0x560>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <main+0x578>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2 ,angley);
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <main+0x564>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <main+0x578>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
	  if(my_motor_value[0] == 0 && my_motor_value[2] == 0 && channel_data.channel9 > 1500)
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <main+0x538>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d144      	bne.n	8001d74 <main+0x57c>
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <main+0x538>)
 8001cec:	889b      	ldrh	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d140      	bne.n	8001d74 <main+0x57c>
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <main+0x524>)
 8001cf4:	7ada      	ldrb	r2, [r3, #11]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d934      	bls.n	8001d74 <main+0x57c>
	  {
		  dshot_beep(0,2);
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff fcdd 	bl	80016cc <dshot_beep>
		  dshot_beep(2,2);
 8001d12:	2102      	movs	r1, #2
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7ff fcd9 	bl	80016cc <dshot_beep>
 8001d1a:	e02f      	b.n	8001d7c <main+0x584>
 8001d1c:	20000100 	.word	0x20000100
 8001d20:	44ffe000 	.word	0x44ffe000
 8001d24:	4483e000 	.word	0x4483e000
 8001d28:	44e00000 	.word	0x44e00000
 8001d2c:	433f0000 	.word	0x433f0000
 8001d30:	20000368 	.word	0x20000368
 8001d34:	447a0000 	.word	0x447a0000
 8001d38:	42400000 	.word	0x42400000
 8001d3c:	44888000 	.word	0x44888000
 8001d40:	445f0000 	.word	0x445f0000
 8001d44:	45084000 	.word	0x45084000
 8001d48:	446d8000 	.word	0x446d8000
 8001d4c:	20000370 	.word	0x20000370
 8001d50:	451c4000 	.word	0x451c4000
 8001d54:	443b8000 	.word	0x443b8000
 8001d58:	20000374 	.word	0x20000374
 8001d5c:	20000378 	.word	0x20000378
 8001d60:	2000037c 	.word	0x2000037c
 8001d64:	40011400 	.word	0x40011400
 8001d68:	20000568 	.word	0x20000568
 8001d6c:	20000460 	.word	0x20000460
 8001d70:	20000418 	.word	0x20000418
	  }else{
	  dshot_write(my_motor_value , false);
 8001d74:	2100      	movs	r1, #0
 8001d76:	4822      	ldr	r0, [pc, #136]	; (8001e00 <main+0x608>)
 8001d78:	f7ff facc 	bl	8001314 <dshot_write>

	  }


	  // telemetry
	  if((uint16_t)(HAL_GetTick() - telem_last_sent) > 500 && arm_state != FAILSAFE && sent_telemetry) // send battery telemetry every 500ms
 8001d7c:	f000 ffc0 	bl	8002d00 <HAL_GetTick>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <main+0x60c>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d90:	d912      	bls.n	8001db8 <main+0x5c0>
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <main+0x610>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00e      	beq.n	8001db8 <main+0x5c0>
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <main+0x614>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <main+0x5c0>
	  {
		  send_telemetry = true;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <main+0x618>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
		  sent_telemetry = false;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <main+0x614>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)raw_adc_data , 2); // take readings from adc
 8001dae:	2202      	movs	r2, #2
 8001db0:	4918      	ldr	r1, [pc, #96]	; (8001e14 <main+0x61c>)
 8001db2:	4819      	ldr	r0, [pc, #100]	; (8001e18 <main+0x620>)
 8001db4:	f001 f928 	bl	8003008 <HAL_ADC_Start_DMA>
		 // in future before sending check whether old data sent or not
	  }


	// FAILSAFE detection
	  if((uint32_t)(HAL_GetTick() - last_packet_received_time) > 500) //no packet received in 1 second
 8001db8:	f000 ffa2 	bl	8002d00 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <main+0x624>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dc8:	d90b      	bls.n	8001de2 <main+0x5ea>
	  {
		  arm_state = FAILSAFE;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <main+0x610>)
 8001dcc:	2204      	movs	r2, #4
 8001dce:	701a      	strb	r2, [r3, #0]
		  new_packet_recieved = false;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <main+0x628>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
		  last_packet_received_time = HAL_GetTick();
 8001dd6:	f000 ff93 	bl	8002d00 <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <main+0x624>)
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e561      	b.n	80018a6 <main+0xae>

	  }else if(arm_state == FAILSAFE && new_packet_recieved == true)
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <main+0x610>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	f47f ad5d 	bne.w	80018a6 <main+0xae>
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <main+0x628>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f43f ad57 	beq.w	80018a6 <main+0xae>
	  {
		  arm_state = IDLE;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <main+0x610>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001dfe:	e552      	b.n	80018a6 <main+0xae>
 8001e00:	20000368 	.word	0x20000368
 8001e04:	2000021e 	.word	0x2000021e
 8001e08:	2000037c 	.word	0x2000037c
 8001e0c:	20000001 	.word	0x20000001
 8001e10:	2000021d 	.word	0x2000021d
 8001e14:	20000380 	.word	0x20000380
 8001e18:	20000224 	.word	0x20000224
 8001e1c:	20000218 	.word	0x20000218
 8001e20:	2000021c 	.word	0x2000021c

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	; 0x50
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	2230      	movs	r2, #48	; 0x30
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 f978 	bl	8007128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <SystemClock_Config+0xd0>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <SystemClock_Config+0xd0>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	; 0x40
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <SystemClock_Config+0xd0>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <SystemClock_Config+0xd4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <SystemClock_Config+0xd4>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <SystemClock_Config+0xd4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e94:	2308      	movs	r3, #8
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea4:	f107 0320 	add.w	r3, r7, #32
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fb69 	bl	8004580 <HAL_RCC_OscConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001eb4:	f000 f984 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb8:	230f      	movs	r3, #15
 8001eba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ec4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ec8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ece:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fdca 	bl	8004a70 <HAL_RCC_ClockConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ee2:	f000 f96d 	bl	80021c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001ee6:	f002 fea9 	bl	8004c3c <HAL_RCC_EnableCSS>
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	; 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <map>:

/* USER CODE BEGIN 4 */

float map(float value_to_map , float from_low ,float from_high , float to_low , float to_high , bool constrain_within_range)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f06:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f0a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f0e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f12:	ed87 2a01 	vstr	s4, [r7, #4]
 8001f16:	4603      	mov	r3, r0
 8001f18:	70fb      	strb	r3, [r7, #3]

	value_to_map = (value_to_map- from_low)*((to_high - to_low)/(from_high- from_low)) + to_low;
 8001f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f26:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f2e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001f32:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f46:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	edc7 7a05 	vstr	s15, [r7, #20]
	if(constrain_within_range)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03d      	beq.n	8001fd4 <map+0xd8>
	{
		if(to_high>=to_low){
 8001f58:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	db1a      	blt.n	8001fa0 <map+0xa4>
			value_to_map = value_to_map > to_high ? to_high : value_to_map;
 8001f6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	dd01      	ble.n	8001f80 <map+0x84>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	e000      	b.n	8001f82 <map+0x86>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map < to_low ? to_low : value_to_map;
 8001f84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	d501      	bpl.n	8001f9a <map+0x9e>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	e000      	b.n	8001f9c <map+0xa0>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e019      	b.n	8001fd4 <map+0xd8>
		}else{
			// to low is the higher limit
			value_to_map = value_to_map < to_high ? to_high : value_to_map;
 8001fa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	d501      	bpl.n	8001fb6 <map+0xba>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e000      	b.n	8001fb8 <map+0xbc>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map > to_low ? to_low : value_to_map;
 8001fba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fca:	dd01      	ble.n	8001fd0 <map+0xd4>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	e000      	b.n	8001fd2 <map+0xd6>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	617b      	str	r3, [r7, #20]

		}
	}
	return value_to_map;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	ee07 3a90 	vmov	s15, r3
}
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a66      	ldr	r2, [pc, #408]	; (8002190 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f040 80c0 	bne.w	800217c <HAL_ADC_ConvCpltCallback+0x194>
	{
		bat.voltage = (uint16_t)(((raw_adc_data[0]*3.3/(float)1024)*vbat_scale*vbat_multiplier/(float)vbat_divider)*10.0); // battery voltage in 0.1V units
 8001ffc:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa32 	bl	800046c <__aeabi_i2d>
 8002008:	a35f      	add	r3, pc, #380	; (adr r3, 8002188 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fa97 	bl	8000540 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b5e      	ldr	r3, [pc, #376]	; (8002198 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002020:	f7fe fbb8 	bl	8000794 <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_ADC_ConvCpltCallback+0x1b4>)
 8002032:	f7fe fa85 	bl	8000540 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002044:	f7fe fba6 	bl	8000794 <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002056:	f7fe fa73 	bl	8000540 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fc7f 	bl	8000964 <__aeabi_d2uiz>
 8002066:	4603      	mov	r3, r0
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800206c:	801a      	strh	r2, [r3, #0]
		bat.current = (uint16_t)(((raw_adc_data[1]*3.3/(float)1024)*ibata_scale - ibata_offset)*10.0); // battery voltage in 0.1A units
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8002070:	885b      	ldrh	r3, [r3, #2]
 8002072:	b29b      	uxth	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe f9f9 	bl	800046c <__aeabi_i2d>
 800207a:	a343      	add	r3, pc, #268	; (adr r3, 8002188 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fa5e 	bl	8000540 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002092:	f7fe fb7f 	bl	8000794 <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80020a4:	f7fe fa4c 	bl	8000540 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80020b6:	f7fe fa43 	bl	8000540 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fc4f 	bl	8000964 <__aeabi_d2uiz>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80020cc:	805a      	strh	r2, [r3, #2]
		if(first_startup)
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_ADC_ConvCpltCallback+0x1c4>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d025      	beq.n	8002122 <HAL_ADC_ConvCpltCallback+0x13a>
		{   first_startup = false;
 80020d6:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_ADC_ConvCpltCallback+0x1c4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
			if(bat.voltage > 152)
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b98      	cmp	r3, #152	; 0x98
 80020e4:	d906      	bls.n	80020f4 <HAL_ADC_ConvCpltCallback+0x10c>
			{
				//4s
				bat_0_voltage = 152;
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80020e8:	2298      	movs	r2, #152	; 0x98
 80020ea:	601a      	str	r2, [r3, #0]
				bat_100_voltage = 168;
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80020ee:	22a8      	movs	r2, #168	; 0xa8
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e016      	b.n	8002122 <HAL_ADC_ConvCpltCallback+0x13a>
			}else if(bat.voltage > 114)
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b72      	cmp	r3, #114	; 0x72
 80020fc:	d906      	bls.n	800210c <HAL_ADC_ConvCpltCallback+0x124>
			{
				//3s
				bat_0_voltage = 114;
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002100:	2272      	movs	r2, #114	; 0x72
 8002102:	601a      	str	r2, [r3, #0]
				bat_100_voltage = 126;
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8002106:	227e      	movs	r2, #126	; 0x7e
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e00a      	b.n	8002122 <HAL_ADC_ConvCpltCallback+0x13a>
			}else if(bat.voltage > 76)
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b4c      	cmp	r3, #76	; 0x4c
 8002114:	d905      	bls.n	8002122 <HAL_ADC_ConvCpltCallback+0x13a>
			{
				//3s
				bat_0_voltage = 76;
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002118:	224c      	movs	r2, #76	; 0x4c
 800211a:	601a      	str	r2, [r3, #0]
				bat_100_voltage = 84;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800211e:	2254      	movs	r2, #84	; 0x54
 8002120:	601a      	str	r2, [r3, #0]
			}

		}
		bat.remaining = (uint8_t)(map(bat.voltage,bat_0_voltage,bat_100_voltage,0,100,true));
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	ee07 3a10 	vmov	s14, r3
 8002138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	ee06 3a90 	vmov	s13, r3
 8002144:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002148:	2001      	movs	r0, #1
 800214a:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 80021b8 <HAL_ADC_ConvCpltCallback+0x1d0>
 800214e:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80021bc <HAL_ADC_ConvCpltCallback+0x1d4>
 8002152:	eeb0 1a66 	vmov.f32	s2, s13
 8002156:	eef0 0a47 	vmov.f32	s1, s14
 800215a:	eeb0 0a67 	vmov.f32	s0, s15
 800215e:	f7ff fecd 	bl	8001efc <map>
 8002162:	eef0 7a40 	vmov.f32	s15, s0
 8002166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216a:	edc7 7a00 	vstr	s15, [r7]
 800216e:	783b      	ldrb	r3, [r7, #0]
 8002170:	b2d9      	uxtb	r1, r3
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002174:	79d3      	ldrb	r3, [r2, #7]
 8002176:	f361 0307 	bfi	r3, r1, #0, #8
 800217a:	71d3      	strb	r3, [r2, #7]
	}
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	f3af 8000 	nop.w
 8002188:	66666666 	.word	0x66666666
 800218c:	400a6666 	.word	0x400a6666
 8002190:	40012000 	.word	0x40012000
 8002194:	20000380 	.word	0x20000380
 8002198:	40900000 	.word	0x40900000
 800219c:	405b8000 	.word	0x405b8000
 80021a0:	40240000 	.word	0x40240000
 80021a4:	20000004 	.word	0x20000004
 80021a8:	40790000 	.word	0x40790000
 80021ac:	20000014 	.word	0x20000014
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	20000010 	.word	0x20000010
 80021b8:	42c80000 	.word	0x42c80000
 80021bc:	00000000 	.word	0x00000000

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_MspInit+0x4c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_MspInit+0x4c>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002220:	f002 fe52 	bl	8004ec8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <NMI_Handler+0x8>

08002226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <MemManage_Handler+0x4>

08002232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler+0x4>

0800223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226c:	f000 fd34 	bl	8002cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <DMA1_Stream2_IRQHandler+0x10>)
 800227a:	f001 fd47 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000508 	.word	0x20000508

08002288 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <DMA1_Stream6_IRQHandler+0x10>)
 800228e:	f001 fd3d 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200004a8 	.word	0x200004a8

0800229c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <ADC_IRQHandler+0x10>)
 80022a2:	f000 fda0 	bl	8002de6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000224 	.word	0x20000224

080022b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <DMA2_Stream0_IRQHandler+0x10>)
 80022b6:	f001 fd29 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000026c 	.word	0x2000026c

080022c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <DMA2_Stream1_IRQHandler+0x10>)
 80022ca:	f001 fd1f 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200005ac 	.word	0x200005ac

080022d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <DMA2_Stream6_IRQHandler+0x10>)
 80022de:	f001 fd15 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000060c 	.word	0x2000060c

080022ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART6_IRQHandler+0x10>)
 80022f2:	f003 fe3b 	bl	8005f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000568 	.word	0x20000568

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch2_ch4;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <MX_TIM2_Init+0xe4>)
 8002356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800235a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <MX_TIM2_Init+0xe4>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <MX_TIM2_Init+0xe4>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <MX_TIM2_Init+0xe4>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <MX_TIM2_Init+0xe4>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <MX_TIM2_Init+0xe4>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <MX_TIM2_Init+0xe4>)
 800237c:	f002 fdbf 	bl	8004efe <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002386:	f7ff ff1b 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002394:	4619      	mov	r1, r3
 8002396:	481c      	ldr	r0, [pc, #112]	; (8002408 <MX_TIM2_Init+0xe4>)
 8002398:	f002 ffe4 	bl	8005364 <HAL_TIM_ConfigClockSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80023a2:	f7ff ff0d 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023a6:	4818      	ldr	r0, [pc, #96]	; (8002408 <MX_TIM2_Init+0xe4>)
 80023a8:	f002 fdf8 	bl	8004f9c <HAL_TIM_PWM_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80023b2:	f7ff ff05 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	4619      	mov	r1, r3
 80023c4:	4810      	ldr	r0, [pc, #64]	; (8002408 <MX_TIM2_Init+0xe4>)
 80023c6:	f003 fba5 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80023d0:	f7ff fef6 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d4:	2360      	movs	r3, #96	; 0x60
 80023d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	220c      	movs	r2, #12
 80023e8:	4619      	mov	r1, r3
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <MX_TIM2_Init+0xe4>)
 80023ec:	f002 fef8 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80023f6:	f7ff fee3 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023fa:	4803      	ldr	r0, [pc, #12]	; (8002408 <MX_TIM2_Init+0xe4>)
 80023fc:	f000 fa5c 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 8002400:	bf00      	nop
 8002402:	3738      	adds	r7, #56	; 0x38
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000388 	.word	0x20000388

0800240c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	; 0x38
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	615a      	str	r2, [r3, #20]
 800243a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800243c:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <MX_TIM3_Init+0xe4>)
 800243e:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <MX_TIM3_Init+0xe8>)
 8002440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <MX_TIM3_Init+0xe4>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <MX_TIM3_Init+0xe4>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <MX_TIM3_Init+0xe4>)
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002454:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <MX_TIM3_Init+0xe4>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <MX_TIM3_Init+0xe4>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002460:	4823      	ldr	r0, [pc, #140]	; (80024f0 <MX_TIM3_Init+0xe4>)
 8002462:	f002 fd4c 	bl	8004efe <HAL_TIM_Base_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800246c:	f7ff fea8 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247a:	4619      	mov	r1, r3
 800247c:	481c      	ldr	r0, [pc, #112]	; (80024f0 <MX_TIM3_Init+0xe4>)
 800247e:	f002 ff71 	bl	8005364 <HAL_TIM_ConfigClockSource>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002488:	f7ff fe9a 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800248c:	4818      	ldr	r0, [pc, #96]	; (80024f0 <MX_TIM3_Init+0xe4>)
 800248e:	f002 fd85 	bl	8004f9c <HAL_TIM_PWM_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002498:	f7ff fe92 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	4619      	mov	r1, r3
 80024aa:	4811      	ldr	r0, [pc, #68]	; (80024f0 <MX_TIM3_Init+0xe4>)
 80024ac:	f003 fb32 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80024b6:	f7ff fe83 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ba:	2360      	movs	r3, #96	; 0x60
 80024bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	220c      	movs	r2, #12
 80024ce:	4619      	mov	r1, r3
 80024d0:	4807      	ldr	r0, [pc, #28]	; (80024f0 <MX_TIM3_Init+0xe4>)
 80024d2:	f002 fe85 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80024dc:	f7ff fe70 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <MX_TIM3_Init+0xe4>)
 80024e2:	f000 f9e9 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 80024e6:	bf00      	nop
 80024e8:	3738      	adds	r7, #56	; 0x38
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003d0 	.word	0x200003d0
 80024f4:	40000400 	.word	0x40000400

080024f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08e      	sub	sp, #56	; 0x38
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250c:	f107 0320 	add.w	r3, r7, #32
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	615a      	str	r2, [r3, #20]
 8002526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <MX_TIM4_Init+0xfc>)
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <MX_TIM4_Init+0x100>)
 800252c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <MX_TIM4_Init+0xfc>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <MX_TIM4_Init+0xfc>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <MX_TIM4_Init+0xfc>)
 800253c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002540:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <MX_TIM4_Init+0xfc>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <MX_TIM4_Init+0xfc>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800254e:	4829      	ldr	r0, [pc, #164]	; (80025f4 <MX_TIM4_Init+0xfc>)
 8002550:	f002 fcd5 	bl	8004efe <HAL_TIM_Base_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800255a:	f7ff fe31 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002568:	4619      	mov	r1, r3
 800256a:	4822      	ldr	r0, [pc, #136]	; (80025f4 <MX_TIM4_Init+0xfc>)
 800256c:	f002 fefa 	bl	8005364 <HAL_TIM_ConfigClockSource>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002576:	f7ff fe23 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800257a:	481e      	ldr	r0, [pc, #120]	; (80025f4 <MX_TIM4_Init+0xfc>)
 800257c:	f002 fd0e 	bl	8004f9c <HAL_TIM_PWM_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002586:	f7ff fe1b 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	4619      	mov	r1, r3
 8002598:	4816      	ldr	r0, [pc, #88]	; (80025f4 <MX_TIM4_Init+0xfc>)
 800259a:	f003 fabb 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80025a4:	f7ff fe0c 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a8:	2360      	movs	r3, #96	; 0x60
 80025aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	; (80025f4 <MX_TIM4_Init+0xfc>)
 80025c0:	f002 fe0e 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80025ca:	f7ff fdf9 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2204      	movs	r2, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4807      	ldr	r0, [pc, #28]	; (80025f4 <MX_TIM4_Init+0xfc>)
 80025d6:	f002 fe03 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80025e0:	f7ff fdee 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <MX_TIM4_Init+0xfc>)
 80025e6:	f000 f967 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 80025ea:	bf00      	nop
 80025ec:	3738      	adds	r7, #56	; 0x38
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000418 	.word	0x20000418
 80025f8:	40000800 	.word	0x40000800

080025fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	615a      	str	r2, [r3, #20]
 800262a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800262c:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <MX_TIM5_Init+0xe4>)
 800262e:	4a2d      	ldr	r2, [pc, #180]	; (80026e4 <MX_TIM5_Init+0xe8>)
 8002630:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <MX_TIM5_Init+0xe4>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <MX_TIM5_Init+0xe4>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800263e:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <MX_TIM5_Init+0xe4>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <MX_TIM5_Init+0xe4>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <MX_TIM5_Init+0xe4>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002650:	4823      	ldr	r0, [pc, #140]	; (80026e0 <MX_TIM5_Init+0xe4>)
 8002652:	f002 fc54 	bl	8004efe <HAL_TIM_Base_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800265c:	f7ff fdb0 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800266a:	4619      	mov	r1, r3
 800266c:	481c      	ldr	r0, [pc, #112]	; (80026e0 <MX_TIM5_Init+0xe4>)
 800266e:	f002 fe79 	bl	8005364 <HAL_TIM_ConfigClockSource>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8002678:	f7ff fda2 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800267c:	4818      	ldr	r0, [pc, #96]	; (80026e0 <MX_TIM5_Init+0xe4>)
 800267e:	f002 fc8d 	bl	8004f9c <HAL_TIM_PWM_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002688:	f7ff fd9a 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002694:	f107 0320 	add.w	r3, r7, #32
 8002698:	4619      	mov	r1, r3
 800269a:	4811      	ldr	r0, [pc, #68]	; (80026e0 <MX_TIM5_Init+0xe4>)
 800269c:	f003 fa3a 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80026a6:	f7ff fd8b 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026aa:	2360      	movs	r3, #96	; 0x60
 80026ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	4807      	ldr	r0, [pc, #28]	; (80026e0 <MX_TIM5_Init+0xe4>)
 80026c2:	f002 fd8d 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80026cc:	f7ff fd78 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026d0:	4803      	ldr	r0, [pc, #12]	; (80026e0 <MX_TIM5_Init+0xe4>)
 80026d2:	f000 f8f1 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 80026d6:	bf00      	nop
 80026d8:	3738      	adds	r7, #56	; 0x38
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000460 	.word	0x20000460
 80026e4:	40000c00 	.word	0x40000c00

080026e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d14e      	bne.n	8002798 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002716:	4b61      	ldr	r3, [pc, #388]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002718:	4a61      	ldr	r2, [pc, #388]	; (80028a0 <HAL_TIM_Base_MspInit+0x1b8>)
 800271a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800271c:	4b5f      	ldr	r3, [pc, #380]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800271e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002722:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002724:	4b5d      	ldr	r3, [pc, #372]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002736:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002738:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800273a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800273e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002740:	4b56      	ldr	r3, [pc, #344]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002746:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002748:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800274e:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002750:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002754:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002758:	2204      	movs	r2, #4
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800275e:	2200      	movs	r2, #0
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002762:	4b4e      	ldr	r3, [pc, #312]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002764:	2200      	movs	r2, #0
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002768:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800276e:	484b      	ldr	r0, [pc, #300]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002770:	f001 f934 	bl	80039dc <HAL_DMA_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 800277a:	f7ff fd21 	bl	80021c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a46      	ldr	r2, [pc, #280]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
 8002784:	4a45      	ldr	r2, [pc, #276]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a43      	ldr	r2, [pc, #268]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
 8002790:	4a42      	ldr	r2, [pc, #264]	; (800289c <HAL_TIM_Base_MspInit+0x1b4>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002796:	e07a      	b.n	800288e <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_TIM_Base_MspInit+0x1bc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d14e      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80027be:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_TIM_Base_MspInit+0x1c4>)
 80027c2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027c6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80027ca:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027de:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80027f6:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027fc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002800:	2204      	movs	r2, #4
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002806:	2200      	movs	r2, #0
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800280c:	2200      	movs	r2, #0
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002816:	4824      	ldr	r0, [pc, #144]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002818:	f001 f8e0 	bl	80039dc <HAL_DMA_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8002822:	f7ff fccd 	bl	80021c0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800283e:	e026      	b.n	800288e <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_TIM_Base_MspInit+0x1c8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
}
 8002866:	e012      	b.n	800288e <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM5)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_TIM_Base_MspInit+0x1cc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10d      	bne.n	800288e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_TIM_Base_MspInit+0x1b0>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	200004a8 	.word	0x200004a8
 80028a0:	400260a0 	.word	0x400260a0
 80028a4:	40000400 	.word	0x40000400
 80028a8:	20000508 	.word	0x20000508
 80028ac:	40026040 	.word	0x40026040
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40000c00 	.word	0x40000c00

080028b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d11e      	bne.n	8002918 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a45      	ldr	r2, [pc, #276]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028f6:	2308      	movs	r3, #8
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002906:	2301      	movs	r3, #1
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	4619      	mov	r1, r3
 8002910:	483a      	ldr	r0, [pc, #232]	; (80029fc <HAL_TIM_MspPostInit+0x144>)
 8002912:	f001 fc65 	bl	80041e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002916:	e06a      	b.n	80029ee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_TIM_MspPostInit+0x148>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11e      	bne.n	8002960 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a33      	ldr	r2, [pc, #204]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800293e:	2302      	movs	r3, #2
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800294e:	2302      	movs	r3, #2
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	482a      	ldr	r0, [pc, #168]	; (8002a04 <HAL_TIM_MspPostInit+0x14c>)
 800295a:	f001 fc41 	bl	80041e0 <HAL_GPIO_Init>
}
 800295e:	e046      	b.n	80029ee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_TIM_MspPostInit+0x150>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d11e      	bne.n	80029a8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <HAL_TIM_MspPostInit+0x14c>)
 80029a2:	f001 fc1d 	bl	80041e0 <HAL_GPIO_Init>
}
 80029a6:	e022      	b.n	80029ee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM5)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_TIM_MspPostInit+0x154>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11d      	bne.n	80029ee <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_TIM_MspPostInit+0x140>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029de:	2302      	movs	r3, #2
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <HAL_TIM_MspPostInit+0x144>)
 80029ea:	f001 fbf9 	bl	80041e0 <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	3730      	adds	r7, #48	; 0x30
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40000c00 	.word	0x40000c00

08002a10 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a16:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <MX_USART6_UART_Init+0x4c>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 416666;
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a1c:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <MX_USART6_UART_Init+0x50>)
 8002a1e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a34:	220c      	movs	r2, #12
 8002a36:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a44:	4804      	ldr	r0, [pc, #16]	; (8002a58 <MX_USART6_UART_Init+0x48>)
 8002a46:	f003 f8e1 	bl	8005c0c <HAL_UART_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8002a50:	f7ff fbb6 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000568 	.word	0x20000568
 8002a5c:	40011400 	.word	0x40011400
 8002a60:	00065b9a 	.word	0x00065b9a

08002a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	f040 809a 	bne.w	8002bbc <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	4a4d      	ldr	r2, [pc, #308]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002a92:	f043 0320 	orr.w	r3, r3, #32
 8002a96:	6453      	str	r3, [r2, #68]	; 0x44
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4a46      	ldr	r2, [pc, #280]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab4:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ac0:	23c0      	movs	r3, #192	; 0xc0
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002acc:	2303      	movs	r3, #3
 8002ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4619      	mov	r1, r3
 8002ada:	483c      	ldr	r0, [pc, #240]	; (8002bcc <HAL_UART_MspInit+0x168>)
 8002adc:	f001 fb80 	bl	80041e0 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002ae2:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <HAL_UART_MspInit+0x170>)
 8002ae4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002ae8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002aec:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002afa:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b00:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b02:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b14:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b1a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b1e:	2204      	movs	r2, #4
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002b34:	4826      	ldr	r0, [pc, #152]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b36:	f000 ff51 	bl	80039dc <HAL_DMA_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002b40:	f7ff fb3e 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
 8002b4a:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_UART_MspInit+0x178>)
 8002b54:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b58:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002b5c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b70:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002b90:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b92:	f000 ff23 	bl	80039dc <HAL_DMA_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002b9c:	f7ff fb10 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2047      	movs	r0, #71	; 0x47
 8002bb2:	f000 fedc 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bb6:	2047      	movs	r0, #71	; 0x47
 8002bb8:	f000 fef5 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	200005ac 	.word	0x200005ac
 8002bd4:	40026428 	.word	0x40026428
 8002bd8:	2000060c 	.word	0x2000060c
 8002bdc:	400264a0 	.word	0x400264a0

08002be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be4:	480d      	ldr	r0, [pc, #52]	; (8002c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002be6:	490e      	ldr	r1, [pc, #56]	; (8002c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bfc:	4c0b      	ldr	r4, [pc, #44]	; (8002c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c0a:	f7ff fb79 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f004 fa93 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c12:	f7fe fdf1 	bl	80017f8 <main>
  bx  lr    
 8002c16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002c24:	0800726c 	.word	0x0800726c
  ldr r2, =_sbss
 8002c28:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002c2c:	20000670 	.word	0x20000670

08002c30 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <CAN1_RX0_IRQHandler>
	...

08002c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_Init+0x40>)
 8002c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_Init+0x40>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_Init+0x40>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f000 fe7b 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c62:	200f      	movs	r0, #15
 8002c64:	f000 f808 	bl	8002c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c68:	f7ff fab0 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00

08002c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_InitTick+0x54>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x58>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fe93 	bl	80039c2 <HAL_SYSTICK_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00e      	b.n	8002cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0f      	cmp	r3, #15
 8002caa:	d80a      	bhi.n	8002cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f000 fe5b 	bl	800396e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_InitTick+0x5c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000018 	.word	0x20000018
 8002cd0:	20000020 	.word	0x20000020
 8002cd4:	2000001c 	.word	0x2000001c

08002cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_IncTick+0x20>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x24>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_IncTick+0x24>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000020 	.word	0x20000020
 8002cfc:	2000066c 	.word	0x2000066c

08002d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_GetTick+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	2000066c 	.word	0x2000066c

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff ffee 	bl	8002d00 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_Delay+0x44>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffde 	bl	8002d00 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000020 	.word	0x20000020

08002d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e033      	b.n	8002dde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe f9e0 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fb78 	bl	80034a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dce:	e001      	b.n	8002dd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d049      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0xca>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d046      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d12b      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d127      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d119      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0220 	bic.w	r2, r2, #32
 8002e7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff f8a1 	bl	8001fe8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0212 	mvn.w	r2, #18
 8002eae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d057      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x190>
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d054      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d139      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12b      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d124      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d119      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f40:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fc1c 	bl	80037a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 020c 	mvn.w	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x1d6>
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d014      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10d      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f945 	bl	800323c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0201 	mvn.w	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d015      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x218>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d012      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0220 	mvn.w	r2, #32
 8002fec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f92e 	bl	8003250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0220 	mvn.w	r2, #32
 8002ffc:	601a      	str	r2, [r3, #0]
  }
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_ADC_Start_DMA+0x1e>
 8003022:	2302      	movs	r3, #2
 8003024:	e0e9      	b.n	80031fa <HAL_ADC_Start_DMA+0x1f2>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d018      	beq.n	800306e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800304c:	4b6d      	ldr	r3, [pc, #436]	; (8003204 <HAL_ADC_Start_DMA+0x1fc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6d      	ldr	r2, [pc, #436]	; (8003208 <HAL_ADC_Start_DMA+0x200>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9a      	lsrs	r2, r3, #18
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003060:	e002      	b.n	8003068 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3b01      	subs	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f9      	bne.n	8003062 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d107      	bne.n	800308e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 80a1 	bne.w	80031e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d106      	bne.n	80030ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f023 0206 	bic.w	r2, r3, #6
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
 80030ea:	e002      	b.n	80030f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fa:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_ADC_Start_DMA+0x204>)
 80030fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	4a43      	ldr	r2, [pc, #268]	; (8003210 <HAL_ADC_Start_DMA+0x208>)
 8003104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	4a42      	ldr	r2, [pc, #264]	; (8003214 <HAL_ADC_Start_DMA+0x20c>)
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	4a41      	ldr	r2, [pc, #260]	; (8003218 <HAL_ADC_Start_DMA+0x210>)
 8003114:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800311e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800312e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	334c      	adds	r3, #76	; 0x4c
 800314a:	4619      	mov	r1, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f000 fcf2 	bl	8003b38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2b00      	cmp	r3, #0
 800315e:	d12a      	bne.n	80031b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	; (800321c <HAL_ADC_Start_DMA+0x214>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d015      	beq.n	8003196 <HAL_ADC_Start_DMA+0x18e>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <HAL_ADC_Start_DMA+0x218>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d105      	bne.n	8003180 <HAL_ADC_Start_DMA+0x178>
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_ADC_Start_DMA+0x204>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_ADC_Start_DMA+0x21c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d136      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_ADC_Start_DMA+0x204>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d130      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d129      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e020      	b.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_ADC_Start_DMA+0x214>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d11b      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d114      	bne.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	e00b      	b.n	80031f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000018 	.word	0x20000018
 8003208:	431bde83 	.word	0x431bde83
 800320c:	40012300 	.word	0x40012300
 8003210:	080036a1 	.word	0x080036a1
 8003214:	0800375b 	.word	0x0800375b
 8003218:	08003777 	.word	0x08003777
 800321c:	40012000 	.word	0x40012000
 8003220:	40012100 	.word	0x40012100
 8003224:	40012200 	.word	0x40012200

08003228 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1c>
 800327c:	2302      	movs	r3, #2
 800327e:	e105      	b.n	800348c <HAL_ADC_ConfigChannel+0x228>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b09      	cmp	r3, #9
 800328e:	d925      	bls.n	80032dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	3b1e      	subs	r3, #30
 80032a6:	2207      	movs	r2, #7
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43da      	mvns	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	400a      	ands	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68d9      	ldr	r1, [r3, #12]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4618      	mov	r0, r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4403      	add	r3, r0
 80032ce:	3b1e      	subs	r3, #30
 80032d0:	409a      	lsls	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e022      	b.n	8003322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6919      	ldr	r1, [r3, #16]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	2207      	movs	r2, #7
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	400a      	ands	r2, r1
 80032fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6919      	ldr	r1, [r3, #16]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	4603      	mov	r3, r0
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4403      	add	r3, r0
 8003318:	409a      	lsls	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b06      	cmp	r3, #6
 8003328:	d824      	bhi.n	8003374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	3b05      	subs	r3, #5
 800333c:	221f      	movs	r2, #31
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	400a      	ands	r2, r1
 800334a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b05      	subs	r3, #5
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
 8003372:	e04c      	b.n	800340e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d824      	bhi.n	80033c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	3b23      	subs	r3, #35	; 0x23
 800338e:	221f      	movs	r2, #31
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43da      	mvns	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	400a      	ands	r2, r1
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	3b23      	subs	r3, #35	; 0x23
 80033b8:	fa00 f203 	lsl.w	r2, r0, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
 80033c4:	e023      	b.n	800340e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	3b41      	subs	r3, #65	; 0x41
 80033d8:	221f      	movs	r2, #31
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	400a      	ands	r2, r1
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	3b41      	subs	r3, #65	; 0x41
 8003402:	fa00 f203 	lsl.w	r2, r0, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_ADC_ConfigChannel+0x234>)
 8003410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_ADC_ConfigChannel+0x238>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d109      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1cc>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b12      	cmp	r3, #18
 8003422:	d105      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_ADC_ConfigChannel+0x238>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d123      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x21e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d003      	beq.n	800344a <HAL_ADC_ConfigChannel+0x1e6>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b11      	cmp	r3, #17
 8003448:	d11b      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d111      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_ADC_ConfigChannel+0x23c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_ADC_ConfigChannel+0x240>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9a      	lsrs	r2, r3, #18
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003474:	e002      	b.n	800347c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3b01      	subs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f9      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40012300 	.word	0x40012300
 800349c:	40012000 	.word	0x40012000
 80034a0:	20000018 	.word	0x20000018
 80034a4:	431bde83 	.word	0x431bde83

080034a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b0:	4b79      	ldr	r3, [pc, #484]	; (8003698 <ADC_Init+0x1f0>)
 80034b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	021a      	lsls	r2, r3, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6899      	ldr	r1, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <ADC_Init+0x1f4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6899      	ldr	r1, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6899      	ldr	r1, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	e00f      	b.n	80035a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0202 	bic.w	r2, r2, #2
 80035b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6899      	ldr	r1, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7e1b      	ldrb	r3, [r3, #24]
 80035c0:	005a      	lsls	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01b      	beq.n	800360c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	3b01      	subs	r3, #1
 8003600:	035a      	lsls	r2, r3, #13
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	e007      	b.n	800361c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	3b01      	subs	r3, #1
 8003638:	051a      	lsls	r2, r3, #20
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6899      	ldr	r1, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800365e:	025a      	lsls	r2, r3, #9
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	029a      	lsls	r2, r3, #10
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40012300 	.word	0x40012300
 800369c:	0f000001 	.word	0x0f000001

080036a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d13c      	bne.n	8003734 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d12b      	bne.n	800372c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d127      	bne.n	800372c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d119      	bne.n	800372c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0220 	bic.w	r2, r2, #32
 8003706:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fe fc5b 	bl	8001fe8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003732:	e00e      	b.n	8003752 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fd85 	bl	8003250 <HAL_ADC_ErrorCallback>
}
 8003746:	e004      	b.n	8003752 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff fd5d 	bl	8003228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f043 0204 	orr.w	r2, r3, #4
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff fd5a 	bl	8003250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003924:	d301      	bcc.n	800392a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <SysTick_Config+0x40>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003932:	210f      	movs	r1, #15
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	f7ff ff8e 	bl	8003858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SysTick_Config+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <SysTick_Config+0x40>)
 8003944:	2207      	movs	r2, #7
 8003946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010

08003958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff29 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003980:	f7ff ff3e 	bl	8003800 <__NVIC_GetPriorityGrouping>
 8003984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff ff8e 	bl	80038ac <NVIC_EncodePriority>
 8003990:	4602      	mov	r2, r0
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff5d 	bl	8003858 <__NVIC_SetPriority>
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff31 	bl	800381c <__NVIC_EnableIRQ>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffa2 	bl	8003914 <SysTick_Config>
 80039d0:	4603      	mov	r3, r0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff f98a 	bl	8002d00 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e099      	b.n	8003b2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a18:	e00f      	b.n	8003a3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a1a:	f7ff f971 	bl	8002d00 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d908      	bls.n	8003a3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e078      	b.n	8003b2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e8      	bne.n	8003a1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_DMA_Init+0x158>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d107      	bne.n	8003aa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d117      	bne.n	8003afe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb01 	bl	80040e8 <DMA_CheckFifoParam>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003afa:	2301      	movs	r3, #1
 8003afc:	e016      	b.n	8003b2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fab8 	bl	800407c <DMA_CalcBaseAndBitshift>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	223f      	movs	r2, #63	; 0x3f
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	f010803f 	.word	0xf010803f

08003b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_DMA_Start_IT+0x26>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e040      	b.n	8003be0 <HAL_DMA_Start_IT+0xa8>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d12f      	bne.n	8003bd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa4a 	bl	8004020 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	409a      	lsls	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0216 	orr.w	r2, r2, #22
 8003ba6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0208 	orr.w	r2, r2, #8
 8003bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e005      	b.n	8003bde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7ff f883 	bl	8002d00 <HAL_GetTick>
 8003bfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d008      	beq.n	8003c1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e052      	b.n	8003cc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0216 	bic.w	r2, r2, #22
 8003c28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <HAL_DMA_Abort+0x62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6a:	e013      	b.n	8003c94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c6c:	f7ff f848 	bl	8002d00 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d90c      	bls.n	8003c94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2203      	movs	r2, #3
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e015      	b.n	8003cc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e4      	bne.n	8003c6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00c      	b.n	8003d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d18:	4b8e      	ldr	r3, [pc, #568]	; (8003f54 <HAL_DMA_IRQHandler+0x248>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a8e      	ldr	r2, [pc, #568]	; (8003f58 <HAL_DMA_IRQHandler+0x24c>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	2208      	movs	r2, #8
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0204 	bic.w	r2, r2, #4
 8003d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	2208      	movs	r2, #8
 8003d66:	409a      	lsls	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f043 0202 	orr.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	2204      	movs	r2, #4
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d012      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2210      	movs	r2, #16
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d043      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d03c      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2210      	movs	r2, #16
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d024      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e01f      	b.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
 8003e4c:	e016      	b.n	8003e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0208 	bic.w	r2, r2, #8
 8003e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2220      	movs	r2, #32
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808f 	beq.w	8003fac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8087 	beq.w	8003fac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d136      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0216 	bic.w	r2, r2, #22
 8003ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0x1da>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0208 	bic.w	r2, r2, #8
 8003ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	223f      	movs	r2, #63	; 0x3f
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d07e      	beq.n	8004018 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
        }
        return;
 8003f22:	e079      	b.n	8004018 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10d      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d031      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e02c      	b.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
 8003f52:	bf00      	nop
 8003f54:	20000018 	.word	0x20000018
 8003f58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
 8003f6c:	e01e      	b.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0210 	bic.w	r2, r2, #16
 8003f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d032      	beq.n	800401a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d022      	beq.n	8004006 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d307      	bcc.n	8003ff4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f2      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x2cc>
 8003ff2:	e000      	b.n	8003ff6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ff4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
 8004016:	e000      	b.n	800401a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004018:	bf00      	nop
    }
  }
}
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800403c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d108      	bne.n	8004060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800405e:	e007      	b.n	8004070 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3b10      	subs	r3, #16
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <DMA_CalcBaseAndBitshift+0x64>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d909      	bls.n	80040be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	659a      	str	r2, [r3, #88]	; 0x58
 80040bc:	e007      	b.n	80040ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	aaaaaaab 	.word	0xaaaaaaab
 80040e4:	0800724c 	.word	0x0800724c

080040e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11f      	bne.n	8004142 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d856      	bhi.n	80041b6 <DMA_CheckFifoParam+0xce>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <DMA_CheckFifoParam+0x28>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004121 	.word	0x08004121
 8004114:	08004133 	.word	0x08004133
 8004118:	08004121 	.word	0x08004121
 800411c:	080041b7 	.word	0x080041b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d046      	beq.n	80041ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004130:	e043      	b.n	80041ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413a:	d140      	bne.n	80041be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004140:	e03d      	b.n	80041be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414a:	d121      	bne.n	8004190 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d837      	bhi.n	80041c2 <DMA_CheckFifoParam+0xda>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <DMA_CheckFifoParam+0x70>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	08004169 	.word	0x08004169
 800415c:	0800416f 	.word	0x0800416f
 8004160:	08004169 	.word	0x08004169
 8004164:	08004181 	.word	0x08004181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	e030      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d025      	beq.n	80041c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417e:	e022      	b.n	80041c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004188:	d11f      	bne.n	80041ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800418e:	e01c      	b.n	80041ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d903      	bls.n	800419e <DMA_CheckFifoParam+0xb6>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d003      	beq.n	80041a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800419c:	e018      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      break;
 80041a2:	e015      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e00b      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;
 80041b6:	bf00      	nop
 80041b8:	e00a      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ba:	bf00      	nop
 80041bc:	e008      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e006      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e004      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
    }
  } 
  
  return status; 
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop

080041e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	e16b      	b.n	80044d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041fc:	2201      	movs	r2, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	429a      	cmp	r2, r3
 8004216:	f040 815a 	bne.w	80044ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d005      	beq.n	8004232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422e:	2b02      	cmp	r3, #2
 8004230:	d130      	bne.n	8004294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0201 	and.w	r2, r3, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d017      	beq.n	80042d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d123      	bne.n	8004324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	08da      	lsrs	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3208      	adds	r2, #8
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0203 	and.w	r2, r3, #3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80b4 	beq.w	80044ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	4b60      	ldr	r3, [pc, #384]	; (80044ec <HAL_GPIO_Init+0x30c>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	4a5f      	ldr	r2, [pc, #380]	; (80044ec <HAL_GPIO_Init+0x30c>)
 8004370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004374:	6453      	str	r3, [r2, #68]	; 0x44
 8004376:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <HAL_GPIO_Init+0x30c>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004382:	4a5b      	ldr	r2, [pc, #364]	; (80044f0 <HAL_GPIO_Init+0x310>)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	3302      	adds	r3, #2
 800438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	220f      	movs	r2, #15
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a52      	ldr	r2, [pc, #328]	; (80044f4 <HAL_GPIO_Init+0x314>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02b      	beq.n	8004406 <HAL_GPIO_Init+0x226>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a51      	ldr	r2, [pc, #324]	; (80044f8 <HAL_GPIO_Init+0x318>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d025      	beq.n	8004402 <HAL_GPIO_Init+0x222>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_GPIO_Init+0x31c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <HAL_GPIO_Init+0x21e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4f      	ldr	r2, [pc, #316]	; (8004500 <HAL_GPIO_Init+0x320>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d019      	beq.n	80043fa <HAL_GPIO_Init+0x21a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4e      	ldr	r2, [pc, #312]	; (8004504 <HAL_GPIO_Init+0x324>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_GPIO_Init+0x216>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4d      	ldr	r2, [pc, #308]	; (8004508 <HAL_GPIO_Init+0x328>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00d      	beq.n	80043f2 <HAL_GPIO_Init+0x212>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4c      	ldr	r2, [pc, #304]	; (800450c <HAL_GPIO_Init+0x32c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <HAL_GPIO_Init+0x20e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4b      	ldr	r2, [pc, #300]	; (8004510 <HAL_GPIO_Init+0x330>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_GPIO_Init+0x20a>
 80043e6:	2307      	movs	r3, #7
 80043e8:	e00e      	b.n	8004408 <HAL_GPIO_Init+0x228>
 80043ea:	2308      	movs	r3, #8
 80043ec:	e00c      	b.n	8004408 <HAL_GPIO_Init+0x228>
 80043ee:	2306      	movs	r3, #6
 80043f0:	e00a      	b.n	8004408 <HAL_GPIO_Init+0x228>
 80043f2:	2305      	movs	r3, #5
 80043f4:	e008      	b.n	8004408 <HAL_GPIO_Init+0x228>
 80043f6:	2304      	movs	r3, #4
 80043f8:	e006      	b.n	8004408 <HAL_GPIO_Init+0x228>
 80043fa:	2303      	movs	r3, #3
 80043fc:	e004      	b.n	8004408 <HAL_GPIO_Init+0x228>
 80043fe:	2302      	movs	r3, #2
 8004400:	e002      	b.n	8004408 <HAL_GPIO_Init+0x228>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_GPIO_Init+0x228>
 8004406:	2300      	movs	r3, #0
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f002 0203 	and.w	r2, r2, #3
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	4093      	lsls	r3, r2
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004418:	4935      	ldr	r1, [pc, #212]	; (80044f0 <HAL_GPIO_Init+0x310>)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	3302      	adds	r3, #2
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004426:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_GPIO_Init+0x334>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800444a:	4a32      	ldr	r2, [pc, #200]	; (8004514 <HAL_GPIO_Init+0x334>)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <HAL_GPIO_Init+0x334>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004474:	4a27      	ldr	r2, [pc, #156]	; (8004514 <HAL_GPIO_Init+0x334>)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <HAL_GPIO_Init+0x334>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_GPIO_Init+0x334>)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_GPIO_Init+0x334>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044c8:	4a12      	ldr	r2, [pc, #72]	; (8004514 <HAL_GPIO_Init+0x334>)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	f67f ae90 	bls.w	80041fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3724      	adds	r7, #36	; 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40013800 	.word	0x40013800
 80044f4:	40020000 	.word	0x40020000
 80044f8:	40020400 	.word	0x40020400
 80044fc:	40020800 	.word	0x40020800
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40021000 	.word	0x40021000
 8004508:	40021400 	.word	0x40021400
 800450c:	40021800 	.word	0x40021800
 8004510:	40021c00 	.word	0x40021c00
 8004514:	40013c00 	.word	0x40013c00

08004518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]
 8004524:	4613      	mov	r3, r2
 8004526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004528:	787b      	ldrb	r3, [r7, #1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004534:	e003      	b.n	800453e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	041a      	lsls	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	619a      	str	r2, [r3, #24]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4013      	ands	r3, r2
 8004562:	041a      	lsls	r2, r3, #16
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43d9      	mvns	r1, r3
 8004568:	887b      	ldrh	r3, [r7, #2]
 800456a:	400b      	ands	r3, r1
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	619a      	str	r2, [r3, #24]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e267      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d075      	beq.n	800468a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800459e:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d00c      	beq.n	80045c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d112      	bne.n	80045dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b6:	4b82      	ldr	r3, [pc, #520]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c2:	d10b      	bne.n	80045dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	4b7e      	ldr	r3, [pc, #504]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d05b      	beq.n	8004688 <HAL_RCC_OscConfig+0x108>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d157      	bne.n	8004688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e242      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d106      	bne.n	80045f4 <HAL_RCC_OscConfig+0x74>
 80045e6:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a75      	ldr	r2, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e01d      	b.n	8004630 <HAL_RCC_OscConfig+0xb0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x98>
 80045fe:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6f      	ldr	r2, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4b6d      	ldr	r3, [pc, #436]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6c      	ldr	r2, [pc, #432]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e00b      	b.n	8004630 <HAL_RCC_OscConfig+0xb0>
 8004618:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a68      	ldr	r2, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800461e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800462a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800462e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fe fb62 	bl	8002d00 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004640:	f7fe fb5e 	bl	8002d00 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e207      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0xc0>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fe fb4e 	bl	8002d00 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004668:	f7fe fb4a 	bl	8002d00 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e1f3      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467a:	4b51      	ldr	r3, [pc, #324]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0xe8>
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d063      	beq.n	800475e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d11c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ae:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_RCC_OscConfig+0x152>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e1c7      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4937      	ldr	r1, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	e03a      	b.n	800475e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f0:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <HAL_RCC_OscConfig+0x244>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fe fb03 	bl	8002d00 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fe faff 	bl	8002d00 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1a8      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4925      	ldr	r1, [pc, #148]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x244>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fe fae2 	bl	8002d00 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004740:	f7fe fade 	bl	8002d00 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e187      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004752:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d036      	beq.n	80047d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x248>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fe fac2 	bl	8002d00 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004780:	f7fe fabe 	bl	8002d00 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e167      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x200>
 800479e:	e01b      	b.n	80047d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x248>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fe faab 	bl	8002d00 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	e00e      	b.n	80047cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fe faa7 	bl	8002d00 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d907      	bls.n	80047cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e150      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470000 	.word	0x42470000
 80047c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ea      	bne.n	80047ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8097 	beq.w	8004914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b81      	ldr	r3, [pc, #516]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b7d      	ldr	r3, [pc, #500]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	4a7c      	ldr	r2, [pc, #496]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	; 0x40
 8004806:	4b7a      	ldr	r3, [pc, #488]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b77      	ldr	r3, [pc, #476]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004822:	4b74      	ldr	r3, [pc, #464]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a73      	ldr	r2, [pc, #460]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7fe fa67 	bl	8002d00 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7fe fa63 	bl	8002d00 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e10c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCC_OscConfig+0x474>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x2ea>
 800485c:	4b64      	ldr	r3, [pc, #400]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a63      	ldr	r2, [pc, #396]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
 8004868:	e01c      	b.n	80048a4 <HAL_RCC_OscConfig+0x324>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b05      	cmp	r3, #5
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x30c>
 8004872:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	4a5e      	ldr	r2, [pc, #376]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	6713      	str	r3, [r2, #112]	; 0x70
 800487e:	4b5c      	ldr	r3, [pc, #368]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a5b      	ldr	r2, [pc, #364]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0x324>
 800488c:	4b58      	ldr	r3, [pc, #352]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	4a57      	ldr	r2, [pc, #348]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	; 0x70
 8004898:	4b55      	ldr	r3, [pc, #340]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	4a54      	ldr	r2, [pc, #336]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800489e:	f023 0304 	bic.w	r3, r3, #4
 80048a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d015      	beq.n	80048d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fe fa28 	bl	8002d00 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fe fa24 	bl	8002d00 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0cb      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	4b49      	ldr	r3, [pc, #292]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ee      	beq.n	80048b4 <HAL_RCC_OscConfig+0x334>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fe fa12 	bl	8002d00 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fe fa0e 	bl	8002d00 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0b5      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ee      	bne.n	80048e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a1 	beq.w	8004a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491e:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b08      	cmp	r3, #8
 8004928:	d05c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d141      	bne.n	80049b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_OscConfig+0x478>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fe f9e2 	bl	8002d00 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fe f9de 	bl	8002d00 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e087      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	491b      	ldr	r1, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x478>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe f9b7 	bl	8002d00 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004996:	f7fe f9b3 	bl	8002d00 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e05c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x416>
 80049b4:	e054      	b.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCC_OscConfig+0x478>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe f9a0 	bl	8002d00 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fe f99c 	bl	8002d00 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e045      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_OscConfig+0x470>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x444>
 80049e2:	e03d      	b.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e038      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40007000 	.word	0x40007000
 80049f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x4ec>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d028      	beq.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d121      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d11a      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d111      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	3b01      	subs	r3, #1
 8004a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800

08004a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0cc      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b68      	ldr	r3, [pc, #416]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d90c      	bls.n	8004aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b65      	ldr	r3, [pc, #404]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0b8      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac4:	4b59      	ldr	r3, [pc, #356]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a58      	ldr	r2, [pc, #352]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004adc:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a52      	ldr	r2, [pc, #328]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b50      	ldr	r3, [pc, #320]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	494d      	ldr	r1, [pc, #308]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d044      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d119      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e07f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e067      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4e:	4b37      	ldr	r3, [pc, #220]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4934      	ldr	r1, [pc, #208]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b60:	f7fe f8ce 	bl	8002d00 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b68:	f7fe f8ca 	bl	8002d00 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e04f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 020c 	and.w	r2, r3, #12
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1eb      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d20c      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e032      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc4:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4916      	ldr	r1, [pc, #88]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	490e      	ldr	r1, [pc, #56]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bf6:	f000 f82d 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	490a      	ldr	r1, [pc, #40]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	5ccb      	ldrb	r3, [r1, r3]
 8004c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0e:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe f82e 	bl	8002c78 <HAL_InitTick>

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023c00 	.word	0x40023c00
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	08007234 	.word	0x08007234
 8004c34:	20000018 	.word	0x20000018
 8004c38:	2000001c 	.word	0x2000001c

08004c3c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_EnableCSS+0x14>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	4247004c 	.word	0x4247004c

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b094      	sub	sp, #80	; 0x50
 8004c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c60:	2300      	movs	r3, #0
 8004c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c64:	2300      	movs	r3, #0
 8004c66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6c:	4b79      	ldr	r3, [pc, #484]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x40>
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	f200 80e1 	bhi.w	8004e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c86:	e0db      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b73      	ldr	r3, [pc, #460]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c8c:	e0db      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c8e:	4b73      	ldr	r3, [pc, #460]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c92:	e0d8      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c94:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004caa:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4621      	mov	r1, r4
 8004ce0:	1a51      	subs	r1, r2, r1
 8004ce2:	6139      	str	r1, [r7, #16]
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	018b      	lsls	r3, r1, #6
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d02:	4651      	mov	r1, sl
 8004d04:	018a      	lsls	r2, r1, #6
 8004d06:	4651      	mov	r1, sl
 8004d08:	ebb2 0801 	subs.w	r8, r2, r1
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d26:	4690      	mov	r8, r2
 8004d28:	4699      	mov	r9, r3
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	eb18 0303 	adds.w	r3, r8, r3
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	462b      	mov	r3, r5
 8004d34:	eb49 0303 	adc.w	r3, r9, r3
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d46:	4629      	mov	r1, r5
 8004d48:	024b      	lsls	r3, r1, #9
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d50:	4621      	mov	r1, r4
 8004d52:	024a      	lsls	r2, r1, #9
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d64:	f7fb fe1e 	bl	80009a4 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d70:	e058      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d72:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	f04f 0000 	mov.w	r0, #0
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	0159      	lsls	r1, r3, #5
 8004d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9e:	0150      	lsls	r0, r2, #5
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4641      	mov	r1, r8
 8004da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	464b      	mov	r3, r9
 8004de8:	eb45 0303 	adc.w	r3, r5, r3
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	028b      	lsls	r3, r1, #10
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e04:	4621      	mov	r1, r4
 8004e06:	028a      	lsls	r2, r1, #10
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	61fa      	str	r2, [r7, #28]
 8004e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e18:	f7fb fdc4 	bl	80009a4 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3750      	adds	r7, #80	; 0x50
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	007a1200 	.word	0x007a1200

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000018 	.word	0x20000018

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	; (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	08007244 	.word	0x08007244

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ea4:	f7ff ffdc 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0b5b      	lsrs	r3, r3, #13
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	08007244 	.word	0x08007244

08004ec8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d104      	bne.n	8004ee2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004ed8:	f000 f80a 	bl	8004ef0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCC_NMI_IRQHandler+0x24>)
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	701a      	strb	r2, [r3, #0]
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	4002380e 	.word	0x4002380e

08004ef0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e041      	b.n	8004f94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fd fbdf 	bl	80026e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 fad9 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e041      	b.n	8005032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f839 	bl	800503a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fa8a 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_TIM_PWM_Start+0x24>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e022      	b.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d109      	bne.n	800508e <HAL_TIM_PWM_Start+0x3e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	bf14      	ite	ne
 8005086:	2301      	movne	r3, #1
 8005088:	2300      	moveq	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	e015      	b.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d109      	bne.n	80050a8 <HAL_TIM_PWM_Start+0x58>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e008      	b.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e07c      	b.n	80051bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Start+0x82>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d0:	e013      	b.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e0:	e00b      	b.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Start+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f0:	e003      	b.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2201      	movs	r2, #1
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fce0 	bl	8005ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2d      	ldr	r2, [pc, #180]	; (80051c4 <HAL_TIM_PWM_Start+0x174>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_TIM_PWM_Start+0xcc>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <HAL_TIM_PWM_Start+0x178>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d101      	bne.n	8005120 <HAL_TIM_PWM_Start+0xd0>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_TIM_PWM_Start+0xd2>
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_TIM_PWM_Start+0x174>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d022      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d01d      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_PWM_Start+0x17c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d018      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <HAL_TIM_PWM_Start+0x180>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_TIM_PWM_Start+0x184>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a16      	ldr	r2, [pc, #88]	; (80051c8 <HAL_TIM_PWM_Start+0x178>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_TIM_PWM_Start+0x188>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIM_PWM_Start+0x136>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a16      	ldr	r2, [pc, #88]	; (80051dc <HAL_TIM_PWM_Start+0x18c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d111      	bne.n	80051aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b06      	cmp	r3, #6
 8005196:	d010      	beq.n	80051ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	e007      	b.n	80051ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40010400 	.word	0x40010400
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40001800 	.word	0x40001800

080051e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e0ae      	b.n	800535c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	f200 809f 	bhi.w	800534c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005249 	.word	0x08005249
 8005218:	0800534d 	.word	0x0800534d
 800521c:	0800534d 	.word	0x0800534d
 8005220:	0800534d 	.word	0x0800534d
 8005224:	08005289 	.word	0x08005289
 8005228:	0800534d 	.word	0x0800534d
 800522c:	0800534d 	.word	0x0800534d
 8005230:	0800534d 	.word	0x0800534d
 8005234:	080052cb 	.word	0x080052cb
 8005238:	0800534d 	.word	0x0800534d
 800523c:	0800534d 	.word	0x0800534d
 8005240:	0800534d 	.word	0x0800534d
 8005244:	0800530b 	.word	0x0800530b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f9f0 	bl	8005634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0204 	bic.w	r2, r2, #4
 8005272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	619a      	str	r2, [r3, #24]
      break;
 8005286:	e064      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fa40 	bl	8005714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6999      	ldr	r1, [r3, #24]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	619a      	str	r2, [r3, #24]
      break;
 80052c8:	e043      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fa95 	bl	8005800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0208 	orr.w	r2, r2, #8
 80052e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0204 	bic.w	r2, r2, #4
 80052f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	61da      	str	r2, [r3, #28]
      break;
 8005308:	e023      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fae9 	bl	80058e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69d9      	ldr	r1, [r3, #28]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	021a      	lsls	r2, r3, #8
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	61da      	str	r2, [r3, #28]
      break;
 800534a:	e002      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIM_ConfigClockSource+0x1c>
 800537c:	2302      	movs	r3, #2
 800537e:	e0b4      	b.n	80054ea <HAL_TIM_ConfigClockSource+0x186>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800539e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b8:	d03e      	beq.n	8005438 <HAL_TIM_ConfigClockSource+0xd4>
 80053ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053be:	f200 8087 	bhi.w	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	f000 8086 	beq.w	80054d6 <HAL_TIM_ConfigClockSource+0x172>
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ce:	d87f      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b70      	cmp	r3, #112	; 0x70
 80053d2:	d01a      	beq.n	800540a <HAL_TIM_ConfigClockSource+0xa6>
 80053d4:	2b70      	cmp	r3, #112	; 0x70
 80053d6:	d87b      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b60      	cmp	r3, #96	; 0x60
 80053da:	d050      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x11a>
 80053dc:	2b60      	cmp	r3, #96	; 0x60
 80053de:	d877      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b50      	cmp	r3, #80	; 0x50
 80053e2:	d03c      	beq.n	800545e <HAL_TIM_ConfigClockSource+0xfa>
 80053e4:	2b50      	cmp	r3, #80	; 0x50
 80053e6:	d873      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d058      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x13a>
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d86f      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d064      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 80053f4:	2b30      	cmp	r3, #48	; 0x30
 80053f6:	d86b      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d060      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d867      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d05c      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 8005404:	2b10      	cmp	r3, #16
 8005406:	d05a      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x15a>
 8005408:	e062      	b.n	80054d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6899      	ldr	r1, [r3, #8]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f000 fb35 	bl	8005a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800542c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	609a      	str	r2, [r3, #8]
      break;
 8005436:	e04f      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6899      	ldr	r1, [r3, #8]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f000 fb1e 	bl	8005a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545a:	609a      	str	r2, [r3, #8]
      break;
 800545c:	e03c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	461a      	mov	r2, r3
 800546c:	f000 fa92 	bl	8005994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2150      	movs	r1, #80	; 0x50
 8005476:	4618      	mov	r0, r3
 8005478:	f000 faeb 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800547c:	e02c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	461a      	mov	r2, r3
 800548c:	f000 fab1 	bl	80059f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2160      	movs	r1, #96	; 0x60
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fadb 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800549c:	e01c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f000 fa72 	bl	8005994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 facb 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 80054bc:	e00c      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f000 fac2 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 80054ce:	e003      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	e000      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a40      	ldr	r2, [pc, #256]	; (8005608 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3d      	ldr	r2, [pc, #244]	; (800560c <TIM_Base_SetConfig+0x118>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <TIM_Base_SetConfig+0x11c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3b      	ldr	r2, [pc, #236]	; (8005614 <TIM_Base_SetConfig+0x120>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3a      	ldr	r2, [pc, #232]	; (8005618 <TIM_Base_SetConfig+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <TIM_Base_SetConfig+0x114>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02b      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d027      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2c      	ldr	r2, [pc, #176]	; (800560c <TIM_Base_SetConfig+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d023      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2b      	ldr	r2, [pc, #172]	; (8005610 <TIM_Base_SetConfig+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <TIM_Base_SetConfig+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01b      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <TIM_Base_SetConfig+0x124>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d017      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a28      	ldr	r2, [pc, #160]	; (800561c <TIM_Base_SetConfig+0x128>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a27      	ldr	r2, [pc, #156]	; (8005620 <TIM_Base_SetConfig+0x12c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <TIM_Base_SetConfig+0x130>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <TIM_Base_SetConfig+0x134>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a24      	ldr	r2, [pc, #144]	; (800562c <TIM_Base_SetConfig+0x138>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a23      	ldr	r2, [pc, #140]	; (8005630 <TIM_Base_SetConfig+0x13c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <TIM_Base_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0xf8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d103      	bne.n	80055f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	615a      	str	r2, [r3, #20]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800
 8005628:	40001800 	.word	0x40001800
 800562c:	40001c00 	.word	0x40001c00
 8005630:	40002000 	.word	0x40002000

08005634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0302 	bic.w	r3, r3, #2
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a20      	ldr	r2, [pc, #128]	; (800570c <TIM_OC1_SetConfig+0xd8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC1_SetConfig+0x64>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1f      	ldr	r2, [pc, #124]	; (8005710 <TIM_OC1_SetConfig+0xdc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10c      	bne.n	80056b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0308 	bic.w	r3, r3, #8
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0304 	bic.w	r3, r3, #4
 80056b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a15      	ldr	r2, [pc, #84]	; (800570c <TIM_OC1_SetConfig+0xd8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC1_SetConfig+0x8e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a14      	ldr	r2, [pc, #80]	; (8005710 <TIM_OC1_SetConfig+0xdc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d111      	bne.n	80056e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400

08005714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0210 	bic.w	r2, r3, #16
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0320 	bic.w	r3, r3, #32
 800575e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <TIM_OC2_SetConfig+0xe4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC2_SetConfig+0x68>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a21      	ldr	r2, [pc, #132]	; (80057fc <TIM_OC2_SetConfig+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10d      	bne.n	8005798 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <TIM_OC2_SetConfig+0xe4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC2_SetConfig+0x94>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a16      	ldr	r2, [pc, #88]	; (80057fc <TIM_OC2_SetConfig+0xe8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d113      	bne.n	80057d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <TIM_OC3_SetConfig+0xe0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_OC3_SetConfig+0x66>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <TIM_OC3_SetConfig+0xe4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10d      	bne.n	8005882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800586c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a16      	ldr	r2, [pc, #88]	; (80058e0 <TIM_OC3_SetConfig+0xe0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC3_SetConfig+0x92>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <TIM_OC3_SetConfig+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d113      	bne.n	80058ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40010400 	.word	0x40010400

080058e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a12      	ldr	r2, [pc, #72]	; (800598c <TIM_OC4_SetConfig+0xa4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_OC4_SetConfig+0x68>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a11      	ldr	r2, [pc, #68]	; (8005990 <TIM_OC4_SetConfig+0xa8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d109      	bne.n	8005964 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	019b      	lsls	r3, r3, #6
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400

08005994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0201 	bic.w	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f023 030a 	bic.w	r3, r3, #10
 80059d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 0210 	bic.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f043 0307 	orr.w	r3, r3, #7
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2201      	movs	r2, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e05a      	b.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b78:	d01d      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40001800 	.word	0x40001800

08005c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e03f      	b.n	8005c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc ff16 	bl	8002a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	; 0x24
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fff5 	bl	8006c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08c      	sub	sp, #48	; 0x30
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d165      	bne.n	8005d8e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_Transmit_DMA+0x26>
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e05e      	b.n	8005d90 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UART_Transmit_DMA+0x38>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e057      	b.n	8005d90 <HAL_UART_Transmit_DMA+0xe8>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2221      	movs	r2, #33	; 0x21
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <HAL_UART_Transmit_DMA+0xf0>)
 8005d0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <HAL_UART_Transmit_DMA+0xf4>)
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <HAL_UART_Transmit_DMA+0xf8>)
 8005d1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	2200      	movs	r2, #0
 8005d26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	6819      	ldr	r1, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f7fd fefa 	bl	8003b38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d4c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	617b      	str	r3, [r7, #20]
   return(result);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d76:	627a      	str	r2, [r7, #36]	; 0x24
 8005d78:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6a39      	ldr	r1, [r7, #32]
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3730      	adds	r7, #48	; 0x30
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	080064d9 	.word	0x080064d9
 8005d9c:	08006573 	.word	0x08006573
 8005da0:	080066eb 	.word	0x080066eb

08005da4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b090      	sub	sp, #64	; 0x40
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b21      	cmp	r3, #33	; 0x21
 8005dd0:	d128      	bne.n	8005e24 <HAL_UART_DMAStop+0x80>
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d025      	beq.n	8005e24 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3314      	adds	r3, #20
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	623b      	str	r3, [r7, #32]
   return(result);
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005df8:	633a      	str	r2, [r7, #48]	; 0x30
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fd fee5 	bl	8003be8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fd4c 	bl	80068bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	bf0c      	ite	eq
 8005e32:	2301      	moveq	r3, #1
 8005e34:	2300      	movne	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	d128      	bne.n	8005e98 <HAL_UART_DMAStop+0xf4>
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d025      	beq.n	8005e98 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e6c:	61fa      	str	r2, [r7, #28]
 8005e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fd feab 	bl	8003be8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fd3a 	bl	800690c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3740      	adds	r7, #64	; 0x40
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b08c      	sub	sp, #48	; 0x30
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d152      	bne.n	8005f62 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e04b      	b.n	8005f64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e044      	b.n	8005f64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	461a      	mov	r2, r3
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fc46 	bl	8006780 <UART_Start_Receive_DMA>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d12c      	bne.n	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d125      	bne.n	8005f56 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f043 0310 	orr.w	r3, r3, #16
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	627a      	str	r2, [r7, #36]	; 0x24
 8005f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6a39      	ldr	r1, [r7, #32]
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005f54:	e002      	b.n	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f60:	e000      	b.n	8005f64 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3730      	adds	r7, #48	; 0x30
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b0ba      	sub	sp, #232	; 0xe8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x66>
 8005fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fd7d 	bl	8006aca <UART_Receive_IT>
      return;
 8005fd0:	e256      	b.n	8006480 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80de 	beq.w	8006198 <HAL_UART_IRQHandler+0x22c>
 8005fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80d1 	beq.w	8006198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_UART_IRQHandler+0xae>
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0201 	orr.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_UART_IRQHandler+0xd2>
 8006026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f043 0202 	orr.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_UART_IRQHandler+0xf6>
 800604a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d011      	beq.n	8006092 <HAL_UART_IRQHandler+0x126>
 800606e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d105      	bne.n	8006086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800607a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 81ed 	beq.w	8006476 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800609c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_UART_IRQHandler+0x14e>
 80060a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fd08 	bl	8006aca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d103      	bne.n	80060e6 <HAL_UART_IRQHandler+0x17a>
 80060de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d04f      	beq.n	8006186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fc10 	bl	800690c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d141      	bne.n	800617e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800612a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800613e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1d9      	bne.n	80060fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d013      	beq.n	8006176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	4a7d      	ldr	r2, [pc, #500]	; (8006348 <HAL_UART_IRQHandler+0x3dc>)
 8006154:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	4618      	mov	r0, r3
 800615c:	f7fd fdb4 	bl	8003cc8 <HAL_DMA_Abort_IT>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006170:	4610      	mov	r0, r2
 8006172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	e00e      	b.n	8006194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fa fd92 	bl	8000ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e00a      	b.n	8006194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fa fd8e 	bl	8000ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	e006      	b.n	8006194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fa fd8a 	bl	8000ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006192:	e170      	b.n	8006476 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006194:	bf00      	nop
    return;
 8006196:	e16e      	b.n	8006476 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	2b01      	cmp	r3, #1
 800619e:	f040 814a 	bne.w	8006436 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8143 	beq.w	8006436 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 813c 	beq.w	8006436 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	f040 80b4 	bne.w	800634c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8140 	beq.w	800647a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006202:	429a      	cmp	r2, r3
 8006204:	f080 8139 	bcs.w	800647a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800620e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	f000 8088 	beq.w	800632e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800624a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800624e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1d9      	bne.n	800621e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800627a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800628e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e1      	bne.n	800626a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3314      	adds	r3, #20
 80062c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e3      	bne.n	80062a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fe:	f023 0310 	bic.w	r3, r3, #16
 8006302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	330c      	adds	r3, #12
 800630c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006310:	65ba      	str	r2, [r7, #88]	; 0x58
 8006312:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800631e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e3      	bne.n	80062ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	4618      	mov	r0, r3
 800632a:	f7fd fc5d 	bl	8003be8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006336:	b29b      	uxth	r3, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	b29b      	uxth	r3, r3
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fa fd3e 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006344:	e099      	b.n	800647a <HAL_UART_IRQHandler+0x50e>
 8006346:	bf00      	nop
 8006348:	080069d3 	.word	0x080069d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006354:	b29b      	uxth	r3, r3
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 808b 	beq.w	800647e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8086 	beq.w	800647e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006396:	647a      	str	r2, [r7, #68]	; 0x44
 8006398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800639c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e3      	bne.n	8006372 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063ce:	633a      	str	r2, [r7, #48]	; 0x30
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e3      	bne.n	80063aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0310 	bic.w	r3, r3, #16
 8006406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	330c      	adds	r3, #12
 8006410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	617b      	str	r3, [r7, #20]
   return(result);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e3      	bne.n	80063f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fa fcc6 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006434:	e023      	b.n	800647e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_UART_IRQHandler+0x4ea>
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fad3 	bl	80069fa <UART_Transmit_IT>
    return;
 8006454:	e014      	b.n	8006480 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <HAL_UART_IRQHandler+0x514>
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb13 	bl	8006a9a <UART_EndTransmit_IT>
    return;
 8006474:	e004      	b.n	8006480 <HAL_UART_IRQHandler+0x514>
    return;
 8006476:	bf00      	nop
 8006478:	e002      	b.n	8006480 <HAL_UART_IRQHandler+0x514>
      return;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <HAL_UART_IRQHandler+0x514>
      return;
 800647e:	bf00      	nop
  }
}
 8006480:	37e8      	adds	r7, #232	; 0xe8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop

08006488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b090      	sub	sp, #64	; 0x40
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d137      	bne.n	8006564 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80064f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f6:	2200      	movs	r2, #0
 80064f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	623b      	str	r3, [r7, #32]
   return(result);
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006510:	63bb      	str	r3, [r7, #56]	; 0x38
 8006512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3314      	adds	r3, #20
 8006518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651a:	633a      	str	r2, [r7, #48]	; 0x30
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e5      	bne.n	80064fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	60fb      	str	r3, [r7, #12]
   return(result);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
 8006546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654e:	61fa      	str	r2, [r7, #28]
 8006550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	69b9      	ldr	r1, [r7, #24]
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	617b      	str	r3, [r7, #20]
   return(result);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e5      	bne.n	800652e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006562:	e002      	b.n	800656a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006564:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006566:	f7ff ff8f 	bl	8006488 <HAL_UART_TxCpltCallback>
}
 800656a:	bf00      	nop
 800656c:	3740      	adds	r7, #64	; 0x40
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f7ff ff8b 	bl	800649c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b09c      	sub	sp, #112	; 0x70
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d172      	bne.n	8006690 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ac:	2200      	movs	r2, #0
 80065ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80065d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	667b      	str	r3, [r7, #100]	; 0x64
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006604:	647a      	str	r2, [r7, #68]	; 0x44
 8006606:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800660a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3314      	adds	r3, #20
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	623b      	str	r3, [r7, #32]
   return(result);
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662e:	663b      	str	r3, [r7, #96]	; 0x60
 8006630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3314      	adds	r3, #20
 8006636:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006638:	633a      	str	r2, [r7, #48]	; 0x30
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800663e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	2b01      	cmp	r3, #1
 800665a:	d119      	bne.n	8006690 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	60fb      	str	r3, [r7, #12]
   return(result);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0310 	bic.w	r3, r3, #16
 8006672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800667c:	61fa      	str	r2, [r7, #28]
 800667e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	617b      	str	r3, [r7, #20]
   return(result);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e5      	bne.n	800665c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800669c:	4619      	mov	r1, r3
 800669e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066a0:	f7fa fb8e 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066a4:	e002      	b.n	80066ac <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066a8:	f7ff ff02 	bl	80064b0 <HAL_UART_RxCpltCallback>
}
 80066ac:	bf00      	nop
 80066ae:	3770      	adds	r7, #112	; 0x70
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d108      	bne.n	80066dc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4619      	mov	r1, r3
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7fa fb73 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066da:	e002      	b.n	80066e2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fef1 	bl	80064c4 <HAL_UART_RxHalfCpltCallback>
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b21      	cmp	r3, #33	; 0x21
 800671c:	d108      	bne.n	8006730 <UART_DMAError+0x46>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800672a:	68b8      	ldr	r0, [r7, #8]
 800672c:	f000 f8c6 	bl	80068bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b22      	cmp	r3, #34	; 0x22
 8006750:	d108      	bne.n	8006764 <UART_DMAError+0x7a>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800675e:	68b8      	ldr	r0, [r7, #8]
 8006760:	f000 f8d4 	bl	800690c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	f043 0210 	orr.w	r2, r3, #16
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006770:	68b8      	ldr	r0, [r7, #8]
 8006772:	f7fa fa95 	bl	8000ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b098      	sub	sp, #96	; 0x60
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2222      	movs	r2, #34	; 0x22
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	4a40      	ldr	r2, [pc, #256]	; (80068b0 <UART_Start_Receive_DMA+0x130>)
 80067ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <UART_Start_Receive_DMA+0x134>)
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	4a3e      	ldr	r2, [pc, #248]	; (80068b8 <UART_Start_Receive_DMA+0x138>)
 80067be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	2200      	movs	r2, #0
 80067c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	f7fd f9aa 	bl	8003b38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d019      	beq.n	800683e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006820:	65bb      	str	r3, [r7, #88]	; 0x58
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800682a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800682c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3314      	adds	r3, #20
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	657b      	str	r3, [r7, #84]	; 0x54
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3314      	adds	r3, #20
 800685c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800685e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006860:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	617b      	str	r3, [r7, #20]
   return(result);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006892:	627a      	str	r2, [r7, #36]	; 0x24
 8006894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6a39      	ldr	r1, [r7, #32]
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3760      	adds	r7, #96	; 0x60
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	0800658f 	.word	0x0800658f
 80068b4:	080066b5 	.word	0x080066b5
 80068b8:	080066eb 	.word	0x080066eb

080068bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b089      	sub	sp, #36	; 0x24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	61ba      	str	r2, [r7, #24]
 80068e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006900:	bf00      	nop
 8006902:	3724      	adds	r7, #36	; 0x24
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b095      	sub	sp, #84	; 0x54
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006934:	643a      	str	r2, [r7, #64]	; 0x40
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800693a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	61fb      	str	r3, [r7, #28]
   return(result);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e5      	bne.n	8006948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60bb      	str	r3, [r7, #8]
   return(result);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	647b      	str	r3, [r7, #68]	; 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069c6:	bf00      	nop
 80069c8:	3754      	adds	r7, #84	; 0x54
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7fa f957 	bl	8000ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b21      	cmp	r3, #33	; 0x21
 8006a0c:	d13e      	bne.n	8006a8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a16:	d114      	bne.n	8006a42 <UART_Transmit_IT+0x48>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d110      	bne.n	8006a42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]
 8006a40:	e008      	b.n	8006a54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6211      	str	r1, [r2, #32]
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4619      	mov	r1, r3
 8006a62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fce4 	bl	8006488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	; 0x30
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b22      	cmp	r3, #34	; 0x22
 8006adc:	f040 80ab 	bne.w	8006c36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae8:	d117      	bne.n	8006b1a <UART_Receive_IT+0x50>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d113      	bne.n	8006b1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
 8006b18:	e026      	b.n	8006b68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d007      	beq.n	8006b3e <UART_Receive_IT+0x74>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <UART_Receive_IT+0x82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e008      	b.n	8006b5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4619      	mov	r1, r3
 8006b76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d15a      	bne.n	8006c32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0220 	bic.w	r2, r2, #32
 8006b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d135      	bne.n	8006c28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	623a      	str	r2, [r7, #32]
 8006be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	69f9      	ldr	r1, [r7, #28]
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d10a      	bne.n	8006c1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fa f8cd 	bl	8000dc0 <HAL_UARTEx_RxEventCallback>
 8006c26:	e002      	b.n	8006c2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fc41 	bl	80064b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e002      	b.n	8006c38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e000      	b.n	8006c38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3730      	adds	r7, #48	; 0x30
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c44:	b0c0      	sub	sp, #256	; 0x100
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5c:	68d9      	ldr	r1, [r3, #12]
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	ea40 0301 	orr.w	r3, r0, r1
 8006c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c98:	f021 010c 	bic.w	r1, r1, #12
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	6999      	ldr	r1, [r3, #24]
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	ea40 0301 	orr.w	r3, r0, r1
 8006cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b8f      	ldr	r3, [pc, #572]	; (8006f0c <UART_SetConfig+0x2cc>)
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d005      	beq.n	8006ce0 <UART_SetConfig+0xa0>
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <UART_SetConfig+0x2d0>)
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d104      	bne.n	8006cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fe f8de 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ce8:	e003      	b.n	8006cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cea:	f7fe f8c5 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8006cee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfc:	f040 810c 	bne.w	8006f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d12:	4622      	mov	r2, r4
 8006d14:	462b      	mov	r3, r5
 8006d16:	1891      	adds	r1, r2, r2
 8006d18:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d1a:	415b      	adcs	r3, r3
 8006d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d22:	4621      	mov	r1, r4
 8006d24:	eb12 0801 	adds.w	r8, r2, r1
 8006d28:	4629      	mov	r1, r5
 8006d2a:	eb43 0901 	adc.w	r9, r3, r1
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d42:	4690      	mov	r8, r2
 8006d44:	4699      	mov	r9, r3
 8006d46:	4623      	mov	r3, r4
 8006d48:	eb18 0303 	adds.w	r3, r8, r3
 8006d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d50:	462b      	mov	r3, r5
 8006d52:	eb49 0303 	adc.w	r3, r9, r3
 8006d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d6e:	460b      	mov	r3, r1
 8006d70:	18db      	adds	r3, r3, r3
 8006d72:	653b      	str	r3, [r7, #80]	; 0x50
 8006d74:	4613      	mov	r3, r2
 8006d76:	eb42 0303 	adc.w	r3, r2, r3
 8006d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d84:	f7f9 fe0e 	bl	80009a4 <__aeabi_uldivmod>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4b61      	ldr	r3, [pc, #388]	; (8006f14 <UART_SetConfig+0x2d4>)
 8006d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	011c      	lsls	r4, r3, #4
 8006d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006da0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	1891      	adds	r1, r2, r2
 8006dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8006db0:	415b      	adcs	r3, r3
 8006db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006db8:	4641      	mov	r1, r8
 8006dba:	eb12 0a01 	adds.w	sl, r2, r1
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dd8:	4692      	mov	sl, r2
 8006dda:	469b      	mov	fp, r3
 8006ddc:	4643      	mov	r3, r8
 8006dde:	eb1a 0303 	adds.w	r3, sl, r3
 8006de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006de6:	464b      	mov	r3, r9
 8006de8:	eb4b 0303 	adc.w	r3, fp, r3
 8006dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e04:	460b      	mov	r3, r1
 8006e06:	18db      	adds	r3, r3, r3
 8006e08:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	eb42 0303 	adc.w	r3, r2, r3
 8006e10:	647b      	str	r3, [r7, #68]	; 0x44
 8006e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e1a:	f7f9 fdc3 	bl	80009a4 <__aeabi_uldivmod>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4611      	mov	r1, r2
 8006e24:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <UART_SetConfig+0x2d4>)
 8006e26:	fba3 2301 	umull	r2, r3, r3, r1
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	2264      	movs	r2, #100	; 0x64
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	1acb      	subs	r3, r1, r3
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <UART_SetConfig+0x2d4>)
 8006e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e48:	441c      	add	r4, r3
 8006e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e64:	415b      	adcs	r3, r3
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	1851      	adds	r1, r2, r1
 8006e70:	6339      	str	r1, [r7, #48]	; 0x30
 8006e72:	4649      	mov	r1, r9
 8006e74:	414b      	adcs	r3, r1
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e84:	4659      	mov	r1, fp
 8006e86:	00cb      	lsls	r3, r1, #3
 8006e88:	4651      	mov	r1, sl
 8006e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e8e:	4651      	mov	r1, sl
 8006e90:	00ca      	lsls	r2, r1, #3
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	4642      	mov	r2, r8
 8006e9a:	189b      	adds	r3, r3, r2
 8006e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	460a      	mov	r2, r1
 8006ea4:	eb42 0303 	adc.w	r3, r2, r3
 8006ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	18db      	adds	r3, r3, r3
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	eb42 0303 	adc.w	r3, r2, r3
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ed6:	f7f9 fd65 	bl	80009a4 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <UART_SetConfig+0x2d4>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <UART_SetConfig+0x2d4>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	f003 0207 	and.w	r2, r3, #7
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4422      	add	r2, r4
 8006f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f08:	e106      	b.n	8007118 <UART_SetConfig+0x4d8>
 8006f0a:	bf00      	nop
 8006f0c:	40011000 	.word	0x40011000
 8006f10:	40011400 	.word	0x40011400
 8006f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f2a:	4642      	mov	r2, r8
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	1891      	adds	r1, r2, r2
 8006f30:	6239      	str	r1, [r7, #32]
 8006f32:	415b      	adcs	r3, r3
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
 8006f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	1854      	adds	r4, r2, r1
 8006f3e:	4649      	mov	r1, r9
 8006f40:	eb43 0501 	adc.w	r5, r3, r1
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	00eb      	lsls	r3, r5, #3
 8006f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f52:	00e2      	lsls	r2, r4, #3
 8006f54:	4614      	mov	r4, r2
 8006f56:	461d      	mov	r5, r3
 8006f58:	4643      	mov	r3, r8
 8006f5a:	18e3      	adds	r3, r4, r3
 8006f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f60:	464b      	mov	r3, r9
 8006f62:	eb45 0303 	adc.w	r3, r5, r3
 8006f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f86:	4629      	mov	r1, r5
 8006f88:	008b      	lsls	r3, r1, #2
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f90:	4621      	mov	r1, r4
 8006f92:	008a      	lsls	r2, r1, #2
 8006f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f98:	f7f9 fd04 	bl	80009a4 <__aeabi_uldivmod>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4b60      	ldr	r3, [pc, #384]	; (8007124 <UART_SetConfig+0x4e4>)
 8006fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	011c      	lsls	r4, r3, #4
 8006faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	1891      	adds	r1, r2, r2
 8006fc2:	61b9      	str	r1, [r7, #24]
 8006fc4:	415b      	adcs	r3, r3
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fcc:	4641      	mov	r1, r8
 8006fce:	1851      	adds	r1, r2, r1
 8006fd0:	6139      	str	r1, [r7, #16]
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	414b      	adcs	r3, r1
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	00cb      	lsls	r3, r1, #3
 8006fe8:	4651      	mov	r1, sl
 8006fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fee:	4651      	mov	r1, sl
 8006ff0:	00ca      	lsls	r2, r1, #3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007000:	464b      	mov	r3, r9
 8007002:	460a      	mov	r2, r1
 8007004:	eb42 0303 	adc.w	r3, r2, r3
 8007008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	67bb      	str	r3, [r7, #120]	; 0x78
 8007016:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007024:	4649      	mov	r1, r9
 8007026:	008b      	lsls	r3, r1, #2
 8007028:	4641      	mov	r1, r8
 800702a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800702e:	4641      	mov	r1, r8
 8007030:	008a      	lsls	r2, r1, #2
 8007032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007036:	f7f9 fcb5 	bl	80009a4 <__aeabi_uldivmod>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4611      	mov	r1, r2
 8007040:	4b38      	ldr	r3, [pc, #224]	; (8007124 <UART_SetConfig+0x4e4>)
 8007042:	fba3 2301 	umull	r2, r3, r3, r1
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	2264      	movs	r2, #100	; 0x64
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	1acb      	subs	r3, r1, r3
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	3332      	adds	r3, #50	; 0x32
 8007054:	4a33      	ldr	r2, [pc, #204]	; (8007124 <UART_SetConfig+0x4e4>)
 8007056:	fba2 2303 	umull	r2, r3, r2, r3
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007060:	441c      	add	r4, r3
 8007062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007066:	2200      	movs	r2, #0
 8007068:	673b      	str	r3, [r7, #112]	; 0x70
 800706a:	677a      	str	r2, [r7, #116]	; 0x74
 800706c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	1891      	adds	r1, r2, r2
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	415b      	adcs	r3, r3
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007080:	4641      	mov	r1, r8
 8007082:	1851      	adds	r1, r2, r1
 8007084:	6039      	str	r1, [r7, #0]
 8007086:	4649      	mov	r1, r9
 8007088:	414b      	adcs	r3, r1
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007098:	4659      	mov	r1, fp
 800709a:	00cb      	lsls	r3, r1, #3
 800709c:	4651      	mov	r1, sl
 800709e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070a2:	4651      	mov	r1, sl
 80070a4:	00ca      	lsls	r2, r1, #3
 80070a6:	4610      	mov	r0, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	4642      	mov	r2, r8
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b2:	464b      	mov	r3, r9
 80070b4:	460a      	mov	r2, r1
 80070b6:	eb42 0303 	adc.w	r3, r2, r3
 80070ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	663b      	str	r3, [r7, #96]	; 0x60
 80070c6:	667a      	str	r2, [r7, #100]	; 0x64
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070d4:	4649      	mov	r1, r9
 80070d6:	008b      	lsls	r3, r1, #2
 80070d8:	4641      	mov	r1, r8
 80070da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070de:	4641      	mov	r1, r8
 80070e0:	008a      	lsls	r2, r1, #2
 80070e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070e6:	f7f9 fc5d 	bl	80009a4 <__aeabi_uldivmod>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <UART_SetConfig+0x4e4>)
 80070f0:	fba3 1302 	umull	r1, r3, r3, r2
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	2164      	movs	r1, #100	; 0x64
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	3332      	adds	r3, #50	; 0x32
 8007102:	4a08      	ldr	r2, [pc, #32]	; (8007124 <UART_SetConfig+0x4e4>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f003 020f 	and.w	r2, r3, #15
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4422      	add	r2, r4
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007124:	51eb851f 	.word	0x51eb851f

08007128 <memset>:
 8007128:	4402      	add	r2, r0
 800712a:	4603      	mov	r3, r0
 800712c:	4293      	cmp	r3, r2
 800712e:	d100      	bne.n	8007132 <memset+0xa>
 8007130:	4770      	bx	lr
 8007132:	f803 1b01 	strb.w	r1, [r3], #1
 8007136:	e7f9      	b.n	800712c <memset+0x4>

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4d0d      	ldr	r5, [pc, #52]	; (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	; (8007174 <__libc_init_array+0x3c>)
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2600      	movs	r6, #0
 8007144:	42a6      	cmp	r6, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4d0b      	ldr	r5, [pc, #44]	; (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	; (800717c <__libc_init_array+0x44>)
 800714c:	f000 f866 	bl	800721c <_init>
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2600      	movs	r6, #0
 8007156:	42a6      	cmp	r6, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007160:	4798      	blx	r3
 8007162:	3601      	adds	r6, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f855 3b04 	ldr.w	r3, [r5], #4
 800716a:	4798      	blx	r3
 800716c:	3601      	adds	r6, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	08007264 	.word	0x08007264
 8007174:	08007264 	.word	0x08007264
 8007178:	08007264 	.word	0x08007264
 800717c:	08007268 	.word	0x08007268

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	4291      	cmp	r1, r2
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <lrintf>:
 800719c:	ee10 3a10 	vmov	r3, s0
 80071a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80071a4:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80071a8:	281e      	cmp	r0, #30
 80071aa:	b082      	sub	sp, #8
 80071ac:	dc2f      	bgt.n	800720e <lrintf+0x72>
 80071ae:	1c41      	adds	r1, r0, #1
 80071b0:	da02      	bge.n	80071b8 <lrintf+0x1c>
 80071b2:	2000      	movs	r0, #0
 80071b4:	b002      	add	sp, #8
 80071b6:	4770      	bx	lr
 80071b8:	2816      	cmp	r0, #22
 80071ba:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80071be:	dd0a      	ble.n	80071d6 <lrintf+0x3a>
 80071c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80071c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071c8:	3a96      	subs	r2, #150	; 0x96
 80071ca:	fa03 f002 	lsl.w	r0, r3, r2
 80071ce:	2900      	cmp	r1, #0
 80071d0:	d0f0      	beq.n	80071b4 <lrintf+0x18>
 80071d2:	4240      	negs	r0, r0
 80071d4:	e7ee      	b.n	80071b4 <lrintf+0x18>
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <lrintf+0x7c>)
 80071d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80071dc:	ed93 7a00 	vldr	s14, [r3]
 80071e0:	ee37 0a00 	vadd.f32	s0, s14, s0
 80071e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80071e8:	eddd 7a01 	vldr	s15, [sp, #4]
 80071ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071f0:	ee17 3a90 	vmov	r3, s15
 80071f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80071f8:	d0db      	beq.n	80071b2 <lrintf+0x16>
 80071fa:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80071fe:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007202:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007206:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800720a:	40d8      	lsrs	r0, r3
 800720c:	e7df      	b.n	80071ce <lrintf+0x32>
 800720e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007212:	ee17 0a90 	vmov	r0, s15
 8007216:	e7cd      	b.n	80071b4 <lrintf+0x18>
 8007218:	08007254 	.word	0x08007254

0800721c <_init>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr

08007228 <_fini>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr
