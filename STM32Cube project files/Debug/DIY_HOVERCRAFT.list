
DIY_HOVERCRAFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005748  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000490  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f336  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000269f  00000000  00000000  0002f3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a92  00000000  00000000  000327f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd63  00000000  00000000  00033282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011880  00000000  00000000  00052fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0af6  00000000  00000000  00064865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003814  00000000  00000000  0012535c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00128b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058b8 	.word	0x080058b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080058b8 	.word	0x080058b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxHalfCpltCallback>:

int last_parsed_packet_location = 0;


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	72fb      	strb	r3, [r7, #11]

		// check if its a valid packet
		for(int i = 0 ; i < sizeof(rx_buffer)/2 ; i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e04a      	b.n	800056c <HAL_UART_RxHalfCpltCallback+0xa8>
		{
			if (rx_buffer[i] == CRSF_ADDRESS_FLIGHT_CONTROLLER)
 80004d6:	4a29      	ldr	r2, [pc, #164]	; (800057c <HAL_UART_RxHalfCpltCallback+0xb8>)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2bc8      	cmp	r3, #200	; 0xc8
 80004e0:	d141      	bne.n	8000566 <HAL_UART_RxHalfCpltCallback+0xa2>
			{
				length = rx_buffer[i+1];
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a25      	ldr	r2, [pc, #148]	; (800057c <HAL_UART_RxHalfCpltCallback+0xb8>)
 80004e8:	5cd3      	ldrb	r3, [r2, r3]
 80004ea:	72fb      	strb	r3, [r7, #11]
				// check length
				//then get all packets and check CRC if pass then packet valid
				if((length+i+2 > (sizeof(rx_buffer)/2)-1) || (i+1 > (sizeof(rx_buffer)/2)-1))
 80004ec:	7afa      	ldrb	r2, [r7, #11]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4413      	add	r3, r2
 80004f2:	3302      	adds	r3, #2
 80004f4:	2b3f      	cmp	r3, #63	; 0x3f
 80004f6:	d835      	bhi.n	8000564 <HAL_UART_RxHalfCpltCallback+0xa0>
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3301      	adds	r3, #1
 80004fc:	2b3f      	cmp	r3, #63	; 0x3f
 80004fe:	d831      	bhi.n	8000564 <HAL_UART_RxHalfCpltCallback+0xa0>
				{
					// handel cases with non full packets
					// can occur when the whole packet crc fails
					continue;
				}
				if(calculateCRC(rx_buffer ,i+2,length) == 0) // start crc calculation from type byte
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3302      	adds	r3, #2
 8000504:	7afa      	ldrb	r2, [r7, #11]
 8000506:	4619      	mov	r1, r3
 8000508:	481c      	ldr	r0, [pc, #112]	; (800057c <HAL_UART_RxHalfCpltCallback+0xb8>)
 800050a:	f000 f8bd 	bl	8000688 <calculateCRC>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d128      	bne.n	8000566 <HAL_UART_RxHalfCpltCallback+0xa2>
				{
					// valid packet
					last_parsed_packet_location = i+2+length;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	1c9a      	adds	r2, r3, #2
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	4413      	add	r3, r2
 800051c:	4a18      	ldr	r2, [pc, #96]	; (8000580 <HAL_UART_RxHalfCpltCallback+0xbc>)
 800051e:	6013      	str	r3, [r2, #0]
				    last_packet_received_time = TIM4->CNT; // non hal way of doing it
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_UART_RxHalfCpltCallback+0xc0>)
 8000522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000524:	b29a      	uxth	r2, r3
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <HAL_UART_RxHalfCpltCallback+0xc4>)
 8000528:	801a      	strh	r2, [r3, #0]
	//				last_packet_received_time = __HAL_TIM_GET_COUNTER(&htim4);
					new_packet_recieved = true;
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_UART_RxHalfCpltCallback+0xc8>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]
					if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3302      	adds	r3, #2
 8000534:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_UART_RxHalfCpltCallback+0xb8>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	2b16      	cmp	r3, #22
 800053a:	d114      	bne.n	8000566 <HAL_UART_RxHalfCpltCallback+0xa2>
 800053c:	7afb      	ldrb	r3, [r7, #11]
 800053e:	2b18      	cmp	r3, #24
 8000540:	d111      	bne.n	8000566 <HAL_UART_RxHalfCpltCallback+0xa2>
					{
						memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3303      	adds	r3, #3
 8000546:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_UART_RxHalfCpltCallback+0xb8>)
 8000548:	4413      	add	r3, r2
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <HAL_UART_RxHalfCpltCallback+0xcc>)
 800054c:	4614      	mov	r4, r2
 800054e:	461d      	mov	r5, r3
 8000550:	6828      	ldr	r0, [r5, #0]
 8000552:	6869      	ldr	r1, [r5, #4]
 8000554:	68aa      	ldr	r2, [r5, #8]
 8000556:	68eb      	ldr	r3, [r5, #12]
 8000558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055a:	6928      	ldr	r0, [r5, #16]
 800055c:	6020      	str	r0, [r4, #0]
 800055e:	8aab      	ldrh	r3, [r5, #20]
 8000560:	80a3      	strh	r3, [r4, #4]
 8000562:	e000      	b.n	8000566 <HAL_UART_RxHalfCpltCallback+0xa2>
					continue;
 8000564:	bf00      	nop
		for(int i = 0 ; i < sizeof(rx_buffer)/2 ; i++)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2b3f      	cmp	r3, #63	; 0x3f
 8000570:	d9b1      	bls.n	80004d6 <HAL_UART_RxHalfCpltCallback+0x12>
					}
				}
			}
		}

}
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}
 800057c:	2000002c 	.word	0x2000002c
 8000580:	20000108 	.word	0x20000108
 8000584:	40000800 	.word	0x40000800
 8000588:	20000102 	.word	0x20000102
 800058c:	20000104 	.word	0x20000104
 8000590:	200000ec 	.word	0x200000ec

08000594 <crsf_init>:


void crsf_init()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
//	(&huart6)->hdmarx->XferCpltCallback = check_and_decode_crsf;
	HAL_UART_Receive_DMA(&huart6, rx_buffer, 128);
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	4903      	ldr	r1, [pc, #12]	; (80005a8 <crsf_init+0x14>)
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <crsf_init+0x18>)
 800059e:	f004 f801 	bl	80045a4 <HAL_UART_Receive_DMA>

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	20000398 	.word	0x20000398

080005b0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	72fb      	strb	r3, [r7, #11]

	// check if its a valid packet
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) ; i++)
 80005bc:	4b2b      	ldr	r3, [pc, #172]	; (800066c <HAL_UART_RxCpltCallback+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	e044      	b.n	800064e <HAL_UART_RxCpltCallback+0x9e>
	{
		if (rx_buffer[i] == CRSF_ADDRESS_FLIGHT_CONTROLLER)
 80005c4:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <HAL_UART_RxCpltCallback+0xc0>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2bc8      	cmp	r3, #200	; 0xc8
 80005ce:	d13b      	bne.n	8000648 <HAL_UART_RxCpltCallback+0x98>
		{
			length = rx_buffer[i+1];
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <HAL_UART_RxCpltCallback+0xc0>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	72fb      	strb	r3, [r7, #11]
			// check length
			//then get all packets and check CRC if pass then packet valid
			if((length+i+2 > sizeof(rx_buffer)-1) || (i+1 > sizeof(rx_buffer)-1))
 80005da:	7afa      	ldrb	r2, [r7, #11]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	3302      	adds	r3, #2
 80005e2:	2b7f      	cmp	r3, #127	; 0x7f
 80005e4:	d82f      	bhi.n	8000646 <HAL_UART_RxCpltCallback+0x96>
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	2b7f      	cmp	r3, #127	; 0x7f
 80005ec:	d82b      	bhi.n	8000646 <HAL_UART_RxCpltCallback+0x96>
			{
				// handel cases with non full packets
				// can occur when the whole packet crc fails
				continue;
			}
			if(calculateCRC(rx_buffer , i+2,length) == 0) // start crc calculation from type byte
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3302      	adds	r3, #2
 80005f2:	7afa      	ldrb	r2, [r7, #11]
 80005f4:	4619      	mov	r1, r3
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <HAL_UART_RxCpltCallback+0xc0>)
 80005f8:	f000 f846 	bl	8000688 <calculateCRC>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d122      	bne.n	8000648 <HAL_UART_RxCpltCallback+0x98>
			{
				// valid packet
			    last_packet_received_time = TIM4->CNT; // non hal way of doing it
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <HAL_UART_RxCpltCallback+0xc4>)
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	b29a      	uxth	r2, r3
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_UART_RxCpltCallback+0xc8>)
 800060a:	801a      	strh	r2, [r3, #0]
//				last_packet_received_time = __HAL_TIM_GET_COUNTER(&htim4);
				new_packet_recieved = true;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_UART_RxCpltCallback+0xcc>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
				if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3302      	adds	r3, #2
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <HAL_UART_RxCpltCallback+0xc0>)
 8000618:	5cd3      	ldrb	r3, [r2, r3]
 800061a:	2b16      	cmp	r3, #22
 800061c:	d114      	bne.n	8000648 <HAL_UART_RxCpltCallback+0x98>
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	2b18      	cmp	r3, #24
 8000622:	d111      	bne.n	8000648 <HAL_UART_RxCpltCallback+0x98>
				{
					memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3303      	adds	r3, #3
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <HAL_UART_RxCpltCallback+0xc0>)
 800062a:	4413      	add	r3, r2
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <HAL_UART_RxCpltCallback+0xd0>)
 800062e:	4614      	mov	r4, r2
 8000630:	461d      	mov	r5, r3
 8000632:	6828      	ldr	r0, [r5, #0]
 8000634:	6869      	ldr	r1, [r5, #4]
 8000636:	68aa      	ldr	r2, [r5, #8]
 8000638:	68eb      	ldr	r3, [r5, #12]
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	6928      	ldr	r0, [r5, #16]
 800063e:	6020      	str	r0, [r4, #0]
 8000640:	8aab      	ldrh	r3, [r5, #20]
 8000642:	80a3      	strh	r3, [r4, #4]
 8000644:	e000      	b.n	8000648 <HAL_UART_RxCpltCallback+0x98>
				continue;
 8000646:	bf00      	nop
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) ; i++)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3301      	adds	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b7f      	cmp	r3, #127	; 0x7f
 8000652:	d9b7      	bls.n	80005c4 <HAL_UART_RxCpltCallback+0x14>
//		rx_buffer[i] = 0; // clear buffer
//	}

//	__HAL_DMA_DISABLE(huart6.hdmarx); // workaround for clearing the interrupt bit
	// after processing re-enable DMA for new data
	last_parsed_packet_location = 0;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_UART_RxCpltCallback+0xbc>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <HAL_UART_RxCpltCallback+0xc0>)
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <HAL_UART_RxCpltCallback+0xd4>)
 8000660:	f003 ffa0 	bl	80045a4 <HAL_UART_Receive_DMA>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	20000108 	.word	0x20000108
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40000800 	.word	0x40000800
 8000678:	20000102 	.word	0x20000102
 800067c:	20000104 	.word	0x20000104
 8000680:	200000ec 	.word	0x200000ec
 8000684:	20000398 	.word	0x20000398

08000688 <calculateCRC>:


uint8_t calculateCRC(uint8_t* buffer , int start_index , int bytes)
{
 8000688:	b480      	push	{r7}
 800068a:	b08b      	sub	sp, #44	; 0x2c
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]

	// CRC is calculated for payload + type
    uint8_t dividend = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t next_byte;
    int numberOfBytesProcessed = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
    int numberOfBitsLeft = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    bool isMsbOne = false;
 80006a2:	2300      	movs	r3, #0
 80006a4:	75fb      	strb	r3, [r7, #23]
    for(int i = 0 ; i <9999 ; i++) // avoiding infinite loops
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	e04a      	b.n	8000742 <calculateCRC+0xba>
    {

        if (numberOfBitsLeft <=0 && numberOfBytesProcessed >= bytes)
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dc03      	bgt.n	80006ba <calculateCRC+0x32>
 80006b2:	6a3a      	ldr	r2, [r7, #32]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	da49      	bge.n	800074e <calculateCRC+0xc6>
        {
            // ALL BITS PROCEESSED
            break;
        }
        if (numberOfBitsLeft <= 0 && numberOfBytesProcessed < bytes)
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	dc11      	bgt.n	80006e4 <calculateCRC+0x5c>
 80006c0:	6a3a      	ldr	r2, [r7, #32]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	da0d      	bge.n	80006e4 <calculateCRC+0x5c>
        {
            // load bits into buffer if empty and if bits available
            next_byte = buffer[start_index + numberOfBytesProcessed];
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	4413      	add	r3, r2
 80006ce:	461a      	mov	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            numberOfBytesProcessed++;
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	3301      	adds	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
            numberOfBitsLeft =8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	61fb      	str	r3, [r7, #28]
        }

        isMsbOne = dividend & 0b10000000;
 80006e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf14      	ite	ne
 80006f0:	2301      	movne	r3, #1
 80006f2:	2300      	moveq	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]
        dividend = dividend << 1 | (next_byte>>7);   // shift First bit of Next_byte into dividend
 80006f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000702:	09db      	lsrs	r3, r3, #7
 8000704:	b2db      	uxtb	r3, r3
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b25b      	sxtb	r3, r3
 800070c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        next_byte = next_byte << 1;  // Shift out the first bit
 8000710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        numberOfBitsLeft --;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b01      	subs	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]
        dividend = isMsbOne ? dividend ^ gen_poly : dividend; //if bit aligning with MSB of gen_poly is 1 then do XOR
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <calculateCRC+0xac>
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <calculateCRC+0xd8>)
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072e:	4053      	eors	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	e001      	b.n	8000738 <calculateCRC+0xb0>
 8000734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int i = 0 ; i <9999 ; i++) // avoiding infinite loops
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	3301      	adds	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	f242 720e 	movw	r2, #9998	; 0x270e
 8000748:	4293      	cmp	r3, r2
 800074a:	ddaf      	ble.n	80006ac <calculateCRC+0x24>
 800074c:	e000      	b.n	8000750 <calculateCRC+0xc8>
            break;
 800074e:	bf00      	nop

    }

    return dividend;
 8000750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000754:	4618      	mov	r0, r3
 8000756:	372c      	adds	r7, #44	; 0x2c
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	20000000 	.word	0x20000000

08000764 <send_telem>:

void send_telem(uint8_t type , uint8_t* payload , uint8_t payload_length)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	tx_buffer[0] = CRSF_ADDRESS_CRSF_RECEIVER;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <send_telem+0x70>)
 8000776:	22ec      	movs	r2, #236	; 0xec
 8000778:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = payload_length+2;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	3302      	adds	r3, #2
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <send_telem+0x70>)
 8000782:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = type;
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <send_telem+0x70>)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	7093      	strb	r3, [r2, #2]
	memcpy(&(tx_buffer[3]),payload,payload_length);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	461a      	mov	r2, r3
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <send_telem+0x74>)
 8000792:	f005 f843 	bl	800581c <memcpy>
	tx_buffer[3+payload_length] = 0; // CRC set as 0 for calculation
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	3303      	adds	r3, #3
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <send_telem+0x70>)
 800079c:	2100      	movs	r1, #0
 800079e:	54d1      	strb	r1, [r2, r3]
	tx_buffer[3+payload_length] = calculateCRC(tx_buffer ,2, payload_length+2);
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	1c9a      	adds	r2, r3, #2
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	1cdc      	adds	r4, r3, #3
 80007a8:	2102      	movs	r1, #2
 80007aa:	480a      	ldr	r0, [pc, #40]	; (80007d4 <send_telem+0x70>)
 80007ac:	f7ff ff6c 	bl	8000688 <calculateCRC>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <send_telem+0x70>)
 80007b6:	551a      	strb	r2, [r3, r4]

	HAL_UART_Transmit_DMA(&huart6 ,tx_buffer, payload_length+4);
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	3304      	adds	r3, #4
 80007be:	b29b      	uxth	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	4904      	ldr	r1, [pc, #16]	; (80007d4 <send_telem+0x70>)
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <send_telem+0x78>)
 80007c6:	f003 fe6f 	bl	80044a8 <HAL_UART_Transmit_DMA>
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	200000af 	.word	0x200000af
 80007dc:	20000398 	.word	0x20000398

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_DMA_Init+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <MX_DMA_Init+0x88>)
 80007f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_DMA_Init+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_DMA_Init+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_DMA_Init+0x88>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_DMA_Init+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200d      	movs	r0, #13
 8000824:	f001 fc61 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000828:	200d      	movs	r0, #13
 800082a:	f001 fc7a 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2011      	movs	r0, #17
 8000834:	f001 fc59 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000838:	2011      	movs	r0, #17
 800083a:	f001 fc72 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2039      	movs	r0, #57	; 0x39
 8000844:	f001 fc51 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000848:	2039      	movs	r0, #57	; 0x39
 800084a:	f001 fc6a 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2045      	movs	r0, #69	; 0x45
 8000854:	f001 fc49 	bl	80020ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000858:	2045      	movs	r0, #69	; 0x45
 800085a:	f001 fc62 	bl	8002122 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f84b 	bl	8000914 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800087e:	f000 f8d5 	bl	8000a2c <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000882:	f000 f8e9 	bl	8000a58 <dshot_start_pwm>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <dshot_write>:

void dshot_write(uint16_t *motor_value , bool dshot_telemetry)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	last_sent_motor_value[0] = motor_value[0];
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	881a      	ldrh	r2, [r3, #0]
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <dshot_write+0x48>)
 80008a2:	801a      	strh	r2, [r3, #0]
	last_sent_motor_value[1] = motor_value[1];
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	885a      	ldrh	r2, [r3, #2]
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <dshot_write+0x48>)
 80008aa:	805a      	strh	r2, [r3, #2]
	last_sent_motor_value[2] = motor_value[2];
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	889a      	ldrh	r2, [r3, #4]
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <dshot_write+0x48>)
 80008b2:	809a      	strh	r2, [r3, #4]
	last_sent_motor_value[3] = motor_value[3];
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	88da      	ldrh	r2, [r3, #6]
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <dshot_write+0x48>)
 80008ba:	80da      	strh	r2, [r3, #6]
	dshot_prepare_dmabuffer_all(motor_value, dshot_telemetry);
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	4619      	mov	r1, r3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f943 	bl	8000b4c <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80008c6:	f000 f95f 	bl	8000b88 <dshot_dma_start>
	dshot_enable_dma_request();
 80008ca:	f000 f97d 	bl	8000bc8 <dshot_enable_dma_request>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001a0 	.word	0x200001a0

080008dc <dshot_choose_type>:

/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d003      	beq.n	80008f4 <dshot_choose_type+0x18>
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d103      	bne.n	80008f8 <dshot_choose_type+0x1c>
	{
	case (DSHOT600):
		return DSHOT600_HZ;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <dshot_choose_type+0x2c>)
 80008f2:	e002      	b.n	80008fa <dshot_choose_type+0x1e>

	case (DSHOT300):
		return DSHOT300_HZ;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <dshot_choose_type+0x30>)
 80008f6:	e000      	b.n	80008fa <dshot_choose_type+0x1e>

	default:
	case (DSHOT150):
		return DSHOT150_HZ;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <dshot_choose_type+0x34>)
	}
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	00b71b00 	.word	0x00b71b00
 800090c:	005b8d80 	.word	0x005b8d80
 8000910:	002dc6c0 	.word	0x002dc6c0

08000914 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	ed2d 8b02 	vpush	{d8}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0x80>)
 8000924:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float)timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffd2 	bl	80008dc <dshot_choose_type>
 8000938:	ee07 0a90 	vmov	s15, r0
 800093c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000940:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000944:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000998 <dshot_set_timer+0x84>
 8000948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f004 ff72 	bl	8005838 <lrintf>
 8000954:	4603      	mov	r3, r0
 8000956:	b29b      	uxth	r3, r3
 8000958:	3b01      	subs	r3, #1
 800095a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <dshot_set_timer+0x88>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	897a      	ldrh	r2, [r7, #10]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <dshot_set_timer+0x88>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2214      	movs	r2, #20
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <dshot_set_timer+0x88>)
 800096e:	2214      	movs	r2, #20
 8000970:	60da      	str	r2, [r3, #12]
	// motor2
	// __HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
	// __HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <dshot_set_timer+0x8c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	897a      	ldrh	r2, [r7, #10]
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <dshot_set_timer+0x8c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2214      	movs	r2, #20
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <dshot_set_timer+0x8c>)
 8000984:	2214      	movs	r2, #20
 8000986:	60da      	str	r2, [r3, #12]

	// // motor4
	// __HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
	// __HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	ecbd 8b02 	vpop	{d8}
 8000992:	bd80      	pop	{r7, pc}
 8000994:	02dc6c00 	.word	0x02dc6c00
 8000998:	3c23d70a 	.word	0x3c23d70a
 800099c:	20000200 	.word	0x20000200
 80009a0:	200001b8 	.word	0x200001b8

080009a4 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b0:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d108      	bne.n	80009ce <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009ca:	60da      	str	r2, [r3, #12]
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80009cc:	e028      	b.n	8000a20 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d108      	bne.n	80009ea <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009e6:	60da      	str	r2, [r3, #12]
}
 80009e8:	e01a      	b.n	8000a20 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d108      	bne.n	8000a06 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a02:	60da      	str	r2, [r3, #12]
}
 8000a04:	e00c      	b.n	8000a20 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d107      	bne.n	8000a20 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a1e:	60da      	str	r2, [r3, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
// TIM_DMA_ID_CCx depends on timer channel
#ifdef MOTOR_1_TIM
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <dshot_put_tc_callback_function+0x20>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <dshot_put_tc_callback_function+0x24>)
 8000a36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_2_TIM
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
#endif
#ifdef MOTOR_3_TIM
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <dshot_put_tc_callback_function+0x28>)
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <dshot_put_tc_callback_function+0x24>)
 8000a3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_4_TIM
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000200 	.word	0x20000200
 8000a50:	080009a5 	.word	0x080009a5
 8000a54:	200001b8 	.word	0x200001b8

08000a58 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
	// Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <dshot_start_pwm+0x18>)
 8000a60:	f002 fef6 	bl	8003850 <HAL_TIM_PWM_Start>
	// HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a64:	210c      	movs	r1, #12
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <dshot_start_pwm+0x1c>)
 8000a68:	f002 fef2 	bl	8003850 <HAL_TIM_PWM_Start>
	// HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000200 	.word	0x20000200
 8000a74:	200001b8 	.word	0x200001b8

08000a78 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value , bool dshot_telemetry)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	717b      	strb	r3, [r7, #5]
	uint16_t packet;


	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	797b      	ldrb	r3, [r7, #5]
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	817b      	strh	r3, [r7, #10]

	// compute checksum
	unsigned csum = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 3; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	e009      	b.n	8000aba <dshot_prepare_packet+0x42>
	{
		csum ^= csum_data; // xor data by nibbles
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4053      	eors	r3, r2
 8000aac:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	ddf2      	ble.n	8000aa6 <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000ac8:	897b      	ldrh	r3, [r7, #10]
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	817b      	strh	r3, [r7, #10]

	return packet;
 8000ad6:	897b      	ldrh	r3, [r7, #10]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	371c      	adds	r7, #28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t *motor_dmabuffer, uint16_t value , bool dshot_telemetry)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]
	uint16_t packet;
	packet = dshot_prepare_packet(value ,dshot_telemetry );
 8000af4:	787a      	ldrb	r2, [r7, #1]
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffbc 	bl	8000a78 <dshot_prepare_packet>
 8000b00:	4603      	mov	r3, r0
 8000b02:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < 16; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	e011      	b.n	8000b2e <dshot_prepare_dmabuffer+0x4a>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da01      	bge.n	8000b16 <dshot_prepare_dmabuffer+0x32>
 8000b12:	220e      	movs	r2, #14
 8000b14:	e000      	b.n	8000b18 <dshot_prepare_dmabuffer+0x34>
 8000b16:	2207      	movs	r2, #7
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	440b      	add	r3, r1
 8000b20:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	ddea      	ble.n	8000b0a <dshot_prepare_dmabuffer+0x26>
	}

	motor_dmabuffer[16] = 0;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3340      	adds	r3, #64	; 0x40
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3344      	adds	r3, #68	; 0x44
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t *motor_value , bool dshot_telemetry)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0], dshot_telemetry);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	78fa      	ldrb	r2, [r7, #3]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <dshot_prepare_dmabuffer_all+0x34>)
 8000b62:	f7ff ffbf 	bl	8000ae4 <dshot_prepare_dmabuffer>
	// dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2] ,dshot_telemetry);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	78fa      	ldrb	r2, [r7, #3]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <dshot_prepare_dmabuffer_all+0x38>)
 8000b72:	f7ff ffb7 	bl	8000ae4 <dshot_prepare_dmabuffer>
	// dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000010c 	.word	0x2000010c
 8000b84:	20000154 	.word	0x20000154

08000b88 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <dshot_dma_start+0x30>)
 8000b8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b90:	490a      	ldr	r1, [pc, #40]	; (8000bbc <dshot_dma_start+0x34>)
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <dshot_dma_start+0x30>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3340      	adds	r3, #64	; 0x40
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	f001 fb8a 	bl	80022b4 <HAL_DMA_Start_IT>
	// HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <dshot_dma_start+0x38>)
 8000ba2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <dshot_dma_start+0x3c>)
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <dshot_dma_start+0x38>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3340      	adds	r3, #64	; 0x40
 8000bac:	461a      	mov	r2, r3
 8000bae:	2312      	movs	r3, #18
 8000bb0:	f001 fb80 	bl	80022b4 <HAL_DMA_Start_IT>
	// HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000200 	.word	0x20000200
 8000bbc:	2000010c 	.word	0x2000010c
 8000bc0:	200001b8 	.word	0x200001b8
 8000bc4:	20000154 	.word	0x20000154

08000bc8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <dshot_enable_dma_request+0x30>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <dshot_enable_dma_request+0x30>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bda:	60da      	str	r2, [r3, #12]
	// __HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC4);
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <dshot_enable_dma_request+0x34>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <dshot_enable_dma_request+0x34>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bea:	60da      	str	r2, [r3, #12]
	// __HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000200 	.word	0x20000200
 8000bfc:	200001b8 	.word	0x200001b8

08000c00 <dshot_arm>:

void dshot_arm()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
	uint16_t arr[4] = {0,0,0,0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
	is_armed = true;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <dshot_arm+0x44>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < 2000 ; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e00a      	b.n	8000c30 <dshot_arm+0x30>
	  {
		  dshot_write(arr , false);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe36 	bl	8000890 <dshot_write>
		  HAL_Delay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f001 f961 	bl	8001eec <HAL_Delay>
	for(int i =0 ; i < 2000 ; i++)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c36:	dbf0      	blt.n	8000c1a <dshot_arm+0x1a>
		  // send 0 for first 2 seconds

	  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000019c 	.word	0x2000019c

08000c48 <dshot_beep>:
		  // send 0 for first 2 seconds
	  }
	save_settings(motor_number);
}
void dshot_beep(uint8_t motor_number ,uint8_t beep_number)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	beep_number = beep_number < 0 ? 0:beep_number;
	beep_number = beep_number > 5 ? 5:beep_number;
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	bf28      	it	cs
 8000c5e:	2305      	movcs	r3, #5
 8000c60:	71bb      	strb	r3, [r7, #6]

	last_sent_motor_value[motor_number] = 2;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <dshot_beep+0x3c>)
 8000c66:	2102      	movs	r1, #2
 8000c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dshot_write(last_sent_motor_value,true);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <dshot_beep+0x3c>)
 8000c70:	f7ff fe0e 	bl	8000890 <dshot_write>
	HAL_Delay(100);
 8000c74:	2064      	movs	r0, #100	; 0x64
 8000c76:	f001 f939 	bl	8001eec <HAL_Delay>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001a0 	.word	0x200001a0

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_GPIO_Init+0xb4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2130      	movs	r1, #48	; 0x30
 8000d12:	480b      	ldr	r0, [pc, #44]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000d14:	f001 ffbe 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d18:	2330      	movs	r3, #48	; 0x30
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_GPIO_Init+0xb8>)
 8000d30:	f001 fe14 	bl	800295c <HAL_GPIO_Init>

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 f85d 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 fa83 	bl	8001258 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f7ff ff99 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d56:	f7ff fd43 	bl	80007e0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d5a:	f000 fc2f 	bl	80015bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d5e:	f000 fca1 	bl	80016a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d62:	f000 fd63 	bl	800182c <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000d66:	f000 ff45 	bl	8001bf4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000d6a:	f000 fd11 	bl	8001790 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  dshot_init(DSHOT600);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff fd7c 	bl	800086c <dshot_init>
  crsf_init();
 8000d74:	f7ff fc0e 	bl	8000594 <crsf_init>

	// want the timer to run at 1 mhz (u can choose any )
	// so prescaler = 48mhz(apb1) / 1mhz = 48
	__HAL_TIM_SET_PRESCALER(&htim5, 48);
 8000d78:	4bab      	ldr	r3, [pc, #684]	; (8001028 <main+0x2e4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2230      	movs	r2, #48	; 0x30
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
		//for 50hz the arr value should be 1mhz/50 = 20000
	__HAL_TIM_SET_AUTORELOAD(&htim5, 20000);
 8000d80:	4ba9      	ldr	r3, [pc, #676]	; (8001028 <main+0x2e4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d8a:	4ba7      	ldr	r3, [pc, #668]	; (8001028 <main+0x2e4>)
 8000d8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d90:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 , 1200);
 8000d92:	4ba5      	ldr	r3, [pc, #660]	; (8001028 <main+0x2e4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	48a2      	ldr	r0, [pc, #648]	; (8001028 <main+0x2e4>)
 8000da0:	f002 fd56 	bl	8003850 <HAL_TIM_PWM_Start>


	// tim4 used for measurment of time
	__HAL_TIM_SET_PRESCALER(&htim4, 960); // so timer running at 0.05mhz ==> 20 us = 1 step => timer overflows in 1.3 seconds
 8000da4:	4ba1      	ldr	r3, [pc, #644]	; (800102c <main+0x2e8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_Base_Start(&htim4);
 8000dae:	489f      	ldr	r0, [pc, #636]	; (800102c <main+0x2e8>)
 8000db0:	f002 fc8c 	bl	80036cc <HAL_TIM_Base_Start>



	// arm esc
    dshot_arm();
 8000db4:	f7ff ff24 	bl	8000c00 <dshot_arm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000db8:	2120      	movs	r1, #32
 8000dba:	489d      	ldr	r0, [pc, #628]	; (8001030 <main+0x2ec>)
 8000dbc:	f001 ff83 	bl	8002cc6 <HAL_GPIO_TogglePin>
	  if(arm_state == ARMED && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = IDLE ;
 8000dc0:	4b9c      	ldr	r3, [pc, #624]	; (8001034 <main+0x2f0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d110      	bne.n	8000dea <main+0xa6>
 8000dc8:	4b9b      	ldr	r3, [pc, #620]	; (8001038 <main+0x2f4>)
 8000dca:	795a      	ldrb	r2, [r3, #5]
 8000dcc:	0912      	lsrs	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	799b      	ldrb	r3, [r3, #6]
 8000dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000de0:	d203      	bcs.n	8000dea <main+0xa6>
 8000de2:	4b94      	ldr	r3, [pc, #592]	; (8001034 <main+0x2f0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e085      	b.n	8000ef6 <main+0x1b2>
	  else if(arm_state == IDLE && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = PREARMED ;
 8000dea:	4b92      	ldr	r3, [pc, #584]	; (8001034 <main+0x2f0>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d120      	bne.n	8000e34 <main+0xf0>
 8000df2:	4b91      	ldr	r3, [pc, #580]	; (8001038 <main+0x2f4>)
 8000df4:	799a      	ldrb	r2, [r3, #6]
 8000df6:	09d2      	lsrs	r2, r2, #7
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	79d9      	ldrb	r1, [r3, #7]
 8000dfc:	0049      	lsls	r1, r1, #1
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	7a1b      	ldrb	r3, [r3, #8]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	025b      	lsls	r3, r3, #9
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000e10:	d910      	bls.n	8000e34 <main+0xf0>
 8000e12:	4b89      	ldr	r3, [pc, #548]	; (8001038 <main+0x2f4>)
 8000e14:	795a      	ldrb	r2, [r3, #5]
 8000e16:	0912      	lsrs	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	799b      	ldrb	r3, [r3, #6]
 8000e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000e2a:	d203      	bcs.n	8000e34 <main+0xf0>
 8000e2c:	4b81      	ldr	r3, [pc, #516]	; (8001034 <main+0x2f0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e060      	b.n	8000ef6 <main+0x1b2>
	  else if(arm_state == IDLE && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = NOPREARM ;
 8000e34:	4b7f      	ldr	r3, [pc, #508]	; (8001034 <main+0x2f0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d120      	bne.n	8000e7e <main+0x13a>
 8000e3c:	4b7e      	ldr	r3, [pc, #504]	; (8001038 <main+0x2f4>)
 8000e3e:	799a      	ldrb	r2, [r3, #6]
 8000e40:	09d2      	lsrs	r2, r2, #7
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	79d9      	ldrb	r1, [r3, #7]
 8000e46:	0049      	lsls	r1, r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	7a1b      	ldrb	r3, [r3, #8]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000e5a:	d210      	bcs.n	8000e7e <main+0x13a>
 8000e5c:	4b76      	ldr	r3, [pc, #472]	; (8001038 <main+0x2f4>)
 8000e5e:	795a      	ldrb	r2, [r3, #5]
 8000e60:	0912      	lsrs	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	799b      	ldrb	r3, [r3, #6]
 8000e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000e74:	d903      	bls.n	8000e7e <main+0x13a>
 8000e76:	4b6f      	ldr	r3, [pc, #444]	; (8001034 <main+0x2f0>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e03b      	b.n	8000ef6 <main+0x1b2>
	  else if(arm_state == PREARMED && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = ARMED ;
 8000e7e:	4b6d      	ldr	r3, [pc, #436]	; (8001034 <main+0x2f0>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d120      	bne.n	8000ec8 <main+0x184>
 8000e86:	4b6c      	ldr	r3, [pc, #432]	; (8001038 <main+0x2f4>)
 8000e88:	799a      	ldrb	r2, [r3, #6]
 8000e8a:	09d2      	lsrs	r2, r2, #7
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	79d9      	ldrb	r1, [r3, #7]
 8000e90:	0049      	lsls	r1, r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	7a1b      	ldrb	r3, [r3, #8]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000ea4:	d910      	bls.n	8000ec8 <main+0x184>
 8000ea6:	4b64      	ldr	r3, [pc, #400]	; (8001038 <main+0x2f4>)
 8000ea8:	795a      	ldrb	r2, [r3, #5]
 8000eaa:	0912      	lsrs	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	799b      	ldrb	r3, [r3, #6]
 8000eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000ebe:	d903      	bls.n	8000ec8 <main+0x184>
 8000ec0:	4b5c      	ldr	r3, [pc, #368]	; (8001034 <main+0x2f0>)
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e016      	b.n	8000ef6 <main+0x1b2>
	  else if(arm_state == NOPREARM && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 ) arm_state = IDLE ;
 8000ec8:	4b5a      	ldr	r3, [pc, #360]	; (8001034 <main+0x2f0>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d112      	bne.n	8000ef6 <main+0x1b2>
 8000ed0:	4b59      	ldr	r3, [pc, #356]	; (8001038 <main+0x2f4>)
 8000ed2:	799a      	ldrb	r2, [r3, #6]
 8000ed4:	09d2      	lsrs	r2, r2, #7
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	79d9      	ldrb	r1, [r3, #7]
 8000eda:	0049      	lsls	r1, r1, #1
 8000edc:	430a      	orrs	r2, r1
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000eee:	d202      	bcs.n	8000ef6 <main+0x1b2>
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <main+0x2f0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]


	  if(arm_state == ARMED) // arm channel
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <main+0x2f0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	f040 8105 	bne.w	800110a <main+0x3c6>
	  {
		  if(channel_data.channel6 < 1500)
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <main+0x2f4>)
 8000f02:	799a      	ldrb	r2, [r3, #6]
 8000f04:	09d2      	lsrs	r2, r2, #7
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	79d9      	ldrb	r1, [r3, #7]
 8000f0a:	0049      	lsls	r1, r1, #1
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	7a1b      	ldrb	r3, [r3, #8]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d827      	bhi.n	8000f72 <main+0x22e>
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true);
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <main+0x2f4>)
 8000f24:	789a      	ldrb	r2, [r3, #2]
 8000f26:	0992      	lsrs	r2, r2, #6
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	78d9      	ldrb	r1, [r3, #3]
 8000f2c:	0089      	lsls	r1, r1, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f44:	2001      	movs	r0, #1
 8000f46:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 800103c <main+0x2f8>
 8000f4a:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8001040 <main+0x2fc>
 8000f4e:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8001044 <main+0x300>
 8000f52:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001048 <main+0x304>
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	f000 f9e7 	bl	800132c <map>
 8000f5e:	eef0 7a40 	vmov.f32	s15, s0
 8000f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f66:	ee17 3a90 	vmov	r3, s15
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <main+0x308>)
 8000f6e:	809a      	strh	r2, [r3, #4]
 8000f70:	e026      	b.n	8000fc0 <main+0x27c>
		  else
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DR_MIN_THROTTLE, DSHOT_3DR_MAX_THROTTLE, true);
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <main+0x2f4>)
 8000f74:	789a      	ldrb	r2, [r3, #2]
 8000f76:	0992      	lsrs	r2, r2, #6
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	78d9      	ldrb	r1, [r3, #3]
 8000f7c:	0089      	lsls	r1, r1, #2
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	029b      	lsls	r3, r3, #10
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	2001      	movs	r0, #1
 8000f96:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8001050 <main+0x30c>
 8000f9a:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8001054 <main+0x310>
 8000f9e:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8001044 <main+0x300>
 8000fa2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001048 <main+0x304>
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	f000 f9bf 	bl	800132c <map>
 8000fae:	eef0 7a40 	vmov.f32	s15, s0
 8000fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <main+0x308>)
 8000fbe:	809a      	strh	r2, [r3, #4]


		  // back motor
		  if(channel_data.channel2 >= CRSF_CHANNEL_VALUE_MID + deadband)
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <main+0x2f4>)
 8000fc2:	785a      	ldrb	r2, [r3, #1]
 8000fc4:	08d2      	lsrs	r2, r2, #3
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	f240 4243 	movw	r2, #1091	; 0x443
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d93f      	bls.n	800105c <main+0x318>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_MID + deadband, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true); // correct this
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <main+0x2f4>)
 8000fde:	785a      	ldrb	r2, [r3, #1]
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800103c <main+0x2f8>
 8000ffe:	eddf 1a10 	vldr	s3, [pc, #64]	; 8001040 <main+0x2fc>
 8001002:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001044 <main+0x300>
 8001006:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001058 <main+0x314>
 800100a:	eeb0 0a67 	vmov.f32	s0, s15
 800100e:	f000 f98d 	bl	800132c <map>
 8001012:	eef0 7a40 	vmov.f32	s15, s0
 8001016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101a:	ee17 3a90 	vmov	r3, s15
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <main+0x308>)
 8001022:	801a      	strh	r2, [r3, #0]
 8001024:	e04f      	b.n	80010c6 <main+0x382>
 8001026:	bf00      	nop
 8001028:	20000290 	.word	0x20000290
 800102c:	20000248 	.word	0x20000248
 8001030:	40020400 	.word	0x40020400
 8001034:	200001b4 	.word	0x200001b4
 8001038:	200000ec 	.word	0x200000ec
 800103c:	447a0000 	.word	0x447a0000
 8001040:	42400000 	.word	0x42400000
 8001044:	44e00000 	.word	0x44e00000
 8001048:	433f0000 	.word	0x433f0000
 800104c:	200001a8 	.word	0x200001a8
 8001050:	44ffe000 	.word	0x44ffe000
 8001054:	4483e000 	.word	0x4483e000
 8001058:	44888000 	.word	0x44888000
		  else if(channel_data.channel2 <= CRSF_CHANNEL_VALUE_MID - deadband)
 800105c:	4b6d      	ldr	r3, [pc, #436]	; (8001214 <main+0x4d0>)
 800105e:	785a      	ldrb	r2, [r3, #1]
 8001060:	08d2      	lsrs	r2, r2, #3
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800106a:	015b      	lsls	r3, r3, #5
 800106c:	4313      	orrs	r3, r2
 800106e:	b29b      	uxth	r3, r3
 8001070:	f5b3 7f5f 	cmp.w	r3, #892	; 0x37c
 8001074:	d824      	bhi.n	80010c0 <main+0x37c>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_MID - deadband, DSHOT_3DR_MAX_THROTTLE, DSHOT_3DR_MIN_THROTTLE, true); // correct this
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <main+0x4d0>)
 8001078:	785a      	ldrb	r2, [r3, #1]
 800107a:	08d2      	lsrs	r2, r2, #3
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001084:	015b      	lsls	r3, r3, #5
 8001086:	4313      	orrs	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001092:	2001      	movs	r0, #1
 8001094:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8001218 <main+0x4d4>
 8001098:	eddf 1a60 	vldr	s3, [pc, #384]	; 800121c <main+0x4d8>
 800109c:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8001220 <main+0x4dc>
 80010a0:	eddf 0a60 	vldr	s1, [pc, #384]	; 8001224 <main+0x4e0>
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	f000 f940 	bl	800132c <map>
 80010ac:	eef0 7a40 	vmov.f32	s15, s0
 80010b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <main+0x4e4>)
 80010bc:	801a      	strh	r2, [r3, #0]
 80010be:	e002      	b.n	80010c6 <main+0x382>
		  else
			  my_motor_value[0]= 0;
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <main+0x4e4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]


		  angle = map(channel_data.channel1,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <main+0x4d0>)
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010de:	2001      	movs	r0, #1
 80010e0:	ed9f 2a52 	vldr	s4, [pc, #328]	; 800122c <main+0x4e8>
 80010e4:	eddf 1a52 	vldr	s3, [pc, #328]	; 8001230 <main+0x4ec>
 80010e8:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8001234 <main+0x4f0>
 80010ec:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8001224 <main+0x4e0>
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	f000 f91a 	bl	800132c <map>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001100:	ee17 2a90 	vmov	r2, s15
 8001104:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <main+0x4f4>)
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e009      	b.n	800111e <main+0x3da>
	  }
	  else{
		  my_motor_value[0] = 0;
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <main+0x4e4>)
 800110c:	2200      	movs	r2, #0
 800110e:	801a      	strh	r2, [r3, #0]
		  my_motor_value[2] = 0;
 8001110:	4b45      	ldr	r3, [pc, #276]	; (8001228 <main+0x4e4>)
 8001112:	2200      	movs	r2, #0
 8001114:	809a      	strh	r2, [r3, #4]
		  angle = (min_servo+max_servo)/2;
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <main+0x4f4>)
 8001118:	f240 621d 	movw	r2, #1565	; 0x61d
 800111c:	601a      	str	r2, [r3, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 ,angle);
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <main+0x4f4>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b46      	ldr	r3, [pc, #280]	; (800123c <main+0x4f8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
	  if(my_motor_value[0] == 0 && my_motor_value[2] == 0 && channel_data.channel9 > 1500 )
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <main+0x4e4>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d118      	bne.n	8001162 <main+0x41e>
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <main+0x4e4>)
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d114      	bne.n	8001162 <main+0x41e>
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <main+0x4d0>)
 800113a:	7ada      	ldrb	r2, [r3, #11]
 800113c:	7b1b      	ldrb	r3, [r3, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4313      	orrs	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800114c:	4293      	cmp	r3, r2
 800114e:	d908      	bls.n	8001162 <main+0x41e>
	  {
		  dshot_beep(0,2);
 8001150:	2102      	movs	r1, #2
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fd78 	bl	8000c48 <dshot_beep>
		  dshot_beep(2,2);
 8001158:	2102      	movs	r1, #2
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff fd74 	bl	8000c48 <dshot_beep>
 8001160:	e003      	b.n	800116a <main+0x426>
	  }else{
	  dshot_write(my_motor_value , false);
 8001162:	2100      	movs	r1, #0
 8001164:	4830      	ldr	r0, [pc, #192]	; (8001228 <main+0x4e4>)
 8001166:	f7ff fb93 	bl	8000890 <dshot_write>
	  }


	  // telemetry
	  if((uint16_t)(((uint16_t)(TIM4->CNT) - battery_telem_last_sent)) > (uint16_t)(500000/20)) // send battery telemetry every 500ms
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <main+0x4fc>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <main+0x500>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800117c:	4293      	cmp	r3, r2
 800117e:	d921      	bls.n	80011c4 <main+0x480>
	  {
		  battery_telem_last_sent = (uint16_t)(TIM4->CNT);
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <main+0x4fc>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <main+0x500>)
 8001188:	801a      	strh	r2, [r3, #0]
		  crsf_sensor_battery_t bat = {1,2,56,34};
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <main+0x504>)
 800118c:	463b      	mov	r3, r7
 800118e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001192:	e883 0003 	stmia.w	r3, {r0, r1}
		  convert_to_big_endian((uint8_t*)&bat, 2); // battery voltage
 8001196:	463b      	mov	r3, r7
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f93c 	bl	8001418 <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&bat)[2]), 2); // battery current
 80011a0:	463b      	mov	r3, r7
 80011a2:	3302      	adds	r3, #2
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f936 	bl	8001418 <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&bat)[4]), 3); // mah
 80011ac:	463b      	mov	r3, r7
 80011ae:	3304      	adds	r3, #4
 80011b0:	2103      	movs	r1, #3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f930 	bl	8001418 <convert_to_big_endian>
		 send_telem(CRSF_FRAMETYPE_BATTERY_SENSOR, (uint8_t*)&bat, sizeof(bat)/sizeof(uint8_t));
 80011b8:	463b      	mov	r3, r7
 80011ba:	2208      	movs	r2, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fad0 	bl	8000764 <send_telem>
		 // in future before sending check whether old data sent or not
	  }


	// FAILSAFE detection
	  if(((volatile uint16_t)(TIM4->CNT) - last_packet_received_time) > (uint16_t)(500000/20) && new_packet_recieved == true) // no packet received in 100ms // 20 us is the step size
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <main+0x4fc>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <main+0x508>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011d8:	4293      	cmp	r3, r2
 80011da:	dd0b      	ble.n	80011f4 <main+0x4b0>
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <main+0x50c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <main+0x4b0>
	  {
		  arm_state = FAILSAFE;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <main+0x510>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	701a      	strb	r2, [r3, #0]
		  new_packet_recieved = false;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <main+0x50c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e00d      	b.n	8001210 <main+0x4cc>
	  }else if(arm_state == FAILSAFE && new_packet_recieved == true)
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <main+0x510>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	f47f addd 	bne.w	8000db8 <main+0x74>
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <main+0x50c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	f43f add7 	beq.w	8000db8 <main+0x74>
	  {
		  arm_state = IDLE;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <main+0x510>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001210:	e5d2      	b.n	8000db8 <main+0x74>
 8001212:	bf00      	nop
 8001214:	200000ec 	.word	0x200000ec
 8001218:	4483e000 	.word	0x4483e000
 800121c:	44ffe000 	.word	0x44ffe000
 8001220:	445f0000 	.word	0x445f0000
 8001224:	433f0000 	.word	0x433f0000
 8001228:	200001a8 	.word	0x200001a8
 800122c:	45084000 	.word	0x45084000
 8001230:	446d8000 	.word	0x446d8000
 8001234:	44e00000 	.word	0x44e00000
 8001238:	200001b0 	.word	0x200001b0
 800123c:	20000290 	.word	0x20000290
 8001240:	40000800 	.word	0x40000800
 8001244:	200001b6 	.word	0x200001b6
 8001248:	080058d0 	.word	0x080058d0
 800124c:	20000102 	.word	0x20000102
 8001250:	20000104 	.word	0x20000104
 8001254:	200001b4 	.word	0x200001b4

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	; 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 faac 	bl	80057c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <SystemClock_Config+0xcc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <SystemClock_Config+0xd0>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012cc:	23c0      	movs	r3, #192	; 0xc0
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d4:	2304      	movs	r3, #4
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fd0d 	bl	8002cfc <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e8:	f000 f8cc 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2103      	movs	r1, #3
 800130a:	4618      	mov	r0, r3
 800130c:	f001 ff6e 	bl	80031ec <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001316:	f000 f8b5 	bl	8001484 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <map>:

/* USER CODE BEGIN 4 */

float map(float value_to_map , float from_low ,float from_high , float to_low , float to_high , bool constrain_within_range)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	ed87 0a05 	vstr	s0, [r7, #20]
 8001336:	edc7 0a04 	vstr	s1, [r7, #16]
 800133a:	ed87 1a03 	vstr	s2, [r7, #12]
 800133e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001342:	ed87 2a01 	vstr	s4, [r7, #4]
 8001346:	4603      	mov	r3, r0
 8001348:	70fb      	strb	r3, [r7, #3]

	value_to_map = (value_to_map- from_low)*((to_high - to_low)/(from_high- from_low)) + to_low;
 800134a:	ed97 7a05 	vldr	s14, [r7, #20]
 800134e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001356:	edd7 6a01 	vldr	s13, [r7, #4]
 800135a:	edd7 7a02 	vldr	s15, [r7, #8]
 800135e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001362:	edd7 6a03 	vldr	s13, [r7, #12]
 8001366:	edd7 7a04 	vldr	s15, [r7, #16]
 800136a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800136e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001376:	ed97 7a02 	vldr	s14, [r7, #8]
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	edc7 7a05 	vstr	s15, [r7, #20]
	if(constrain_within_range)
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d03d      	beq.n	8001404 <map+0xd8>
	{
		if(to_high>=to_low){
 8001388:	ed97 7a01 	vldr	s14, [r7, #4]
 800138c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	db1a      	blt.n	80013d0 <map+0xa4>
			value_to_map = value_to_map > to_high ? to_high : value_to_map;
 800139a:	ed97 7a05 	vldr	s14, [r7, #20]
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	dd01      	ble.n	80013b0 <map+0x84>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	e000      	b.n	80013b2 <map+0x86>
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map < to_low ? to_low : value_to_map;
 80013b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80013b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d501      	bpl.n	80013ca <map+0x9e>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	e000      	b.n	80013cc <map+0xa0>
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e019      	b.n	8001404 <map+0xd8>
		}else{
			// to low is the higher limit
			value_to_map = value_to_map < to_high ? to_high : value_to_map;
 80013d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80013d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d501      	bpl.n	80013e6 <map+0xba>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	e000      	b.n	80013e8 <map+0xbc>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map > to_low ? to_low : value_to_map;
 80013ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	dd01      	ble.n	8001400 <map+0xd4>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	e000      	b.n	8001402 <map+0xd6>
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	617b      	str	r3, [r7, #20]

		}
	}
	return value_to_map;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	ee07 3a90 	vmov	s15, r3
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	371c      	adds	r7, #28
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <convert_to_big_endian>:


void convert_to_big_endian(uint8_t * dst , uint8_t bytes)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
	uint8_t temp =0;
 8001424:	2300      	movs	r3, #0
 8001426:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i < bytes/2;i++)
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e01c      	b.n	8001468 <convert_to_big_endian+0x50>
	{
		//swap
		temp = dst[i];
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	72fb      	strb	r3, [r7, #11]
		dst[i] = dst[(bytes-1)-i];
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	1e5a      	subs	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	461a      	mov	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	441a      	add	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	440b      	add	r3, r1
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	701a      	strb	r2, [r3, #0]
		dst[(bytes-1)-i] = temp;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	461a      	mov	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	7afa      	ldrb	r2, [r7, #11]
 8001460:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < bytes/2;i++)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4293      	cmp	r3, r2
 8001474:	dbdb      	blt.n	800142e <convert_to_big_endian+0x16>
	}

}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_MspInit+0x4c>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x4c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 fcbe 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA1_Stream2_IRQHandler+0x10>)
 800153a:	f000 ffa5 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000338 	.word	0x20000338

08001548 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA1_Stream6_IRQHandler+0x10>)
 800154e:	f000 ff9b 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002d8 	.word	0x200002d8

0800155c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <DMA2_Stream1_IRQHandler+0x10>)
 8001562:	f000 ff91 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200003dc 	.word	0x200003dc

08001570 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <DMA2_Stream6_IRQHandler+0x10>)
 8001576:	f000 ff87 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000043c 	.word	0x2000043c

08001584 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <USART6_IRQHandler+0x10>)
 800158a:	f003 f83b 	bl	8004604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000398 	.word	0x20000398

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch2_ch4;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <MX_TIM2_Init+0xe4>)
 80015ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <MX_TIM2_Init+0xe4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <MX_TIM2_Init+0xe4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <MX_TIM2_Init+0xe4>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001614:	f002 f80a 	bl	800362c <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800161e:	f7ff ff31 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162c:	4619      	mov	r1, r3
 800162e:	481c      	ldr	r0, [pc, #112]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001630:	f002 fa98 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800163a:	f7ff ff23 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001640:	f002 f8ac 	bl	800379c <HAL_TIM_PWM_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800164a:	f7ff ff1b 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	4619      	mov	r1, r3
 800165c:	4810      	ldr	r0, [pc, #64]	; (80016a0 <MX_TIM2_Init+0xe4>)
 800165e:	f002 fe59 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001668:	f7ff ff0c 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166c:	2360      	movs	r3, #96	; 0x60
 800166e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	220c      	movs	r2, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001684:	f002 f9ac 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800168e:	f7ff fef9 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM2_Init+0xe4>)
 8001694:	f000 fa28 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3738      	adds	r7, #56	; 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200001b8 	.word	0x200001b8

080016a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	; 0x38
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <MX_TIM3_Init+0xe8>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f8:	4823      	ldr	r0, [pc, #140]	; (8001788 <MX_TIM3_Init+0xe4>)
 80016fa:	f001 ff97 	bl	800362c <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001704:	f7ff febe 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	4619      	mov	r1, r3
 8001714:	481c      	ldr	r0, [pc, #112]	; (8001788 <MX_TIM3_Init+0xe4>)
 8001716:	f002 fa25 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001720:	f7ff feb0 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <MX_TIM3_Init+0xe4>)
 8001726:	f002 f839 	bl	800379c <HAL_TIM_PWM_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001730:	f7ff fea8 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	4619      	mov	r1, r3
 8001742:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_TIM3_Init+0xe4>)
 8001744:	f002 fde6 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800174e:	f7ff fe99 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001752:	2360      	movs	r3, #96	; 0x60
 8001754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	220c      	movs	r2, #12
 8001766:	4619      	mov	r1, r3
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <MX_TIM3_Init+0xe4>)
 800176a:	f002 f939 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001774:	f7ff fe86 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <MX_TIM3_Init+0xe4>)
 800177a:	f000 f9b5 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 800177e:	bf00      	nop
 8001780:	3738      	adds	r7, #56	; 0x38
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000200 	.word	0x20000200
 800178c:	40000400 	.word	0x40000400

08001790 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	463b      	mov	r3, r7
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM4_Init+0x94>)
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <MX_TIM4_Init+0x98>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_TIM4_Init+0x94>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM4_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_TIM4_Init+0x94>)
 80017c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_TIM4_Init+0x94>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM4_Init+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_TIM4_Init+0x94>)
 80017d4:	f001 ff2a 	bl	800362c <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017de:	f7ff fe51 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM4_Init+0x94>)
 80017f0:	f002 f9b8 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f7ff fe43 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_TIM4_Init+0x94>)
 800180c:	f002 fd82 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001816:	f7ff fe35 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000248 	.word	0x20000248
 8001828:	40000800 	.word	0x40000800

0800182c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08e      	sub	sp, #56	; 0x38
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	f107 0320 	add.w	r3, r7, #32
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	615a      	str	r2, [r3, #20]
 800185a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <MX_TIM5_Init+0xe4>)
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <MX_TIM5_Init+0xe8>)
 8001860:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <MX_TIM5_Init+0xe4>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <MX_TIM5_Init+0xe4>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <MX_TIM5_Init+0xe4>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <MX_TIM5_Init+0xe4>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <MX_TIM5_Init+0xe4>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001880:	4823      	ldr	r0, [pc, #140]	; (8001910 <MX_TIM5_Init+0xe4>)
 8001882:	f001 fed3 	bl	800362c <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800188c:	f7ff fdfa 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189a:	4619      	mov	r1, r3
 800189c:	481c      	ldr	r0, [pc, #112]	; (8001910 <MX_TIM5_Init+0xe4>)
 800189e:	f002 f961 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80018a8:	f7ff fdec 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM5_Init+0xe4>)
 80018ae:	f001 ff75 	bl	800379c <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80018b8:	f7ff fde4 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4619      	mov	r1, r3
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <MX_TIM5_Init+0xe4>)
 80018cc:	f002 fd22 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80018d6:	f7ff fdd5 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM5_Init+0xe4>)
 80018f2:	f002 f875 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80018fc:	f7ff fdc2 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM5_Init+0xe4>)
 8001902:	f000 f8f1 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3738      	adds	r7, #56	; 0x38
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000290 	.word	0x20000290
 8001914:	40000c00 	.word	0x40000c00

08001918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d14e      	bne.n	80019c8 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001946:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001948:	4a61      	ldr	r2, [pc, #388]	; (8001ad0 <HAL_TIM_Base_MspInit+0x1b8>)
 800194a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800194c:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 800194e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001952:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001954:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001956:	2240      	movs	r2, #64	; 0x40
 8001958:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b5c      	ldr	r3, [pc, #368]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001966:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 800196a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800196e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001978:	4b54      	ldr	r3, [pc, #336]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001984:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001988:	2204      	movs	r2, #4
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800198c:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001992:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 8001994:	2200      	movs	r2, #0
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001998:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 800199a:	2200      	movs	r2, #0
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800199e:	484b      	ldr	r0, [pc, #300]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019a0:	f000 fbda 	bl	8002158 <HAL_DMA_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 80019aa:	f7ff fd6b 	bl	8001484 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
 80019b4:	4a45      	ldr	r2, [pc, #276]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a43      	ldr	r2, [pc, #268]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <HAL_TIM_Base_MspInit+0x1b4>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80019c6:	e07a      	b.n	8001abe <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <HAL_TIM_Base_MspInit+0x1bc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d14e      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 80019f0:	4a3a      	ldr	r2, [pc, #232]	; (8001adc <HAL_TIM_Base_MspInit+0x1c4>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 80019f6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 80019fe:	2240      	movs	r2, #64	; 0x40
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a02:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a08:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a16:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a30:	2204      	movs	r2, #4
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a46:	4824      	ldr	r0, [pc, #144]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a48:	f000 fb86 	bl	8002158 <HAL_DMA_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8001a52:	f7ff fd17 	bl	8001484 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a66:	621a      	str	r2, [r3, #32]
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a6e:	e026      	b.n	8001abe <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM4)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_TIM_Base_MspInit+0x1c8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
}
 8001a96:	e012      	b.n	8001abe <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM5)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_TIM_Base_MspInit+0x1cc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10d      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_TIM_Base_MspInit+0x1b0>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	200002d8 	.word	0x200002d8
 8001ad0:	400260a0 	.word	0x400260a0
 8001ad4:	40000400 	.word	0x40000400
 8001ad8:	20000338 	.word	0x20000338
 8001adc:	40026040 	.word	0x40026040
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40000c00 	.word	0x40000c00

08001ae8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b08:	d11e      	bne.n	8001b48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b26:	2308      	movs	r3, #8
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4828      	ldr	r0, [pc, #160]	; (8001be4 <HAL_TIM_MspPostInit+0xfc>)
 8001b42:	f000 ff0b 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b46:	e046      	b.n	8001bd6 <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_TIM_MspPostInit+0x100>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d11e      	bne.n	8001b90 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4818      	ldr	r0, [pc, #96]	; (8001bec <HAL_TIM_MspPostInit+0x104>)
 8001b8a:	f000 fee7 	bl	800295c <HAL_GPIO_Init>
}
 8001b8e:	e022      	b.n	8001bd6 <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM5)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_TIM_MspPostInit+0x108>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d11d      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_TIM_MspPostInit+0xf8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <HAL_TIM_MspPostInit+0xfc>)
 8001bd2:	f000 fec3 	bl	800295c <HAL_GPIO_Init>
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40000c00 	.word	0x40000c00

08001bf4 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <MX_USART6_UART_Init+0x4c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 420000;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c00:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <MX_USART6_UART_Init+0x50>)
 8001c02:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c18:	220c      	movs	r2, #12
 8001c1a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_USART6_UART_Init+0x48>)
 8001c2a:	f002 fbef 	bl	800440c <HAL_UART_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8001c34:	f7ff fc26 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000398 	.word	0x20000398
 8001c40:	40011400 	.word	0x40011400
 8001c44:	000668a0 	.word	0x000668a0

08001c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_UART_MspInit+0x150>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	f040 8092 	bne.w	8001d90 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_UART_MspInit+0x154>)
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <HAL_UART_MspInit+0x154>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_UART_MspInit+0x154>)
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_UART_MspInit+0x154>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <HAL_UART_MspInit+0x154>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6313      	str	r3, [r2, #48]	; 0x30
 8001c98:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_UART_MspInit+0x154>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4838      	ldr	r0, [pc, #224]	; (8001da0 <HAL_UART_MspInit+0x158>)
 8001cc0:	f000 fe4c 	bl	800295c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001cc4:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001cc6:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <HAL_UART_MspInit+0x160>)
 8001cc8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001ccc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001cd0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfe:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001d06:	4827      	ldr	r0, [pc, #156]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001d08:	f000 fa26 	bl	8002158 <HAL_DMA_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001d12:	f7ff fbb7 	bl	8001484 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_UART_MspInit+0x15c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_UART_MspInit+0x168>)
 8001d26:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d2a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001d2e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d42:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d5c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d66:	f000 f9f7 	bl	8002158 <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001d70:	f7ff fb88 	bl	8001484 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_UART_MspInit+0x164>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2047      	movs	r0, #71	; 0x47
 8001d86:	f000 f9b0 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d8a:	2047      	movs	r0, #71	; 0x47
 8001d8c:	f000 f9c9 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40011400 	.word	0x40011400
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	200003dc 	.word	0x200003dc
 8001da8:	40026428 	.word	0x40026428
 8001dac:	2000043c 	.word	0x2000043c
 8001db0:	400264a0 	.word	0x400264a0

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd0:	4c0b      	ldr	r4, [pc, #44]	; (8001e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dde:	f7ff fbdb 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f003 fcf7 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7fe ffad 	bl	8000d44 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001df8:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8001dfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e00:	200004a0 	.word	0x200004a0

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f94f 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fb28 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f967 	bl	800213e <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f92f 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	2000049c 	.word	0x2000049c

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000049c 	.word	0x2000049c

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000000c 	.word	0x2000000c

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff29 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff3e 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff31 	bl	8001f98 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff feb6 	bl	8001ed4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e099      	b.n	80022a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	e00f      	b.n	80021b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002196:	f7ff fe9d 	bl	8001ed4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d908      	bls.n	80021b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e078      	b.n	80022a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e8      	bne.n	8002196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_DMA_Init+0x158>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b04      	cmp	r3, #4
 800220e:	d107      	bne.n	8002220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4313      	orrs	r3, r2
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0307 	bic.w	r3, r3, #7
 8002236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b04      	cmp	r3, #4
 8002248:	d117      	bne.n	800227a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fb01 	bl	8002864 <DMA_CheckFifoParam>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002276:	2301      	movs	r3, #1
 8002278:	e016      	b.n	80022a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fab8 	bl	80027f8 <DMA_CalcBaseAndBitshift>
 8002288:	4603      	mov	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	f010803f 	.word	0xf010803f

080022b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_DMA_Start_IT+0x26>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e040      	b.n	800235c <HAL_DMA_Start_IT+0xa8>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d12f      	bne.n	800234e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa4a 	bl	800279c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	223f      	movs	r2, #63	; 0x3f
 800230e:	409a      	lsls	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0216 	orr.w	r2, r2, #22
 8002322:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e005      	b.n	800235a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002372:	f7ff fdaf 	bl	8001ed4 <HAL_GetTick>
 8002376:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d008      	beq.n	8002396 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e052      	b.n	800243c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0216 	bic.w	r2, r2, #22
 80023a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <HAL_DMA_Abort+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0208 	bic.w	r2, r2, #8
 80023d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e6:	e013      	b.n	8002410 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e8:	f7ff fd74 	bl	8001ed4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d90c      	bls.n	8002410 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2203      	movs	r2, #3
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e015      	b.n	800243c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e4      	bne.n	80023e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	223f      	movs	r2, #63	; 0x3f
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d004      	beq.n	8002462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00c      	b.n	800247c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002494:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_DMA_IRQHandler+0x248>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a8e      	ldr	r2, [pc, #568]	; (80026d4 <HAL_DMA_IRQHandler+0x24c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2208      	movs	r2, #8
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2208      	movs	r2, #8
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2201      	movs	r2, #1
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2201      	movs	r2, #1
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0202 	orr.w	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2204      	movs	r2, #4
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2204      	movs	r2, #4
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0204 	orr.w	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2210      	movs	r2, #16
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d043      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d03c      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2210      	movs	r2, #16
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d018      	beq.n	80025ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d024      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e01f      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0208 	bic.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2220      	movs	r2, #32
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 808f 	beq.w	8002728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8087 	beq.w	8002728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2220      	movs	r2, #32
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d136      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0216 	bic.w	r2, r2, #22
 8002640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_DMA_IRQHandler+0x1da>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07e      	beq.n	8002794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
        }
        return;
 800269e:	e079      	b.n	8002794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d031      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e02c      	b.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
 80026ce:	bf00      	nop
 80026d0:	20000004 	.word	0x20000004
 80026d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
 80026e8:	e01e      	b.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0210 	bic.w	r2, r2, #16
 8002706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	2b00      	cmp	r3, #0
 800272e:	d032      	beq.n	8002796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d022      	beq.n	8002782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2205      	movs	r2, #5
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	d307      	bcc.n	8002770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f2      	bne.n	8002754 <HAL_DMA_IRQHandler+0x2cc>
 800276e:	e000      	b.n	8002772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
 8002792:	e000      	b.n	8002796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002794:	bf00      	nop
    }
  }
}
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d108      	bne.n	80027dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027da:	e007      	b.n	80027ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3b10      	subs	r3, #16
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <DMA_CalcBaseAndBitshift+0x64>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <DMA_CalcBaseAndBitshift+0x68>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d909      	bls.n	800283a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	1d1a      	adds	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	659a      	str	r2, [r3, #88]	; 0x58
 8002838:	e007      	b.n	800284a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	aaaaaaab 	.word	0xaaaaaaab
 8002860:	080058f0 	.word	0x080058f0

08002864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d856      	bhi.n	8002932 <DMA_CheckFifoParam+0xce>
 8002884:	a201      	add	r2, pc, #4	; (adr r2, 800288c <DMA_CheckFifoParam+0x28>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028af 	.word	0x080028af
 8002894:	0800289d 	.word	0x0800289d
 8002898:	08002933 	.word	0x08002933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d046      	beq.n	8002936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e043      	b.n	8002936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b6:	d140      	bne.n	800293a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e03d      	b.n	800293a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	d121      	bne.n	800290c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d837      	bhi.n	800293e <DMA_CheckFifoParam+0xda>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <DMA_CheckFifoParam+0x70>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028eb 	.word	0x080028eb
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	080028fd 	.word	0x080028fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e030      	b.n	800294c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e022      	b.n	8002942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800290a:	e01c      	b.n	8002946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d903      	bls.n	800291a <DMA_CheckFifoParam+0xb6>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d003      	beq.n	8002920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002918:	e018      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e015      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e00b      	b.n	800294a <DMA_CheckFifoParam+0xe6>
      break;
 8002932:	bf00      	nop
 8002934:	e00a      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e008      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e006      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e004      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;   
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
    }
  } 
  
  return status; 
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e16b      	b.n	8002c50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 815a 	bne.w	8002c4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80b4 	beq.w	8002c4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_GPIO_Init+0x314>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02b      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <HAL_GPIO_Init+0x318>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d025      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x31c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x320>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d019      	beq.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <HAL_GPIO_Init+0x216>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x328>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00d      	beq.n	8002b6e <HAL_GPIO_Init+0x212>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_GPIO_Init+0x330>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_Init+0x20a>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b66:	2308      	movs	r3, #8
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae90 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40013c00 	.word	0x40013c00

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	041a      	lsls	r2, r3, #16
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	43d9      	mvns	r1, r3
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	619a      	str	r2, [r3, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e267      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e242      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7ff f88e 	bl	8001ed4 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7ff f88a 	bl	8001ed4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e207      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f87a 	bl	8001ed4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff f876 	bl	8001ed4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1f3      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7ff f82f 	bl	8001ed4 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7ff f82b 	bl	8001ed4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a8      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7ff f80e 	bl	8001ed4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7ff f80a 	bl	8001ed4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e187      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe ffee 	bl	8001ed4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe ffea 	bl	8001ed4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e167      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe ffd7 	bl	8001ed4 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe ffd3 	bl	8001ed4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e150      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b7a      	ldr	r3, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b77      	ldr	r3, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b74      	ldr	r3, [pc, #464]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe ff93 	bl	8001ed4 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe ff8f 	bl	8001ed4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x30c>
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a54      	ldr	r2, [pc, #336]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe ff54 	bl	8001ed4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe ff50 	bl	8001ed4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0cb      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe ff3e 	bl	8001ed4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe ff3a 	bl	8001ed4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b5      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a38      	ldr	r2, [pc, #224]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d05c      	beq.n	8003160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d141      	bne.n	8003132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe ff0e 	bl	8001ed4 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe ff0a 	bl	8001ed4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x470>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	491b      	ldr	r1, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe fee3 	bl	8001ed4 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe fedf 	bl	8001ed4 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e05c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x416>
 8003130:	e054      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fecc 	bl	8001ed4 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe fec8 	bl	8001ed4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e045      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
 800315e:	e03d      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e038      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d121      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fe fdfa 	bl	8001ed4 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe fdf6 	bl	8001ed4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fd5a 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	080058d8 	.word	0x080058d8
 80033b0:	20000004 	.word	0x20000004
 80033b4:	20000008 	.word	0x20000008

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b094      	sub	sp, #80	; 0x50
 80033be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	2300      	movs	r3, #0
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c8:	2300      	movs	r3, #0
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f200 80e1 	bhi.w	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e0db      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b73      	ldr	r3, [pc, #460]	; (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033f0:	e0db      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033f6:	e0d8      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003400:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
 8003418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
 8003426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4621      	mov	r1, r4
 8003444:	1a51      	subs	r1, r2, r1
 8003446:	6139      	str	r1, [r7, #16]
 8003448:	4629      	mov	r1, r5
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800345c:	4659      	mov	r1, fp
 800345e:	018b      	lsls	r3, r1, #6
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003466:	4651      	mov	r1, sl
 8003468:	018a      	lsls	r2, r1, #6
 800346a:	4651      	mov	r1, sl
 800346c:	ebb2 0801 	subs.w	r8, r2, r1
 8003470:	4659      	mov	r1, fp
 8003472:	eb63 0901 	sbc.w	r9, r3, r1
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348a:	4690      	mov	r8, r2
 800348c:	4699      	mov	r9, r3
 800348e:	4623      	mov	r3, r4
 8003490:	eb18 0303 	adds.w	r3, r8, r3
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	462b      	mov	r3, r5
 8003498:	eb49 0303 	adc.w	r3, r9, r3
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034aa:	4629      	mov	r1, r5
 80034ac:	024b      	lsls	r3, r1, #9
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034b4:	4621      	mov	r1, r4
 80034b6:	024a      	lsls	r2, r1, #9
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034c8:	f7fc fe7e 	bl	80001c8 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d4:	e058      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	4611      	mov	r1, r2
 80034e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f0:	4642      	mov	r2, r8
 80034f2:	464b      	mov	r3, r9
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0159      	lsls	r1, r3, #5
 80034fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003502:	0150      	lsls	r0, r2, #5
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4641      	mov	r1, r8
 800350a:	ebb2 0a01 	subs.w	sl, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb63 0b01 	sbc.w	fp, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003528:	ebb2 040a 	subs.w	r4, r2, sl
 800352c:	eb63 050b 	sbc.w	r5, r3, fp
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	00eb      	lsls	r3, r5, #3
 800353a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	4643      	mov	r3, r8
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	464b      	mov	r3, r9
 800354c:	eb45 0303 	adc.w	r3, r5, r3
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	61fa      	str	r2, [r7, #28]
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	f7fc fe24 	bl	80001c8 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800359a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3750      	adds	r7, #80	; 0x50
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	007a1200 	.word	0x007a1200

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000004 	.word	0x20000004

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035e0:	f7ff fff0 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a9b      	lsrs	r3, r3, #10
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	080058e8 	.word	0x080058e8

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffdc 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	080058e8 	.word	0x080058e8

0800362c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e041      	b.n	80036c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe f960 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f000 fb42 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e046      	b.n	8003772 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_TIM_Base_Start+0xb4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d01d      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <HAL_TIM_Base_Start+0xb8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <HAL_TIM_Base_Start+0xbc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_TIM_Base_Start+0xc0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_TIM_Base_Start+0xc4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_TIM_Base_Start+0xc8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_Base_Start+0x70>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIM_Base_Start+0xcc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d111      	bne.n	8003760 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b06      	cmp	r3, #6
 800374c:	d010      	beq.n	8003770 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	e007      	b.n	8003770 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40010400 	.word	0x40010400
 8003794:	40014000 	.word	0x40014000
 8003798:	40001800 	.word	0x40001800

0800379c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e041      	b.n	8003832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f839 	bl	800383a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 fa8a 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_TIM_PWM_Start+0x24>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e022      	b.n	80038ba <HAL_TIM_PWM_Start+0x6a>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d109      	bne.n	800388e <HAL_TIM_PWM_Start+0x3e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	e015      	b.n	80038ba <HAL_TIM_PWM_Start+0x6a>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d109      	bne.n	80038a8 <HAL_TIM_PWM_Start+0x58>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e008      	b.n	80038ba <HAL_TIM_PWM_Start+0x6a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07c      	b.n	80039bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x82>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d0:	e013      	b.n	80038fa <HAL_TIM_PWM_Start+0xaa>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x92>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e0:	e00b      	b.n	80038fa <HAL_TIM_PWM_Start+0xaa>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0xa2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f0:	e003      	b.n	80038fa <HAL_TIM_PWM_Start+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2201      	movs	r2, #1
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fce0 	bl	80042c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2d      	ldr	r2, [pc, #180]	; (80039c4 <HAL_TIM_PWM_Start+0x174>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_TIM_PWM_Start+0xcc>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <HAL_TIM_PWM_Start+0x178>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_TIM_PWM_Start+0xd0>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_TIM_PWM_Start+0xd2>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_TIM_PWM_Start+0x174>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d01d      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_TIM_PWM_Start+0x17c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d018      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_TIM_PWM_Start+0x180>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_TIM_PWM_Start+0x184>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_TIM_PWM_Start+0x178>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_TIM_PWM_Start+0x188>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIM_PWM_Start+0x136>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_TIM_PWM_Start+0x18c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d111      	bne.n	80039aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b06      	cmp	r3, #6
 8003996:	d010      	beq.n	80039ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a8:	e007      	b.n	80039ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40001800 	.word	0x40001800

080039e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0ae      	b.n	8003b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	f200 809f 	bhi.w	8003b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003b4d 	.word	0x08003b4d
 8003a1c:	08003b4d 	.word	0x08003b4d
 8003a20:	08003b4d 	.word	0x08003b4d
 8003a24:	08003a89 	.word	0x08003a89
 8003a28:	08003b4d 	.word	0x08003b4d
 8003a2c:	08003b4d 	.word	0x08003b4d
 8003a30:	08003b4d 	.word	0x08003b4d
 8003a34:	08003acb 	.word	0x08003acb
 8003a38:	08003b4d 	.word	0x08003b4d
 8003a3c:	08003b4d 	.word	0x08003b4d
 8003a40:	08003b4d 	.word	0x08003b4d
 8003a44:	08003b0b 	.word	0x08003b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f9f0 	bl	8003e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6999      	ldr	r1, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
      break;
 8003a86:	e064      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fa40 	bl	8003f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	619a      	str	r2, [r3, #24]
      break;
 8003ac8:	e043      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fa95 	bl	8004000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0208 	orr.w	r2, r2, #8
 8003ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0204 	bic.w	r2, r2, #4
 8003af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	61da      	str	r2, [r3, #28]
      break;
 8003b08:	e023      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fae9 	bl	80040e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	61da      	str	r2, [r3, #28]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_ConfigClockSource+0x1c>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0b4      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x186>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	d03e      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0xd4>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	f200 8087 	bhi.w	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	f000 8086 	beq.w	8003cd6 <HAL_TIM_ConfigClockSource+0x172>
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d87f      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d01a      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0xa6>
 8003bd4:	2b70      	cmp	r3, #112	; 0x70
 8003bd6:	d87b      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d050      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x11a>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d877      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d03c      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0xfa>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d873      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d058      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x13a>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d86f      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d064      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	d86b      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d060      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d867      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d05a      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	e062      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6899      	ldr	r1, [r3, #8]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f000 fb35 	bl	8004288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]
      break;
 8003c36:	e04f      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6899      	ldr	r1, [r3, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f000 fb1e 	bl	8004288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5a:	609a      	str	r2, [r3, #8]
      break;
 8003c5c:	e03c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 fa92 	bl	8004194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2150      	movs	r1, #80	; 0x50
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 faeb 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e02c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 fab1 	bl	80041f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2160      	movs	r1, #96	; 0x60
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fadb 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e01c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 fa72 	bl	8004194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2140      	movs	r1, #64	; 0x40
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 facb 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e00c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f000 fac2 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003cce:	e003      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3d      	ldr	r2, [pc, #244]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d027      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d023      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d017      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <TIM_Base_SetConfig+0x128>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <TIM_Base_SetConfig+0x130>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <TIM_Base_SetConfig+0x134>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <TIM_Base_SetConfig+0x138>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <TIM_OC1_SetConfig+0xd8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC1_SetConfig+0x64>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <TIM_OC1_SetConfig+0xdc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0308 	bic.w	r3, r3, #8
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <TIM_OC1_SetConfig+0xd8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_OC1_SetConfig+0x8e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <TIM_OC1_SetConfig+0xdc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010400 	.word	0x40010400

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC2_SetConfig+0x68>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10d      	bne.n	8003f98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC2_SetConfig+0x94>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d113      	bne.n	8003fd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40010400 	.word	0x40010400

08004000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_OC3_SetConfig+0xe0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC3_SetConfig+0x66>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <TIM_OC3_SetConfig+0xe4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <TIM_OC3_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC3_SetConfig+0x92>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d113      	bne.n	80040ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	031b      	lsls	r3, r3, #12
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_OC4_SetConfig+0xa4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC4_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <TIM_OC4_SetConfig+0xa8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d109      	bne.n	8004164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0210 	bic.w	r2, r3, #16
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e05a      	b.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d01d      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10c      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40010400 	.word	0x40010400
 8004404:	40014000 	.word	0x40014000
 8004408:	40001800 	.word	0x40001800

0800440c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e03f      	b.n	800449e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd fc08 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 ff43 	bl	80052dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	; 0x30
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d165      	bne.n	800458e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Transmit_DMA+0x26>
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e05e      	b.n	8004590 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Transmit_DMA+0x38>
 80044dc:	2302      	movs	r3, #2
 80044de:	e057      	b.n	8004590 <HAL_UART_Transmit_DMA+0xe8>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2221      	movs	r2, #33	; 0x21
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <HAL_UART_Transmit_DMA+0xf0>)
 800450e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_UART_Transmit_DMA+0xf4>)
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_UART_Transmit_DMA+0xf8>)
 800451e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	2200      	movs	r2, #0
 8004526:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3304      	adds	r3, #4
 800453c:	461a      	mov	r2, r3
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f7fd feb8 	bl	80022b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	617b      	str	r3, [r7, #20]
   return(result);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004576:	627a      	str	r2, [r7, #36]	; 0x24
 8004578:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6a39      	ldr	r1, [r7, #32]
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	61fb      	str	r3, [r7, #28]
   return(result);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	; 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	08004b75 	.word	0x08004b75
 800459c:	08004c0f 	.word	0x08004c0f
 80045a0:	08004d87 	.word	0x08004d87

080045a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d11d      	bne.n	80045fa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_Receive_DMA+0x26>
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e016      	b.n	80045fc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Receive_DMA+0x38>
 80045d8:	2302      	movs	r3, #2
 80045da:	e00f      	b.n	80045fc <HAL_UART_Receive_DMA+0x58>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fc13 	bl	8004e1c <UART_Start_Receive_DMA>
 80045f6:	4603      	mov	r3, r0
 80045f8:	e000      	b.n	80045fc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b0ba      	sub	sp, #232	; 0xe8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004630:	2300      	movs	r3, #0
 8004632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_UART_IRQHandler+0x66>
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fd7f 	bl	8005166 <UART_Receive_IT>
      return;
 8004668:	e256      	b.n	8004b18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800466a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80de 	beq.w	8004830 <HAL_UART_IRQHandler+0x22c>
 8004674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80d1 	beq.w	8004830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <HAL_UART_IRQHandler+0xae>
 800469a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_UART_IRQHandler+0xd2>
 80046be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f043 0202 	orr.w	r2, r3, #2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_UART_IRQHandler+0xf6>
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0204 	orr.w	r2, r3, #4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d011      	beq.n	800472a <HAL_UART_IRQHandler+0x126>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f043 0208 	orr.w	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 81ed 	beq.w	8004b0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_UART_IRQHandler+0x14e>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fd0a 	bl	8005166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <HAL_UART_IRQHandler+0x17a>
 8004776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04f      	beq.n	800481e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fc12 	bl	8004fa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d141      	bne.n	8004816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1d9      	bne.n	8004792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d013      	beq.n	800480e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	4a7d      	ldr	r2, [pc, #500]	; (80049e0 <HAL_UART_IRQHandler+0x3dc>)
 80047ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd fe26 	bl	8002444 <HAL_DMA_Abort_IT>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	e00e      	b.n	800482c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f99a 	bl	8004b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e00a      	b.n	800482c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f996 	bl	8004b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e006      	b.n	800482c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f992 	bl	8004b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800482a:	e170      	b.n	8004b0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	bf00      	nop
    return;
 800482e:	e16e      	b.n	8004b0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	f040 814a 	bne.w	8004ace <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8143 	beq.w	8004ace <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 813c 	beq.w	8004ace <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	f040 80b4 	bne.w	80049e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8140 	beq.w	8004b12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800489a:	429a      	cmp	r2, r3
 800489c:	f080 8139 	bcs.w	8004b12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b2:	f000 8088 	beq.w	80049c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1d9      	bne.n	80048b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3314      	adds	r3, #20
 8004922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800492a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800492e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e1      	bne.n	8004902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3314      	adds	r3, #20
 8004944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800494e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3314      	adds	r3, #20
 800495e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e3      	bne.n	800493e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004996:	f023 0310 	bic.w	r3, r3, #16
 800499a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80049aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e3      	bne.n	8004984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fd fccf 	bl	8002364 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8c0 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049dc:	e099      	b.n	8004b12 <HAL_UART_IRQHandler+0x50e>
 80049de:	bf00      	nop
 80049e0:	0800506f 	.word	0x0800506f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 808b 	beq.w	8004b16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8086 	beq.w	8004b16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a2e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	623b      	str	r3, [r7, #32]
   return(result);
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a66:	633a      	str	r2, [r7, #48]	; 0x30
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e3      	bne.n	8004a42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0310 	bic.w	r3, r3, #16
 8004a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004aac:	61fa      	str	r2, [r7, #28]
 8004aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e3      	bne.n	8004a88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f848 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004acc:	e023      	b.n	8004b16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_UART_IRQHandler+0x4ea>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fad5 	bl	8005096 <UART_Transmit_IT>
    return;
 8004aec:	e014      	b.n	8004b18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <HAL_UART_IRQHandler+0x514>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fb15 	bl	8005136 <UART_EndTransmit_IT>
    return;
 8004b0c:	e004      	b.n	8004b18 <HAL_UART_IRQHandler+0x514>
    return;
 8004b0e:	bf00      	nop
 8004b10:	e002      	b.n	8004b18 <HAL_UART_IRQHandler+0x514>
      return;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <HAL_UART_IRQHandler+0x514>
      return;
 8004b16:	bf00      	nop
  }
}
 8004b18:	37e8      	adds	r7, #232	; 0xe8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop

08004b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b090      	sub	sp, #64	; 0x40
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d137      	bne.n	8004c00 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	2200      	movs	r2, #0
 8004b94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e5      	bne.n	8004b96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bea:	61fa      	str	r2, [r7, #28]
 8004bec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	69b9      	ldr	r1, [r7, #24]
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bfe:	e002      	b.n	8004c06 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004c00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c02:	f7ff ff8d 	bl	8004b20 <HAL_UART_TxCpltCallback>
}
 8004c06:	bf00      	nop
 8004c08:	3740      	adds	r7, #64	; 0x40
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff ff89 	bl	8004b34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b09c      	sub	sp, #112	; 0x70
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d172      	bne.n	8004d2c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	2200      	movs	r2, #0
 8004c4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	667b      	str	r3, [r7, #100]	; 0x64
 8004c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ca0:	647a      	str	r2, [r7, #68]	; 0x44
 8004ca2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cca:	663b      	str	r3, [r7, #96]	; 0x60
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cd4:	633a      	str	r2, [r7, #48]	; 0x30
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d119      	bne.n	8004d2c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d18:	61fa      	str	r2, [r7, #28]
 8004d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	617b      	str	r3, [r7, #20]
   return(result);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d3c:	f7ff ff0e 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d40:	e002      	b.n	8004d48 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d44:	f7fb fc34 	bl	80005b0 <HAL_UART_RxCpltCallback>
}
 8004d48:	bf00      	nop
 8004d4a:	3770      	adds	r7, #112	; 0x70
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d108      	bne.n	8004d78 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4619      	mov	r1, r3
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fef3 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d76:	e002      	b.n	8004d7e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fb fba3 	bl	80004c4 <HAL_UART_RxHalfCpltCallback>
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b21      	cmp	r3, #33	; 0x21
 8004db8:	d108      	bne.n	8004dcc <UART_DMAError+0x46>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004dc6:	68b8      	ldr	r0, [r7, #8]
 8004dc8:	f000 f8c6 	bl	8004f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b22      	cmp	r3, #34	; 0x22
 8004dec:	d108      	bne.n	8004e00 <UART_DMAError+0x7a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004dfa:	68b8      	ldr	r0, [r7, #8]
 8004dfc:	f000 f8d4 	bl	8004fa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f043 0210 	orr.w	r2, r3, #16
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e0c:	68b8      	ldr	r0, [r7, #8]
 8004e0e:	f7ff fe9b 	bl	8004b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b098      	sub	sp, #96	; 0x60
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2222      	movs	r2, #34	; 0x22
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	4a40      	ldr	r2, [pc, #256]	; (8004f4c <UART_Start_Receive_DMA+0x130>)
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <UART_Start_Receive_DMA+0x134>)
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	4a3e      	ldr	r2, [pc, #248]	; (8004f54 <UART_Start_Receive_DMA+0x138>)
 8004e5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	2200      	movs	r2, #0
 8004e62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	f7fd fa1a 	bl	80022b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d019      	beq.n	8004eda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ecc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004efa:	63ba      	str	r2, [r7, #56]	; 0x38
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f24:	653b      	str	r3, [r7, #80]	; 0x50
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6a39      	ldr	r1, [r7, #32]
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3760      	adds	r7, #96	; 0x60
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	08004c2b 	.word	0x08004c2b
 8004f50:	08004d51 	.word	0x08004d51
 8004f54:	08004d87 	.word	0x08004d87

08004f58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	61ba      	str	r2, [r7, #24]
 8004f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f9c:	bf00      	nop
 8004f9e:	3724      	adds	r7, #36	; 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b095      	sub	sp, #84	; 0x54
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fd0:	643a      	str	r2, [r7, #64]	; 0x40
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800500a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e5      	bne.n	8004fe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	2b01      	cmp	r3, #1
 800501e:	d119      	bne.n	8005054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f023 0310 	bic.w	r3, r3, #16
 8005036:	647b      	str	r3, [r7, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005040:	61ba      	str	r2, [r7, #24]
 8005042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6979      	ldr	r1, [r7, #20]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	613b      	str	r3, [r7, #16]
   return(result);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005062:	bf00      	nop
 8005064:	3754      	adds	r7, #84	; 0x54
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff fd5d 	bl	8004b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b21      	cmp	r3, #33	; 0x21
 80050a8:	d13e      	bne.n	8005128 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	d114      	bne.n	80050de <UART_Transmit_IT+0x48>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]
 80050dc:	e008      	b.n	80050f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	1c59      	adds	r1, r3, #1
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6211      	str	r1, [r2, #32]
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4619      	mov	r1, r3
 80050fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fce2 	bl	8004b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b08c      	sub	sp, #48	; 0x30
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b22      	cmp	r3, #34	; 0x22
 8005178:	f040 80ab 	bne.w	80052d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005184:	d117      	bne.n	80051b6 <UART_Receive_IT+0x50>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d113      	bne.n	80051b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
 80051b4:	e026      	b.n	8005204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c8:	d007      	beq.n	80051da <UART_Receive_IT+0x74>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <UART_Receive_IT+0x82>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e008      	b.n	80051fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29b      	uxth	r3, r3
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4619      	mov	r1, r3
 8005212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005214:	2b00      	cmp	r3, #0
 8005216:	d15a      	bne.n	80052ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0220 	bic.w	r2, r2, #32
 8005226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	2b01      	cmp	r3, #1
 8005256:	d135      	bne.n	80052c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	613b      	str	r3, [r7, #16]
   return(result);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527e:	623a      	str	r2, [r7, #32]
 8005280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	69f9      	ldr	r1, [r7, #28]
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	61bb      	str	r3, [r7, #24]
   return(result);
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d10a      	bne.n	80052b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fc4d 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
 80052c2:	e002      	b.n	80052ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fb f973 	bl	80005b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e002      	b.n	80052d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3730      	adds	r7, #48	; 0x30
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e0:	b0c0      	sub	sp, #256	; 0x100
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	68d9      	ldr	r1, [r3, #12]
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	ea40 0301 	orr.w	r3, r0, r1
 8005304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	431a      	orrs	r2, r3
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	431a      	orrs	r2, r3
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005334:	f021 010c 	bic.w	r1, r1, #12
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005342:	430b      	orrs	r3, r1
 8005344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	6999      	ldr	r1, [r3, #24]
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	ea40 0301 	orr.w	r3, r0, r1
 8005362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <UART_SetConfig+0x2cc>)
 800536c:	429a      	cmp	r2, r3
 800536e:	d005      	beq.n	800537c <UART_SetConfig+0xa0>
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b8d      	ldr	r3, [pc, #564]	; (80055ac <UART_SetConfig+0x2d0>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d104      	bne.n	8005386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fe f942 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8005380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005384:	e003      	b.n	800538e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005386:	f7fe f929 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 800538a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005398:	f040 810c 	bne.w	80055b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800539c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ae:	4622      	mov	r2, r4
 80053b0:	462b      	mov	r3, r5
 80053b2:	1891      	adds	r1, r2, r2
 80053b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80053b6:	415b      	adcs	r3, r3
 80053b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053be:	4621      	mov	r1, r4
 80053c0:	eb12 0801 	adds.w	r8, r2, r1
 80053c4:	4629      	mov	r1, r5
 80053c6:	eb43 0901 	adc.w	r9, r3, r1
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053de:	4690      	mov	r8, r2
 80053e0:	4699      	mov	r9, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	eb18 0303 	adds.w	r3, r8, r3
 80053e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053ec:	462b      	mov	r3, r5
 80053ee:	eb49 0303 	adc.w	r3, r9, r3
 80053f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800540a:	460b      	mov	r3, r1
 800540c:	18db      	adds	r3, r3, r3
 800540e:	653b      	str	r3, [r7, #80]	; 0x50
 8005410:	4613      	mov	r3, r2
 8005412:	eb42 0303 	adc.w	r3, r2, r3
 8005416:	657b      	str	r3, [r7, #84]	; 0x54
 8005418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800541c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005420:	f7fa fed2 	bl	80001c8 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <UART_SetConfig+0x2d4>)
 800542a:	fba3 2302 	umull	r2, r3, r3, r2
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	011c      	lsls	r4, r3, #4
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800543c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	64b9      	str	r1, [r7, #72]	; 0x48
 800544c:	415b      	adcs	r3, r3
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005454:	4641      	mov	r1, r8
 8005456:	eb12 0a01 	adds.w	sl, r2, r1
 800545a:	4649      	mov	r1, r9
 800545c:	eb43 0b01 	adc.w	fp, r3, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800546c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005474:	4692      	mov	sl, r2
 8005476:	469b      	mov	fp, r3
 8005478:	4643      	mov	r3, r8
 800547a:	eb1a 0303 	adds.w	r3, sl, r3
 800547e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005482:	464b      	mov	r3, r9
 8005484:	eb4b 0303 	adc.w	r3, fp, r3
 8005488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800549c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054a0:	460b      	mov	r3, r1
 80054a2:	18db      	adds	r3, r3, r3
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
 80054a6:	4613      	mov	r3, r2
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
 80054ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054b6:	f7fa fe87 	bl	80001c8 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4611      	mov	r1, r2
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <UART_SetConfig+0x2d4>)
 80054c2:	fba3 2301 	umull	r2, r3, r3, r1
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2264      	movs	r2, #100	; 0x64
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	1acb      	subs	r3, r1, r3
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <UART_SetConfig+0x2d4>)
 80054d8:	fba3 2302 	umull	r2, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054e4:	441c      	add	r4, r3
 80054e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	1891      	adds	r1, r2, r2
 80054fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005500:	415b      	adcs	r3, r3
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005508:	4641      	mov	r1, r8
 800550a:	1851      	adds	r1, r2, r1
 800550c:	6339      	str	r1, [r7, #48]	; 0x30
 800550e:	4649      	mov	r1, r9
 8005510:	414b      	adcs	r3, r1
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005520:	4659      	mov	r1, fp
 8005522:	00cb      	lsls	r3, r1, #3
 8005524:	4651      	mov	r1, sl
 8005526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552a:	4651      	mov	r1, sl
 800552c:	00ca      	lsls	r2, r1, #3
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	4603      	mov	r3, r0
 8005534:	4642      	mov	r2, r8
 8005536:	189b      	adds	r3, r3, r2
 8005538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800553c:	464b      	mov	r3, r9
 800553e:	460a      	mov	r2, r1
 8005540:	eb42 0303 	adc.w	r3, r2, r3
 8005544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800556e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005572:	f7fa fe29 	bl	80001c8 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <UART_SetConfig+0x2d4>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	; 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3332      	adds	r3, #50	; 0x32
 800558e:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <UART_SetConfig+0x2d4>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 0207 	and.w	r2, r3, #7
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4422      	add	r2, r4
 80055a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055a4:	e106      	b.n	80057b4 <UART_SetConfig+0x4d8>
 80055a6:	bf00      	nop
 80055a8:	40011000 	.word	0x40011000
 80055ac:	40011400 	.word	0x40011400
 80055b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055c6:	4642      	mov	r2, r8
 80055c8:	464b      	mov	r3, r9
 80055ca:	1891      	adds	r1, r2, r2
 80055cc:	6239      	str	r1, [r7, #32]
 80055ce:	415b      	adcs	r3, r3
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055d6:	4641      	mov	r1, r8
 80055d8:	1854      	adds	r4, r2, r1
 80055da:	4649      	mov	r1, r9
 80055dc:	eb43 0501 	adc.w	r5, r3, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	00eb      	lsls	r3, r5, #3
 80055ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ee:	00e2      	lsls	r2, r4, #3
 80055f0:	4614      	mov	r4, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	4643      	mov	r3, r8
 80055f6:	18e3      	adds	r3, r4, r3
 80055f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055fc:	464b      	mov	r3, r9
 80055fe:	eb45 0303 	adc.w	r3, r5, r3
 8005602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005622:	4629      	mov	r1, r5
 8005624:	008b      	lsls	r3, r1, #2
 8005626:	4621      	mov	r1, r4
 8005628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800562c:	4621      	mov	r1, r4
 800562e:	008a      	lsls	r2, r1, #2
 8005630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005634:	f7fa fdc8 	bl	80001c8 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4b60      	ldr	r3, [pc, #384]	; (80057c0 <UART_SetConfig+0x4e4>)
 800563e:	fba3 2302 	umull	r2, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	011c      	lsls	r4, r3, #4
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	61b9      	str	r1, [r7, #24]
 8005660:	415b      	adcs	r3, r3
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005668:	4641      	mov	r1, r8
 800566a:	1851      	adds	r1, r2, r1
 800566c:	6139      	str	r1, [r7, #16]
 800566e:	4649      	mov	r1, r9
 8005670:	414b      	adcs	r3, r1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005680:	4659      	mov	r1, fp
 8005682:	00cb      	lsls	r3, r1, #3
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568a:	4651      	mov	r1, sl
 800568c:	00ca      	lsls	r2, r1, #3
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	4603      	mov	r3, r0
 8005694:	4642      	mov	r2, r8
 8005696:	189b      	adds	r3, r3, r2
 8005698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800569c:	464b      	mov	r3, r9
 800569e:	460a      	mov	r2, r1
 80056a0:	eb42 0303 	adc.w	r3, r2, r3
 80056a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056c0:	4649      	mov	r1, r9
 80056c2:	008b      	lsls	r3, r1, #2
 80056c4:	4641      	mov	r1, r8
 80056c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ca:	4641      	mov	r1, r8
 80056cc:	008a      	lsls	r2, r1, #2
 80056ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056d2:	f7fa fd79 	bl	80001c8 <__aeabi_uldivmod>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <UART_SetConfig+0x4e4>)
 80056de:	fba3 2301 	umull	r2, r3, r3, r1
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2264      	movs	r2, #100	; 0x64
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	1acb      	subs	r3, r1, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a33      	ldr	r2, [pc, #204]	; (80057c0 <UART_SetConfig+0x4e4>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056fc:	441c      	add	r4, r3
 80056fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005702:	2200      	movs	r2, #0
 8005704:	673b      	str	r3, [r7, #112]	; 0x70
 8005706:	677a      	str	r2, [r7, #116]	; 0x74
 8005708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	415b      	adcs	r3, r3
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800571c:	4641      	mov	r1, r8
 800571e:	1851      	adds	r1, r2, r1
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	4649      	mov	r1, r9
 8005724:	414b      	adcs	r3, r1
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005734:	4659      	mov	r1, fp
 8005736:	00cb      	lsls	r3, r1, #3
 8005738:	4651      	mov	r1, sl
 800573a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573e:	4651      	mov	r1, sl
 8005740:	00ca      	lsls	r2, r1, #3
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	4603      	mov	r3, r0
 8005748:	4642      	mov	r2, r8
 800574a:	189b      	adds	r3, r3, r2
 800574c:	66bb      	str	r3, [r7, #104]	; 0x68
 800574e:	464b      	mov	r3, r9
 8005750:	460a      	mov	r2, r1
 8005752:	eb42 0303 	adc.w	r3, r2, r3
 8005756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	663b      	str	r3, [r7, #96]	; 0x60
 8005762:	667a      	str	r2, [r7, #100]	; 0x64
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005770:	4649      	mov	r1, r9
 8005772:	008b      	lsls	r3, r1, #2
 8005774:	4641      	mov	r1, r8
 8005776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577a:	4641      	mov	r1, r8
 800577c:	008a      	lsls	r2, r1, #2
 800577e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005782:	f7fa fd21 	bl	80001c8 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <UART_SetConfig+0x4e4>)
 800578c:	fba3 1302 	umull	r1, r3, r3, r2
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	2164      	movs	r1, #100	; 0x64
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	3332      	adds	r3, #50	; 0x32
 800579e:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <UART_SetConfig+0x4e4>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	f003 020f 	and.w	r2, r3, #15
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4422      	add	r2, r4
 80057b2:	609a      	str	r2, [r3, #8]
}
 80057b4:	bf00      	nop
 80057b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057ba:	46bd      	mov	sp, r7
 80057bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c0:	51eb851f 	.word	0x51eb851f

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f000 f866 	bl	80058b8 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08005908 	.word	0x08005908
 8005810:	08005908 	.word	0x08005908
 8005814:	08005908 	.word	0x08005908
 8005818:	0800590c 	.word	0x0800590c

0800581c <memcpy>:
 800581c:	440a      	add	r2, r1
 800581e:	4291      	cmp	r1, r2
 8005820:	f100 33ff 	add.w	r3, r0, #4294967295
 8005824:	d100      	bne.n	8005828 <memcpy+0xc>
 8005826:	4770      	bx	lr
 8005828:	b510      	push	{r4, lr}
 800582a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005832:	4291      	cmp	r1, r2
 8005834:	d1f9      	bne.n	800582a <memcpy+0xe>
 8005836:	bd10      	pop	{r4, pc}

08005838 <lrintf>:
 8005838:	ee10 3a10 	vmov	r3, s0
 800583c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005840:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8005844:	281e      	cmp	r0, #30
 8005846:	b082      	sub	sp, #8
 8005848:	dc2f      	bgt.n	80058aa <lrintf+0x72>
 800584a:	1c41      	adds	r1, r0, #1
 800584c:	da02      	bge.n	8005854 <lrintf+0x1c>
 800584e:	2000      	movs	r0, #0
 8005850:	b002      	add	sp, #8
 8005852:	4770      	bx	lr
 8005854:	2816      	cmp	r0, #22
 8005856:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800585a:	dd0a      	ble.n	8005872 <lrintf+0x3a>
 800585c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005864:	3a96      	subs	r2, #150	; 0x96
 8005866:	fa03 f002 	lsl.w	r0, r3, r2
 800586a:	2900      	cmp	r1, #0
 800586c:	d0f0      	beq.n	8005850 <lrintf+0x18>
 800586e:	4240      	negs	r0, r0
 8005870:	e7ee      	b.n	8005850 <lrintf+0x18>
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <lrintf+0x7c>)
 8005874:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005878:	ed93 7a00 	vldr	s14, [r3]
 800587c:	ee37 0a00 	vadd.f32	s0, s14, s0
 8005880:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005884:	eddd 7a01 	vldr	s15, [sp, #4]
 8005888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800588c:	ee17 3a90 	vmov	r3, s15
 8005890:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005894:	d0db      	beq.n	800584e <lrintf+0x16>
 8005896:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800589a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800589e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80058a2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80058a6:	40d8      	lsrs	r0, r3
 80058a8:	e7df      	b.n	800586a <lrintf+0x32>
 80058aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80058ae:	ee17 0a90 	vmov	r0, s15
 80058b2:	e7cd      	b.n	8005850 <lrintf+0x18>
 80058b4:	080058f8 	.word	0x080058f8

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
