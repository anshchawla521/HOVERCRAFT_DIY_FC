
DIY_HOVERCRAFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b4  080048b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048bc  080048bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000003cc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ee22  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000260b  00000000  00000000  0002eea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a97  00000000  00000000  00032250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd3c  00000000  00000000  00032ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000117da  00000000  00000000  00052a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0a8c  00000000  00000000  000641fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003828  00000000  00000000  00124c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  001284b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800486c 	.word	0x0800486c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800486c 	.word	0x0800486c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxHalfCpltCallback>:
uint8_t gen_poly = 0xd5; //x8 + x5 + x4 + 1



void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	// just for eg
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <crsf_init>:


void crsf_init()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
//	(&huart6)->hdmarx->XferCpltCallback = check_and_decode_crsf;
	HAL_UART_Receive_DMA(&huart6, rx_buffer, 128);
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	4903      	ldr	r1, [pc, #12]	; (80004ec <crsf_init+0x14>)
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <crsf_init+0x18>)
 80004e2:	f003 fc0b 	bl	8003cfc <HAL_UART_Receive_DMA>

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000304 	.word	0x20000304

080004f4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	72fb      	strb	r3, [r7, #11]
	// check if its a valid packet
	for(int i = 0 ; i < sizeof(rx_buffer) ; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	e040      	b.n	8000588 <HAL_UART_RxCpltCallback+0x94>
	{
		if (rx_buffer[i] == 0xC8)
 8000506:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <HAL_UART_RxCpltCallback+0xac>)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2bc8      	cmp	r3, #200	; 0xc8
 8000510:	d137      	bne.n	8000582 <HAL_UART_RxCpltCallback+0x8e>
		{
			length = rx_buffer[i+1];
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <HAL_UART_RxCpltCallback+0xac>)
 8000518:	5cd3      	ldrb	r3, [r2, r3]
 800051a:	72fb      	strb	r3, [r7, #11]
			// check length
			//then get all packets and check CRC if pass then packet valid
			if((length+i+2 > sizeof(rx_buffer)-1) || (i+1 > sizeof(rx_buffer)-1))
 800051c:	7afa      	ldrb	r2, [r7, #11]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	3302      	adds	r3, #2
 8000524:	2b7f      	cmp	r3, #127	; 0x7f
 8000526:	d82b      	bhi.n	8000580 <HAL_UART_RxCpltCallback+0x8c>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	2b7f      	cmp	r3, #127	; 0x7f
 800052e:	d827      	bhi.n	8000580 <HAL_UART_RxCpltCallback+0x8c>
			{
				// handel cases with non full packets
				// can occur when the whole packet crc fails
				continue;
			}
			if(calculateCRC(i+2,length) == 0) // start crc calculation from type byte
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3302      	adds	r3, #2
 8000534:	7afa      	ldrb	r2, [r7, #11]
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f839 	bl	80005b0 <calculateCRC>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d11e      	bne.n	8000582 <HAL_UART_RxCpltCallback+0x8e>
			{
				// valid packet
				if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3302      	adds	r3, #2
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <HAL_UART_RxCpltCallback+0xac>)
 800054a:	5cd3      	ldrb	r3, [r2, r3]
 800054c:	2b16      	cmp	r3, #22
 800054e:	d118      	bne.n	8000582 <HAL_UART_RxCpltCallback+0x8e>
 8000550:	7afb      	ldrb	r3, [r7, #11]
 8000552:	2b18      	cmp	r3, #24
 8000554:	d115      	bne.n	8000582 <HAL_UART_RxCpltCallback+0x8e>
				{
					memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3303      	adds	r3, #3
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <HAL_UART_RxCpltCallback+0xac>)
 800055c:	4413      	add	r3, r2
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <HAL_UART_RxCpltCallback+0xb0>)
 8000560:	4614      	mov	r4, r2
 8000562:	461d      	mov	r5, r3
 8000564:	6828      	ldr	r0, [r5, #0]
 8000566:	6869      	ldr	r1, [r5, #4]
 8000568:	68aa      	ldr	r2, [r5, #8]
 800056a:	68eb      	ldr	r3, [r5, #12]
 800056c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056e:	6928      	ldr	r0, [r5, #16]
 8000570:	6020      	str	r0, [r4, #0]
 8000572:	8aab      	ldrh	r3, [r5, #20]
 8000574:	80a3      	strh	r3, [r4, #4]
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000576:	2110      	movs	r1, #16
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <HAL_UART_RxCpltCallback+0xb4>)
 800057a:	f002 f82c 	bl	80025d6 <HAL_GPIO_TogglePin>
 800057e:	e000      	b.n	8000582 <HAL_UART_RxCpltCallback+0x8e>
				continue;
 8000580:	bf00      	nop
	for(int i = 0 ; i < sizeof(rx_buffer) ; i++)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2b7f      	cmp	r3, #127	; 0x7f
 800058c:	d9bb      	bls.n	8000506 <HAL_UART_RxCpltCallback+0x12>
//		rx_buffer[i] = 0; // clear buffer
//	}

//	__HAL_DMA_DISABLE(huart6.hdmarx); // workaround for clearing the interrupt bit
	// after processing re-enable DMA for new data
	HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	4903      	ldr	r1, [pc, #12]	; (80005a0 <HAL_UART_RxCpltCallback+0xac>)
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <HAL_UART_RxCpltCallback+0xb8>)
 8000594:	f003 fbb2 	bl	8003cfc <HAL_UART_Receive_DMA>
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bdb0      	pop	{r4, r5, r7, pc}
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	200000ac 	.word	0x200000ac
 80005a8:	40020400 	.word	0x40020400
 80005ac:	20000304 	.word	0x20000304

080005b0 <calculateCRC>:


uint8_t calculateCRC( int start_index , int bytes)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]

	// CRC is calculated for payload + type
    uint8_t dividend = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	77fb      	strb	r3, [r7, #31]
    uint8_t next_byte;
    int numberOfBytesProcessed = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
    int numberOfBitsLeft = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
    bool isMsbOne = false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
    for(int i = 0 ; i <9999 ; i++) // avoiding infinite loops
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	e03e      	b.n	800064e <calculateCRC+0x9e>
    {

        if (numberOfBitsLeft <=0 && numberOfBytesProcessed >= bytes)
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dc03      	bgt.n	80005de <calculateCRC+0x2e>
 80005d6:	69ba      	ldr	r2, [r7, #24]
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	da3d      	bge.n	800065a <calculateCRC+0xaa>
        {
            // ALL BITS PROCEESSED
            break;
        }
        if (numberOfBitsLeft <= 0 && numberOfBytesProcessed < bytes)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	dc0e      	bgt.n	8000602 <calculateCRC+0x52>
 80005e4:	69ba      	ldr	r2, [r7, #24]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	da0a      	bge.n	8000602 <calculateCRC+0x52>
        {
            // load bits into buffer if empty and if bits available
            next_byte = rx_buffer[start_index + numberOfBytesProcessed];
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a1e      	ldr	r2, [pc, #120]	; (800066c <calculateCRC+0xbc>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	77bb      	strb	r3, [r7, #30]
            numberOfBytesProcessed++;
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	3301      	adds	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
            numberOfBitsLeft =8;
 80005fe:	2308      	movs	r3, #8
 8000600:	617b      	str	r3, [r7, #20]
        }

        isMsbOne = dividend & 0b10000000;
 8000602:	7ffb      	ldrb	r3, [r7, #31]
 8000604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]
        dividend = dividend << 1 | (next_byte>>7);   // shift First bit of Next_byte into dividend
 8000612:	7ffb      	ldrb	r3, [r7, #31]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b25a      	sxtb	r2, r3
 8000618:	7fbb      	ldrb	r3, [r7, #30]
 800061a:	09db      	lsrs	r3, r3, #7
 800061c:	b2db      	uxtb	r3, r3
 800061e:	b25b      	sxtb	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b25b      	sxtb	r3, r3
 8000624:	77fb      	strb	r3, [r7, #31]
        next_byte = next_byte << 1;  // Shift out the first bit
 8000626:	7fbb      	ldrb	r3, [r7, #30]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	77bb      	strb	r3, [r7, #30]
        numberOfBitsLeft --;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3b01      	subs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
        dividend = isMsbOne ? dividend ^ gen_poly : dividend; //if bit aligning with MSB of gen_poly is 1 then do XOR
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <calculateCRC+0x94>
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <calculateCRC+0xc0>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	7ffb      	ldrb	r3, [r7, #31]
 800063e:	4053      	eors	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	e000      	b.n	8000646 <calculateCRC+0x96>
 8000644:	7ffb      	ldrb	r3, [r7, #31]
 8000646:	77fb      	strb	r3, [r7, #31]
    for(int i = 0 ; i <9999 ; i++) // avoiding infinite loops
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	3301      	adds	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	f242 720e 	movw	r2, #9998	; 0x270e
 8000654:	4293      	cmp	r3, r2
 8000656:	ddbb      	ble.n	80005d0 <calculateCRC+0x20>
 8000658:	e000      	b.n	800065c <calculateCRC+0xac>
            break;
 800065a:	bf00      	nop

    }

    return dividend;
 800065c:	7ffb      	ldrb	r3, [r7, #31]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3724      	adds	r7, #36	; 0x24
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000000 	.word	0x20000000

08000674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_DMA_Init+0x78>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <MX_DMA_Init+0x78>)
 8000684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_DMA_Init+0x78>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA_Init+0x78>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_DMA_Init+0x78>)
 80006a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_DMA_Init+0x78>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200d      	movs	r0, #13
 80006b8:	f001 fa31 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006bc:	200d      	movs	r0, #13
 80006be:	f001 fa4a 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2011      	movs	r0, #17
 80006c8:	f001 fa29 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006cc:	2011      	movs	r0, #17
 80006ce:	f001 fa42 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2039      	movs	r0, #57	; 0x39
 80006d8:	f001 fa21 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006dc:	2039      	movs	r0, #57	; 0x39
 80006de:	f001 fa3a 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f84b 	bl	8000798 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000702:	f000 f8d5 	bl	80008b0 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000706:	f000 f8e9 	bl	80008dc <dshot_start_pwm>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <dshot_write>:

void dshot_write(uint16_t *motor_value , bool dshot_telemetry)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	last_sent_motor_value[0] = motor_value[0];
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	881a      	ldrh	r2, [r3, #0]
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <dshot_write+0x48>)
 8000726:	801a      	strh	r2, [r3, #0]
	last_sent_motor_value[1] = motor_value[1];
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	885a      	ldrh	r2, [r3, #2]
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <dshot_write+0x48>)
 800072e:	805a      	strh	r2, [r3, #2]
	last_sent_motor_value[2] = motor_value[2];
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	889a      	ldrh	r2, [r3, #4]
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <dshot_write+0x48>)
 8000736:	809a      	strh	r2, [r3, #4]
	last_sent_motor_value[3] = motor_value[3];
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	88da      	ldrh	r2, [r3, #6]
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <dshot_write+0x48>)
 800073e:	80da      	strh	r2, [r3, #6]
	dshot_prepare_dmabuffer_all(motor_value, dshot_telemetry);
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f943 	bl	80009d0 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800074a:	f000 f95f 	bl	8000a0c <dshot_dma_start>
	dshot_enable_dma_request();
 800074e:	f000 f97d 	bl	8000a4c <dshot_enable_dma_request>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000158 	.word	0x20000158

08000760 <dshot_choose_type>:

/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d003      	beq.n	8000778 <dshot_choose_type+0x18>
 8000770:	2b02      	cmp	r3, #2
 8000772:	d103      	bne.n	800077c <dshot_choose_type+0x1c>
	{
	case (DSHOT600):
		return DSHOT600_HZ;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <dshot_choose_type+0x2c>)
 8000776:	e002      	b.n	800077e <dshot_choose_type+0x1e>

	case (DSHOT300):
		return DSHOT300_HZ;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <dshot_choose_type+0x30>)
 800077a:	e000      	b.n	800077e <dshot_choose_type+0x1e>

	default:
	case (DSHOT150):
		return DSHOT150_HZ;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <dshot_choose_type+0x34>)
	}
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	00b71b00 	.word	0x00b71b00
 8000790:	005b8d80 	.word	0x005b8d80
 8000794:	002dc6c0 	.word	0x002dc6c0

08000798 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	ed2d 8b02 	vpush	{d8}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <dshot_set_timer+0x80>)
 80007a8:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float)timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffd2 	bl	8000760 <dshot_choose_type>
 80007bc:	ee07 0a90 	vmov	s15, r0
 80007c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007c4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80007c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800081c <dshot_set_timer+0x84>
 80007cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007d0:	eeb0 0a67 	vmov.f32	s0, s15
 80007d4:	f004 f80a 	bl	80047ec <lrintf>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29b      	uxth	r3, r3
 80007dc:	3b01      	subs	r3, #1
 80007de:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <dshot_set_timer+0x88>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	897a      	ldrh	r2, [r7, #10]
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <dshot_set_timer+0x88>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2214      	movs	r2, #20
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <dshot_set_timer+0x88>)
 80007f2:	2214      	movs	r2, #20
 80007f4:	60da      	str	r2, [r3, #12]
	// motor2
	// __HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
	// __HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <dshot_set_timer+0x8c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	897a      	ldrh	r2, [r7, #10]
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <dshot_set_timer+0x8c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2214      	movs	r2, #20
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <dshot_set_timer+0x8c>)
 8000808:	2214      	movs	r2, #20
 800080a:	60da      	str	r2, [r3, #12]

	// // motor4
	// __HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
	// __HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	ecbd 8b02 	vpop	{d8}
 8000816:	bd80      	pop	{r7, pc}
 8000818:	02dc6c00 	.word	0x02dc6c00
 800081c:	3c23d70a 	.word	0x3c23d70a
 8000820:	200001b4 	.word	0x200001b4
 8000824:	2000016c 	.word	0x2000016c

08000828 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000834:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	d108      	bne.n	8000852 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800084e:	60da      	str	r2, [r3, #12]
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000850:	e028      	b.n	80008a4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	d108      	bne.n	800086e <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68da      	ldr	r2, [r3, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800086a:	60da      	str	r2, [r3, #12]
}
 800086c:	e01a      	b.n	80008a4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	d108      	bne.n	800088a <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68da      	ldr	r2, [r3, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000886:	60da      	str	r2, [r3, #12]
}
 8000888:	e00c      	b.n	80008a4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d107      	bne.n	80008a4 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008a2:	60da      	str	r2, [r3, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
// TIM_DMA_ID_CCx depends on timer channel
#ifdef MOTOR_1_TIM
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <dshot_put_tc_callback_function+0x20>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <dshot_put_tc_callback_function+0x24>)
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_2_TIM
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
#endif
#ifdef MOTOR_3_TIM
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <dshot_put_tc_callback_function+0x28>)
 80008be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <dshot_put_tc_callback_function+0x24>)
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_4_TIM
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200001b4 	.word	0x200001b4
 80008d4:	08000829 	.word	0x08000829
 80008d8:	2000016c 	.word	0x2000016c

080008dc <dshot_start_pwm>:

static void dshot_start_pwm()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	// Start the timer channel now.
	// Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 80008e0:	210c      	movs	r1, #12
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <dshot_start_pwm+0x18>)
 80008e4:	f002 fbd2 	bl	800308c <HAL_TIM_PWM_Start>
	// HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 80008e8:	210c      	movs	r1, #12
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <dshot_start_pwm+0x1c>)
 80008ec:	f002 fbce 	bl	800308c <HAL_TIM_PWM_Start>
	// HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001b4 	.word	0x200001b4
 80008f8:	2000016c 	.word	0x2000016c

080008fc <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value , bool dshot_telemetry)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	80fb      	strh	r3, [r7, #6]
 8000908:	4613      	mov	r3, r2
 800090a:	717b      	strb	r3, [r7, #5]
	uint16_t packet;


	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	b21a      	sxth	r2, r3
 8000912:	797b      	ldrb	r3, [r7, #5]
 8000914:	b21b      	sxth	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	817b      	strh	r3, [r7, #10]

	// compute checksum
	unsigned csum = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000920:	897b      	ldrh	r3, [r7, #10]
 8000922:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 3; i++)
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e009      	b.n	800093e <dshot_prepare_packet+0x42>
	{
		csum ^= csum_data; // xor data by nibbles
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4053      	eors	r3, r2
 8000930:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b02      	cmp	r3, #2
 8000942:	ddf2      	ble.n	800092a <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800094c:	897b      	ldrh	r3, [r7, #10]
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	b29a      	uxth	r2, r3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	b29b      	uxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	817b      	strh	r3, [r7, #10]

	return packet;
 800095a:	897b      	ldrh	r3, [r7, #10]
}
 800095c:	4618      	mov	r0, r3
 800095e:	371c      	adds	r7, #28
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t *motor_dmabuffer, uint16_t value , bool dshot_telemetry)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	707b      	strb	r3, [r7, #1]
	uint16_t packet;
	packet = dshot_prepare_packet(value ,dshot_telemetry );
 8000978:	787a      	ldrb	r2, [r7, #1]
 800097a:	887b      	ldrh	r3, [r7, #2]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ffbc 	bl	80008fc <dshot_prepare_packet>
 8000984:	4603      	mov	r3, r0
 8000986:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < 16; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	e011      	b.n	80009b2 <dshot_prepare_dmabuffer+0x4a>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 800098e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000992:	2b00      	cmp	r3, #0
 8000994:	da01      	bge.n	800099a <dshot_prepare_dmabuffer+0x32>
 8000996:	220e      	movs	r2, #14
 8000998:	e000      	b.n	800099c <dshot_prepare_dmabuffer+0x34>
 800099a:	2207      	movs	r2, #7
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	440b      	add	r3, r1
 80009a4:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 80009a6:	89fb      	ldrh	r3, [r7, #14]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	ddea      	ble.n	800098e <dshot_prepare_dmabuffer+0x26>
	}

	motor_dmabuffer[16] = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3340      	adds	r3, #64	; 0x40
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3344      	adds	r3, #68	; 0x44
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t *motor_value , bool dshot_telemetry)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0], dshot_telemetry);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	78fa      	ldrb	r2, [r7, #3]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4807      	ldr	r0, [pc, #28]	; (8000a04 <dshot_prepare_dmabuffer_all+0x34>)
 80009e6:	f7ff ffbf 	bl	8000968 <dshot_prepare_dmabuffer>
	// dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2] ,dshot_telemetry);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3304      	adds	r3, #4
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	78fa      	ldrb	r2, [r7, #3]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <dshot_prepare_dmabuffer_all+0x38>)
 80009f6:	f7ff ffb7 	bl	8000968 <dshot_prepare_dmabuffer>
	// dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000c4 	.word	0x200000c4
 8000a08:	2000010c 	.word	0x2000010c

08000a0c <dshot_dma_start>:

static void dshot_dma_start()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <dshot_dma_start+0x30>)
 8000a12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a14:	490a      	ldr	r1, [pc, #40]	; (8000a40 <dshot_dma_start+0x34>)
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <dshot_dma_start+0x30>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3340      	adds	r3, #64	; 0x40
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	2312      	movs	r3, #18
 8000a20:	f001 f962 	bl	8001ce8 <HAL_DMA_Start_IT>
	// HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <dshot_dma_start+0x38>)
 8000a26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a28:	4907      	ldr	r1, [pc, #28]	; (8000a48 <dshot_dma_start+0x3c>)
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <dshot_dma_start+0x38>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3340      	adds	r3, #64	; 0x40
 8000a30:	461a      	mov	r2, r3
 8000a32:	2312      	movs	r3, #18
 8000a34:	f001 f958 	bl	8001ce8 <HAL_DMA_Start_IT>
	// HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001b4 	.word	0x200001b4
 8000a40:	200000c4 	.word	0x200000c4
 8000a44:	2000016c 	.word	0x2000016c
 8000a48:	2000010c 	.word	0x2000010c

08000a4c <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <dshot_enable_dma_request+0x30>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <dshot_enable_dma_request+0x30>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a5e:	60da      	str	r2, [r3, #12]
	// __HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC4);
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <dshot_enable_dma_request+0x34>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68da      	ldr	r2, [r3, #12]
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <dshot_enable_dma_request+0x34>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a6e:	60da      	str	r2, [r3, #12]
	// __HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200001b4 	.word	0x200001b4
 8000a80:	2000016c 	.word	0x2000016c

08000a84 <dshot_arm>:

void dshot_arm()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
	uint16_t arr[4] = {48,48,48,48};
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <dshot_arm+0x48>)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a92:	e883 0003 	stmia.w	r3, {r0, r1}
	is_armed = true;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <dshot_arm+0x4c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < 2000 ; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e00a      	b.n	8000ab8 <dshot_arm+0x34>
	  {
		  dshot_write(arr , false);
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fe34 	bl	8000714 <dshot_write>
		  HAL_Delay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 ff37 	bl	8001920 <HAL_Delay>
	for(int i =0 ; i < 2000 ; i++)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000abe:	dbf0      	blt.n	8000aa2 <dshot_arm+0x1e>
		  // send 0 for first 2 seconds

	  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08004884 	.word	0x08004884
 8000ad0:	20000154 	.word	0x20000154

08000ad4 <dshot_reverse_direction>:
			  // send 0 for first 2 seconds
		  }
	save_settings(motor_number);
}
void dshot_reverse_direction(uint8_t motor_number)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	last_sent_motor_value[motor_number] = 21;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <dshot_reverse_direction+0x44>)
 8000ae2:	2115      	movs	r1, #21
 8000ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i =0 ; i < 10 ; i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e009      	b.n	8000b02 <dshot_reverse_direction+0x2e>
		  {
			  dshot_write(last_sent_motor_value , true);
 8000aee:	2101      	movs	r1, #1
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <dshot_reverse_direction+0x44>)
 8000af2:	f7ff fe0f 	bl	8000714 <dshot_write>
			  HAL_Delay(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 ff12 	bl	8001920 <HAL_Delay>
	for(int i =0 ; i < 10 ; i++)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	ddf2      	ble.n	8000aee <dshot_reverse_direction+0x1a>
			  // send 0 for first 2 seconds
		  }
	save_settings(motor_number);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f84a 	bl	8000ba4 <save_settings>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000158 	.word	0x20000158

08000b1c <dshot_normal_direction>:
void dshot_normal_direction(uint8_t motor_number)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	last_sent_motor_value[motor_number] = 20;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <dshot_normal_direction+0x44>)
 8000b2a:	2114      	movs	r1, #20
 8000b2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i =0 ; i < 10 ; i++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e009      	b.n	8000b4a <dshot_normal_direction+0x2e>
	  {
		  dshot_write(last_sent_motor_value , true);
 8000b36:	2101      	movs	r1, #1
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <dshot_normal_direction+0x44>)
 8000b3a:	f7ff fdeb 	bl	8000714 <dshot_write>
		  HAL_Delay(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 feee 	bl	8001920 <HAL_Delay>
	for(int i =0 ; i < 10 ; i++)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b09      	cmp	r3, #9
 8000b4e:	ddf2      	ble.n	8000b36 <dshot_normal_direction+0x1a>
		  // send 0 for first 2 seconds
	  }
	save_settings(motor_number);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f826 	bl	8000ba4 <save_settings>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000158 	.word	0x20000158

08000b64 <dshot_beep>:
void dshot_beep(uint8_t motor_number ,uint8_t beep_number)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	beep_number = beep_number < 0 ? 0:beep_number;
	beep_number = beep_number > 5 ? 5:beep_number;
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	bf28      	it	cs
 8000b7a:	2305      	movcs	r3, #5
 8000b7c:	71bb      	strb	r3, [r7, #6]

	last_sent_motor_value[motor_number] = 2;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <dshot_beep+0x3c>)
 8000b82:	2102      	movs	r1, #2
 8000b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dshot_write(last_sent_motor_value,true);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <dshot_beep+0x3c>)
 8000b8c:	f7ff fdc2 	bl	8000714 <dshot_write>
	HAL_Delay(100);
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f000 fec5 	bl	8001920 <HAL_Delay>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000158 	.word	0x20000158

08000ba4 <save_settings>:
void save_settings(uint8_t motor_number)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	last_sent_motor_value[motor_number] = 12;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <save_settings+0x44>)
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i =0 ; i < 10 ; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e009      	b.n	8000bd2 <save_settings+0x2e>
	  {
		dshot_write(last_sent_motor_value , true);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <save_settings+0x44>)
 8000bc2:	f7ff fda7 	bl	8000714 <dshot_write>
		  HAL_Delay(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 feaa 	bl	8001920 <HAL_Delay>
	for(int i =0 ; i < 10 ; i++)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	ddf2      	ble.n	8000bbe <save_settings+0x1a>
	  }
	HAL_Delay(40); // min 35ms delay
 8000bd8:	2028      	movs	r0, #40	; 0x28
 8000bda:	f000 fea1 	bl	8001920 <HAL_Delay>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000158 	.word	0x20000158

08000bec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a25      	ldr	r2, [pc, #148]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_GPIO_Init+0xb4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2130      	movs	r1, #48	; 0x30
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_GPIO_Init+0xb8>)
 8000c78:	f001 fc94 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c7c:	2330      	movs	r3, #48	; 0x30
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_GPIO_Init+0xb8>)
 8000c94:	f001 faea 	bl	800226c <HAL_GPIO_Init>

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fdc6 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f8fa 	bl	8000ea8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f7ff ff9a 	bl	8000bec <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f7ff fcdc 	bl	8000674 <MX_DMA_Init>
  MX_TIM2_Init();
 8000cbc:	f000 fa38 	bl	8001130 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cc0:	f000 faaa 	bl	8001218 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000cc4:	f000 fb1e 	bl	8001304 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8000cc8:	f000 fcea 	bl	80016a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  	  dshot_init(DSHOT600);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fd0f 	bl	80006f0 <dshot_init>
  	  crsf_init();
 8000cd2:	f7ff fc01 	bl	80004d8 <crsf_init>

		// want the timer to run at 1 mhz (u can choose any )
		// so prescaler = 48mhz(apb1) / 1mhz = 48
	__HAL_TIM_SET_PRESCALER(&htim5, 48);
 8000cd6:	4b67      	ldr	r3, [pc, #412]	; (8000e74 <main+0x1cc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
		//for 50hz the arr value should be 1mhz/50 = 20000
	__HAL_TIM_SET_AUTORELOAD(&htim5, 20000);
 8000cde:	4b65      	ldr	r3, [pc, #404]	; (8000e74 <main+0x1cc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce8:	4b62      	ldr	r3, [pc, #392]	; (8000e74 <main+0x1cc>)
 8000cea:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000cee:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 , 1200);
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <main+0x1cc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	485d      	ldr	r0, [pc, #372]	; (8000e74 <main+0x1cc>)
 8000cfe:	f002 f9c5 	bl	800308c <HAL_TIM_PWM_Start>

	// arm esc
	dshot_arm();
 8000d02:	f7ff febf 	bl	8000a84 <dshot_arm>
	dshot_reverse_direction(0);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fee4 	bl	8000ad4 <dshot_reverse_direction>
	dshot_normal_direction(2);
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f7ff ff05 	bl	8000b1c <dshot_normal_direction>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000d12:	2120      	movs	r1, #32
 8000d14:	4858      	ldr	r0, [pc, #352]	; (8000e78 <main+0x1d0>)
 8000d16:	f001 fc5e 	bl	80025d6 <HAL_GPIO_TogglePin>

	  if(channel_data.channel5 > 1500) // arm channel
 8000d1a:	4b58      	ldr	r3, [pc, #352]	; (8000e7c <main+0x1d4>)
 8000d1c:	795a      	ldrb	r2, [r3, #5]
 8000d1e:	0912      	lsrs	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	799b      	ldrb	r3, [r3, #6]
 8000d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d96c      	bls.n	8000e10 <main+0x168>
	  {
	  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_MAX, 48, 2048, true);
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <main+0x1d4>)
 8000d38:	789a      	ldrb	r2, [r3, #2]
 8000d3a:	0992      	lsrs	r2, r2, #6
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	78d9      	ldrb	r1, [r3, #3]
 8000d40:	0089      	lsls	r1, r1, #2
 8000d42:	430a      	orrs	r2, r1
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	029b      	lsls	r3, r3, #10
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d58:	2001      	movs	r0, #1
 8000d5a:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8000e80 <main+0x1d8>
 8000d5e:	eddf 1a49 	vldr	s3, [pc, #292]	; 8000e84 <main+0x1dc>
 8000d62:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8000e88 <main+0x1e0>
 8000d66:	eddf 0a49 	vldr	s1, [pc, #292]	; 8000e8c <main+0x1e4>
 8000d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6e:	f000 f905 	bl	8000f7c <map>
 8000d72:	eef0 7a40 	vmov.f32	s15, s0
 8000d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7a:	ee17 3a90 	vmov	r3, s15
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <main+0x1e8>)
 8000d82:	809a      	strh	r2, [r3, #4]
	  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_MID, CRSF_CHANNEL_VALUE_MAX, 48, 2048, true);
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <main+0x1d4>)
 8000d86:	785a      	ldrb	r2, [r3, #1]
 8000d88:	08d2      	lsrs	r2, r2, #3
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d92:	015b      	lsls	r3, r3, #5
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da0:	2001      	movs	r0, #1
 8000da2:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8000e80 <main+0x1d8>
 8000da6:	eddf 1a37 	vldr	s3, [pc, #220]	; 8000e84 <main+0x1dc>
 8000daa:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8000e88 <main+0x1e0>
 8000dae:	eddf 0a39 	vldr	s1, [pc, #228]	; 8000e94 <main+0x1ec>
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	f000 f8e1 	bl	8000f7c <map>
 8000dba:	eef0 7a40 	vmov.f32	s15, s0
 8000dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc2:	ee17 3a90 	vmov	r3, s15
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <main+0x1e8>)
 8000dca:	801a      	strh	r2, [r3, #0]
	  angle = map(channel_data.channel1,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <main+0x1d4>)
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de4:	2001      	movs	r0, #1
 8000de6:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8000e98 <main+0x1f0>
 8000dea:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8000e9c <main+0x1f4>
 8000dee:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8000ea0 <main+0x1f8>
 8000df2:	eddf 0a26 	vldr	s1, [pc, #152]	; 8000e8c <main+0x1e4>
 8000df6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfa:	f000 f8bf 	bl	8000f7c <map>
 8000dfe:	eef0 7a40 	vmov.f32	s15, s0
 8000e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e06:	ee17 2a90 	vmov	r2, s15
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <main+0x1fc>)
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e009      	b.n	8000e24 <main+0x17c>
	  }
	  else{
		  my_motor_value[0] = DSHOT_MIN_THROTTLE;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <main+0x1e8>)
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	801a      	strh	r2, [r3, #0]
		  my_motor_value[2] = DSHOT_MIN_THROTTLE;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <main+0x1e8>)
 8000e18:	2230      	movs	r2, #48	; 0x30
 8000e1a:	809a      	strh	r2, [r3, #4]
		  angle = 1500;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <main+0x1fc>)
 8000e1e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e22:	601a      	str	r2, [r3, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 ,angle);
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <main+0x1fc>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <main+0x1cc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
	  if(my_motor_value[0] == DSHOT_MIN_THROTTLE && my_motor_value[2] == DSHOT_MIN_THROTTLE && channel_data.channel9 > 1500 )
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <main+0x1e8>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b30      	cmp	r3, #48	; 0x30
 8000e34:	d118      	bne.n	8000e68 <main+0x1c0>
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <main+0x1e8>)
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	2b30      	cmp	r3, #48	; 0x30
 8000e3c:	d114      	bne.n	8000e68 <main+0x1c0>
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <main+0x1d4>)
 8000e40:	7ada      	ldrb	r2, [r3, #11]
 8000e42:	7b1b      	ldrb	r3, [r3, #12]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d908      	bls.n	8000e68 <main+0x1c0>
	  {
		  dshot_beep(0,2);
 8000e56:	2102      	movs	r1, #2
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fe83 	bl	8000b64 <dshot_beep>
		  dshot_beep(2,2);
 8000e5e:	2102      	movs	r1, #2
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fe7f 	bl	8000b64 <dshot_beep>
 8000e66:	e003      	b.n	8000e70 <main+0x1c8>
	  }else{
	  dshot_write(my_motor_value , false);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <main+0x1e8>)
 8000e6c:	f7ff fc52 	bl	8000714 <dshot_write>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000e70:	e74f      	b.n	8000d12 <main+0x6a>
 8000e72:	bf00      	nop
 8000e74:	200001fc 	.word	0x200001fc
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	200000ac 	.word	0x200000ac
 8000e80:	45000000 	.word	0x45000000
 8000e84:	42400000 	.word	0x42400000
 8000e88:	44e26000 	.word	0x44e26000
 8000e8c:	433f0000 	.word	0x433f0000
 8000e90:	20000160 	.word	0x20000160
 8000e94:	44780000 	.word	0x44780000
 8000e98:	45070000 	.word	0x45070000
 8000e9c:	44520000 	.word	0x44520000
 8000ea0:	44e00000 	.word	0x44e00000
 8000ea4:	20000168 	.word	0x20000168

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 fc6c 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f1c:	23c0      	movs	r3, #192	; 0xc0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fb6d 	bl	800260c <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f38:	f000 f872 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2302      	movs	r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2103      	movs	r1, #3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fdce 	bl	8002afc <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f66:	f000 f85b 	bl	8001020 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	; 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <map>:

/* USER CODE BEGIN 4 */

float map(float value_to_map , float from_low ,float from_high , float to_low , float to_high , bool constrain_within_range)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f86:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f8a:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f8e:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f92:	ed87 2a01 	vstr	s4, [r7, #4]
 8000f96:	4603      	mov	r3, r0
 8000f98:	70fb      	strb	r3, [r7, #3]
	value_to_map = (value_to_map- from_low)*((to_high - to_low)/(from_high- from_low)) + to_low;
 8000f9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fae:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8000fb2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fbe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	edc7 7a05 	vstr	s15, [r7, #20]
	if(constrain_within_range)
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d019      	beq.n	800100c <map+0x90>
	{
		value_to_map = value_to_map > to_high ? to_high : value_to_map;
 8000fd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	dd01      	ble.n	8000fee <map+0x72>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	e000      	b.n	8000ff0 <map+0x74>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	617b      	str	r3, [r7, #20]
		value_to_map = value_to_map < to_low ? to_low : value_to_map;
 8000ff2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d501      	bpl.n	8001008 <map+0x8c>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	e000      	b.n	800100a <map+0x8e>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	617b      	str	r3, [r7, #20]
	}
	return value_to_map;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	ee07 3a90 	vmov	s15, r3
}
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 fc0a 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DMA1_Stream2_IRQHandler+0x10>)
 80010d6:	f000 fe5f 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002a4 	.word	0x200002a4

080010e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <DMA1_Stream6_IRQHandler+0x10>)
 80010ea:	f000 fe55 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000244 	.word	0x20000244

080010f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DMA2_Stream1_IRQHandler+0x10>)
 80010fe:	f000 fe4b 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000378 	.word	0x20000378

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch2_ch4;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_TIM2_Init+0xe4>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM2_Init+0xe4>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_TIM2_Init+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_TIM2_Init+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_TIM2_Init+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_TIM2_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <MX_TIM2_Init+0xe4>)
 8001188:	f001 fed8 	bl	8002f3c <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001192:	f7ff ff45 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a0:	4619      	mov	r1, r3
 80011a2:	481c      	ldr	r0, [pc, #112]	; (8001214 <MX_TIM2_Init+0xe4>)
 80011a4:	f002 f8fc 	bl	80033a0 <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011ae:	f7ff ff37 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b2:	4818      	ldr	r0, [pc, #96]	; (8001214 <MX_TIM2_Init+0xe4>)
 80011b4:	f001 ff11 	bl	8002fda <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011be:	f7ff ff2f 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	4619      	mov	r1, r3
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <MX_TIM2_Init+0xe4>)
 80011d2:	f002 fcbd 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80011dc:	f7ff ff20 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	220c      	movs	r2, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM2_Init+0xe4>)
 80011f8:	f002 f810 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001202:	f7ff ff0d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM2_Init+0xe4>)
 8001208:	f000 f9c4 	bl	8001594 <HAL_TIM_MspPostInit>

}
 800120c:	bf00      	nop
 800120e:	3738      	adds	r7, #56	; 0x38
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000016c 	.word	0x2000016c

08001218 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 0320 	add.w	r3, r7, #32
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <MX_TIM3_Init+0xe4>)
 800124a:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <MX_TIM3_Init+0xe8>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_TIM3_Init+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_TIM3_Init+0xe4>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126c:	4823      	ldr	r0, [pc, #140]	; (80012fc <MX_TIM3_Init+0xe4>)
 800126e:	f001 fe65 	bl	8002f3c <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001278:	f7ff fed2 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	4619      	mov	r1, r3
 8001288:	481c      	ldr	r0, [pc, #112]	; (80012fc <MX_TIM3_Init+0xe4>)
 800128a:	f002 f889 	bl	80033a0 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001294:	f7ff fec4 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001298:	4818      	ldr	r0, [pc, #96]	; (80012fc <MX_TIM3_Init+0xe4>)
 800129a:	f001 fe9e 	bl	8002fda <HAL_TIM_PWM_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012a4:	f7ff febc 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_TIM3_Init+0xe4>)
 80012b8:	f002 fc4a 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80012c2:	f7ff fead 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	; 0x60
 80012c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	220c      	movs	r2, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_TIM3_Init+0xe4>)
 80012de:	f001 ff9d 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80012e8:	f7ff fe9a 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <MX_TIM3_Init+0xe4>)
 80012ee:	f000 f951 	bl	8001594 <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001b4 	.word	0x200001b4
 8001300:	40000400 	.word	0x40000400

08001304 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_TIM5_Init+0xe4>)
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <MX_TIM5_Init+0xe8>)
 8001338:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <MX_TIM5_Init+0xe4>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_TIM5_Init+0xe4>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_TIM5_Init+0xe4>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_TIM5_Init+0xe4>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_TIM5_Init+0xe4>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001358:	4823      	ldr	r0, [pc, #140]	; (80013e8 <MX_TIM5_Init+0xe4>)
 800135a:	f001 fdef 	bl	8002f3c <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001364:	f7ff fe5c 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	4619      	mov	r1, r3
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <MX_TIM5_Init+0xe4>)
 8001376:	f002 f813 	bl	80033a0 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001380:	f7ff fe4e 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_TIM5_Init+0xe4>)
 8001386:	f001 fe28 	bl	8002fda <HAL_TIM_PWM_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001390:	f7ff fe46 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4619      	mov	r1, r3
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_TIM5_Init+0xe4>)
 80013a4:	f002 fbd4 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80013ae:	f7ff fe37 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b2:	2360      	movs	r3, #96	; 0x60
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM5_Init+0xe4>)
 80013ca:	f001 ff27 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80013d4:	f7ff fe24 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM5_Init+0xe4>)
 80013da:	f000 f8db 	bl	8001594 <HAL_TIM_MspPostInit>

}
 80013de:	bf00      	nop
 80013e0:	3738      	adds	r7, #56	; 0x38
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001fc 	.word	0x200001fc
 80013ec:	40000c00 	.word	0x40000c00

080013f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d14e      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a5b      	ldr	r2, [pc, #364]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b59      	ldr	r3, [pc, #356]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800141e:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001420:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_TIM_Base_MspInit+0x190>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001426:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800142a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001438:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800143a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001440:	4b4e      	ldr	r3, [pc, #312]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001446:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001448:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800144a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800145c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001460:	2204      	movs	r2, #4
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001472:	2200      	movs	r2, #0
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001476:	4841      	ldr	r0, [pc, #260]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001478:	f000 fb88 	bl	8001b8c <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8001482:	f7ff fdcd 	bl	8001020 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
 800148c:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a39      	ldr	r2, [pc, #228]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
 8001498:	4a38      	ldr	r2, [pc, #224]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800149e:	e066      	b.n	800156e <HAL_TIM_Base_MspInit+0x17e>
  else if(tim_baseHandle->Instance==TIM3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a37      	ldr	r2, [pc, #220]	; (8001584 <HAL_TIM_Base_MspInit+0x194>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d14e      	bne.n	8001548 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_TIM_Base_MspInit+0x19c>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014ce:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ee:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001504:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001508:	2204      	movs	r2, #4
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800151e:	481a      	ldr	r0, [pc, #104]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001520:	f000 fb34 	bl	8001b8c <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 800152a:	f7ff fd79 	bl	8001020 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 800153e:	621a      	str	r2, [r3, #32]
 8001540:	4a11      	ldr	r2, [pc, #68]	; (8001588 <HAL_TIM_Base_MspInit+0x198>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001546:	e012      	b.n	800156e <HAL_TIM_Base_MspInit+0x17e>
  else if(tim_baseHandle->Instance==TIM5)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_TIM_Base_MspInit+0x1a0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10d      	bne.n	800156e <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	20000244 	.word	0x20000244
 8001580:	400260a0 	.word	0x400260a0
 8001584:	40000400 	.word	0x40000400
 8001588:	200002a4 	.word	0x200002a4
 800158c:	40026040 	.word	0x40026040
 8001590:	40000c00 	.word	0x40000c00

08001594 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b4:	d11e      	bne.n	80015f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a33      	ldr	r2, [pc, #204]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d2:	2308      	movs	r3, #8
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e2:	2301      	movs	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4828      	ldr	r0, [pc, #160]	; (8001690 <HAL_TIM_MspPostInit+0xfc>)
 80015ee:	f000 fe3d 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80015f2:	e046      	b.n	8001682 <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM3)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a26      	ldr	r2, [pc, #152]	; (8001694 <HAL_TIM_MspPostInit+0x100>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d11e      	bne.n	800163c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800161a:	2302      	movs	r3, #2
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800162a:	2302      	movs	r3, #2
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4818      	ldr	r0, [pc, #96]	; (8001698 <HAL_TIM_MspPostInit+0x104>)
 8001636:	f000 fe19 	bl	800226c <HAL_GPIO_Init>
}
 800163a:	e022      	b.n	8001682 <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM5)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_TIM_MspPostInit+0x108>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d11d      	bne.n	8001682 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_TIM_MspPostInit+0xf8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001672:	2302      	movs	r3, #2
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <HAL_TIM_MspPostInit+0xfc>)
 800167e:	f000 fdf5 	bl	800226c <HAL_GPIO_Init>
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40000400 	.word	0x40000400
 8001698:	40020400 	.word	0x40020400
 800169c:	40000c00 	.word	0x40000c00

080016a0 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 420000;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016ac:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <MX_USART6_UART_Init+0x50>)
 80016ae:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016c4:	220c      	movs	r2, #12
 80016c6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART6_UART_Init+0x48>)
 80016d6:	f002 fab7 	bl	8003c48 <HAL_UART_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 80016e0:	f7ff fc9e 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000304 	.word	0x20000304
 80016ec:	40011400 	.word	0x40011400
 80016f0:	000668a0 	.word	0x000668a0

080016f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <HAL_UART_MspInit+0xe0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d15a      	bne.n	80017cc <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_UART_MspInit+0xe4>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <HAL_UART_MspInit+0xe4>)
 8001720:	f043 0320 	orr.w	r3, r3, #32
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_UART_MspInit+0xe4>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0xe4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_UART_MspInit+0xe4>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_UART_MspInit+0xe4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800175e:	2308      	movs	r3, #8
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481c      	ldr	r0, [pc, #112]	; (80017dc <HAL_UART_MspInit+0xe8>)
 800176a:	f000 fd7f 	bl	800226c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0xec>)
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_UART_MspInit+0xf0>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_UART_MspInit+0xec>)
 8001776:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800177a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_UART_MspInit+0xec>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_UART_MspInit+0xec>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0xec>)
 800178a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_UART_MspInit+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_UART_MspInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_UART_MspInit+0xec>)
 80017a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_UART_MspInit+0xec>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <HAL_UART_MspInit+0xec>)
 80017b2:	f000 f9eb 	bl	8001b8c <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80017bc:	f7ff fc30 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_UART_MspInit+0xec>)
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_UART_MspInit+0xec>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40011400 	.word	0x40011400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	20000378 	.word	0x20000378
 80017e4:	40026428 	.word	0x40026428

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff fc7b 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 ffc5 	bl	80047a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fa45 	bl	8000ca8 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800182c:	080048c4 	.word	0x080048c4
  ldr r2, =_sbss
 8001830:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001834:	200003dc 	.word	0x200003dc

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f94f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fbdc 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f967 	bl	8001b72 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f92f 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000004 	.word	0x20000004
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c
 8001904:	200003d8 	.word	0x200003d8

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200003d8 	.word	0x200003d8

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff feb6 	bl	8001908 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e099      	b.n	8001cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc8:	e00f      	b.n	8001bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bca:	f7ff fe9d 	bl	8001908 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d908      	bls.n	8001bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e078      	b.n	8001cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e8      	bne.n	8001bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_DMA_Init+0x158>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0307 	bic.w	r3, r3, #7
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d117      	bne.n	8001cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa6f 	bl	8002174 <DMA_CheckFifoParam>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001caa:	2301      	movs	r3, #1
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fa26 	bl	8002108 <DMA_CalcBaseAndBitshift>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	f010803f 	.word	0xf010803f

08001ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Start_IT+0x26>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e040      	b.n	8001d90 <HAL_DMA_Start_IT+0xa8>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d12f      	bne.n	8001d82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f9b8 	bl	80020ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0216 	orr.w	r2, r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e005      	b.n	8001d8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da4:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_DMA_IRQHandler+0x248>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a8e      	ldr	r2, [pc, #568]	; (8001fe4 <HAL_DMA_IRQHandler+0x24c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2208      	movs	r2, #8
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2201      	movs	r2, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2210      	movs	r2, #16
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d043      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03c      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2210      	movs	r2, #16
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d018      	beq.n	8001eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e01f      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e016      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808f 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8087 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	2220      	movs	r2, #32
 8001f30:	409a      	lsls	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d136      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x1da>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	223f      	movs	r2, #63	; 0x3f
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07e      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
        }
        return;
 8001fae:	e079      	b.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d031      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e02c      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
 8001fde:	bf00      	nop
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e01e      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10f      	bne.n	8002028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0210 	bic.w	r2, r2, #16
 8002016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d022      	beq.n	8002092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d307      	bcc.n	8002080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f2      	bne.n	8002064 <HAL_DMA_IRQHandler+0x2cc>
 800207e:	e000      	b.n	8002082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a4:	bf00      	nop
    }
  }
}
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d108      	bne.n	80020ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ea:	e007      	b.n	80020fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b10      	subs	r3, #16
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <DMA_CalcBaseAndBitshift+0x64>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <DMA_CalcBaseAndBitshift+0x68>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d909      	bls.n	800214a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	1d1a      	adds	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	; 0x58
 8002148:	e007      	b.n	800215a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	aaaaaaab 	.word	0xaaaaaaab
 8002170:	080048a4 	.word	0x080048a4

08002174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11f      	bne.n	80021ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d856      	bhi.n	8002242 <DMA_CheckFifoParam+0xce>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <DMA_CheckFifoParam+0x28>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021bf 	.word	0x080021bf
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	08002243 	.word	0x08002243
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d046      	beq.n	8002246 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e043      	b.n	8002246 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021c6:	d140      	bne.n	800224a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e03d      	b.n	800224a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d121      	bne.n	800221c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d837      	bhi.n	800224e <DMA_CheckFifoParam+0xda>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <DMA_CheckFifoParam+0x70>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fb 	.word	0x080021fb
 80021ec:	080021f5 	.word	0x080021f5
 80021f0:	0800220d 	.word	0x0800220d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e030      	b.n	800225c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d025      	beq.n	8002252 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220a:	e022      	b.n	8002252 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002214:	d11f      	bne.n	8002256 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800221a:	e01c      	b.n	8002256 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d903      	bls.n	800222a <DMA_CheckFifoParam+0xb6>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d003      	beq.n	8002230 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002228:	e018      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      break;
 800222e:	e015      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      break;
 8002240:	e00b      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002242:	bf00      	nop
 8002244:	e00a      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e008      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e006      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e004      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 8002252:	bf00      	nop
 8002254:	e002      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;   
 8002256:	bf00      	nop
 8002258:	e000      	b.n	800225c <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
    }
  } 
  
  return status; 
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e16b      	b.n	8002560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 815a 	bne.w	800255a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d005      	beq.n	80022be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d130      	bne.n	8002320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80b4 	beq.w	800255a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b60      	ldr	r3, [pc, #384]	; (8002578 <HAL_GPIO_Init+0x30c>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a5f      	ldr	r2, [pc, #380]	; (8002578 <HAL_GPIO_Init+0x30c>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_GPIO_Init+0x30c>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a5b      	ldr	r2, [pc, #364]	; (800257c <HAL_GPIO_Init+0x310>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_GPIO_Init+0x314>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02b      	beq.n	8002492 <HAL_GPIO_Init+0x226>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a51      	ldr	r2, [pc, #324]	; (8002584 <HAL_GPIO_Init+0x318>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d025      	beq.n	800248e <HAL_GPIO_Init+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a50      	ldr	r2, [pc, #320]	; (8002588 <HAL_GPIO_Init+0x31c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x21e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <HAL_GPIO_Init+0x320>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_GPIO_Init+0x324>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <HAL_GPIO_Init+0x328>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_GPIO_Init+0x212>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <HAL_GPIO_Init+0x32c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x20e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4b      	ldr	r2, [pc, #300]	; (800259c <HAL_GPIO_Init+0x330>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_GPIO_Init+0x20a>
 8002472:	2307      	movs	r3, #7
 8002474:	e00e      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002476:	2308      	movs	r3, #8
 8002478:	e00c      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800247a:	2306      	movs	r3, #6
 800247c:	e00a      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800247e:	2305      	movs	r3, #5
 8002480:	e008      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002482:	2304      	movs	r3, #4
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002486:	2303      	movs	r3, #3
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x228>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x228>
 8002492:	2300      	movs	r3, #0
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a4:	4935      	ldr	r1, [pc, #212]	; (800257c <HAL_GPIO_Init+0x310>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_GPIO_Init+0x334>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d6:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <HAL_GPIO_Init+0x334>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024dc:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_GPIO_Init+0x334>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_GPIO_Init+0x334>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_GPIO_Init+0x334>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_GPIO_Init+0x334>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_GPIO_Init+0x334>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_GPIO_Init+0x334>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	f67f ae90 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40021400 	.word	0x40021400
 8002598:	40021800 	.word	0x40021800
 800259c:	40021c00 	.word	0x40021c00
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	041a      	lsls	r2, r3, #16
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	400b      	ands	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e267      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d075      	beq.n	8002716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	d10b      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4b7e      	ldr	r3, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05b      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e242      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x74>
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6f      	ldr	r2, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6c      	ldr	r2, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 80026a4:	4b69      	ldr	r3, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff f920 	bl	8001908 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff f91c 	bl	8001908 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e207      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xc0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff f90c 	bl	8001908 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7ff f908 	bl	8001908 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1f3      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe8>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c7      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x244>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f8c1 	bl	8001908 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff f8bd 	bl	8001908 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a8      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x244>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f8a0 	bl	8001908 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7ff f89c 	bl	8001908 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e187      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_RCC_OscConfig+0x248>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff f880 	bl	8001908 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7ff f87c 	bl	8001908 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e167      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x240>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x200>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x248>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7ff f869 	bl	8001908 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7ff f865 	bl	8001908 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e150      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b77      	ldr	r3, [pc, #476]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a73      	ldr	r2, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7ff f825 	bl	8001908 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7ff f821 	bl	8001908 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e10c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x474>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2ea>
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x30c>
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5b      	ldr	r2, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x324>
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe ffe6 	bl	8001908 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe ffe2 	bl	8001908 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0cb      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x334>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe ffd0 	bl	8001908 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe ffcc 	bl	8001908 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0b5      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a1 	beq.w	8002aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d05c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d141      	bne.n	8002a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe ffa0 	bl	8001908 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe ff9c 	bl	8001908 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e087      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe ff75 	bl	8001908 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe ff71 	bl	8001908 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e05c      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x416>
 8002a40:	e054      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x478>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe ff5e 	bl	8001908 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe ff5a 	bl	8001908 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e045      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x470>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x444>
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e038      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d121      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe fe8c 	bl	8001908 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe fe88 	bl	8001908 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fdec 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	0800488c 	.word	0x0800488c
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b094      	sub	sp, #80	; 0x50
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80e1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0db      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d00:	e0db      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d06:	e0d8      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
 8002d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6139      	str	r1, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4651      	mov	r1, sl
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d80:	4659      	mov	r1, fp
 8002d82:	eb63 0901 	sbc.w	r9, r3, r1
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	eb18 0303 	adds.w	r3, r8, r3
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	462b      	mov	r3, r5
 8002da8:	eb49 0303 	adc.w	r3, r9, r3
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	024b      	lsls	r3, r1, #9
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	024a      	lsls	r2, r1, #9
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd8:	f7fd f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	4611      	mov	r1, r2
 8002df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	0159      	lsls	r1, r3, #5
 8002e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e12:	0150      	lsls	r0, r2, #5
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e38:	ebb2 040a 	subs.w	r4, r2, sl
 8002e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	61fa      	str	r2, [r7, #28]
 8002e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8c:	f7fd f99c 	bl	80001c8 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3750      	adds	r7, #80	; 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	0800489c 	.word	0x0800489c

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	0800489c 	.word	0x0800489c

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e041      	b.n	8002fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe fa44 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fad8 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e041      	b.n	8003070 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f839 	bl	8003078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f000 fa89 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x24>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e022      	b.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d109      	bne.n	80030ca <HAL_TIM_PWM_Start+0x3e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	e015      	b.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d109      	bne.n	80030e4 <HAL_TIM_PWM_Start+0x58>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e008      	b.n	80030f6 <HAL_TIM_PWM_Start+0x6a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07c      	b.n	80031f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Start+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310c:	e013      	b.n	8003136 <HAL_TIM_PWM_Start+0xaa>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Start+0x92>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800311c:	e00b      	b.n	8003136 <HAL_TIM_PWM_Start+0xaa>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	e003      	b.n	8003136 <HAL_TIM_PWM_Start+0xaa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fce0 	bl	8003b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <HAL_TIM_PWM_Start+0x174>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_TIM_PWM_Start+0xcc>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <HAL_TIM_PWM_Start+0x178>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_TIM_PWM_Start+0xd0>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_TIM_PWM_Start+0xd2>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_TIM_PWM_Start+0x174>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d01d      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_TIM_PWM_Start+0x17c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_TIM_PWM_Start+0x180>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIM_PWM_Start+0x184>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a16      	ldr	r2, [pc, #88]	; (8003204 <HAL_TIM_PWM_Start+0x178>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIM_PWM_Start+0x188>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x136>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_TIM_PWM_Start+0x18c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d111      	bne.n	80031e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d010      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e4:	e007      	b.n	80031f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40010000 	.word	0x40010000
 8003204:	40010400 	.word	0x40010400
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40014000 	.word	0x40014000
 8003218:	40001800 	.word	0x40001800

0800321c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003236:	2302      	movs	r3, #2
 8003238:	e0ae      	b.n	8003398 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	f200 809f 	bhi.w	8003388 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003285 	.word	0x08003285
 8003254:	08003389 	.word	0x08003389
 8003258:	08003389 	.word	0x08003389
 800325c:	08003389 	.word	0x08003389
 8003260:	080032c5 	.word	0x080032c5
 8003264:	08003389 	.word	0x08003389
 8003268:	08003389 	.word	0x08003389
 800326c:	08003389 	.word	0x08003389
 8003270:	08003307 	.word	0x08003307
 8003274:	08003389 	.word	0x08003389
 8003278:	08003389 	.word	0x08003389
 800327c:	08003389 	.word	0x08003389
 8003280:	08003347 	.word	0x08003347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f9f0 	bl	8003670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6999      	ldr	r1, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	619a      	str	r2, [r3, #24]
      break;
 80032c2:	e064      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fa40 	bl	8003750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	619a      	str	r2, [r3, #24]
      break;
 8003304:	e043      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fa95 	bl	800383c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0208 	orr.w	r2, r2, #8
 8003320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0204 	bic.w	r2, r2, #4
 8003330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69d9      	ldr	r1, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	61da      	str	r2, [r3, #28]
      break;
 8003344:	e023      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fae9 	bl	8003924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69d9      	ldr	r1, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	021a      	lsls	r2, r3, #8
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	61da      	str	r2, [r3, #28]
      break;
 8003386:	e002      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
      break;
 800338c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_ConfigClockSource+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0b4      	b.n	8003526 <HAL_TIM_ConfigClockSource+0x186>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f4:	d03e      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0xd4>
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	f200 8087 	bhi.w	800350c <HAL_TIM_ConfigClockSource+0x16c>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003402:	f000 8086 	beq.w	8003512 <HAL_TIM_ConfigClockSource+0x172>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d87f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d01a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xa6>
 8003410:	2b70      	cmp	r3, #112	; 0x70
 8003412:	d87b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d050      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x11a>
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d877      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b50      	cmp	r3, #80	; 0x50
 800341e:	d03c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xfa>
 8003420:	2b50      	cmp	r3, #80	; 0x50
 8003422:	d873      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d058      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x13a>
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d86f      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b30      	cmp	r3, #48	; 0x30
 800342e:	d064      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d86b      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d060      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d867      	bhi.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05c      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d05a      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0x15a>
 8003444:	e062      	b.n	800350c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f000 fb35 	bl	8003ac4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
      break;
 8003472:	e04f      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f000 fb1e 	bl	8003ac4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003496:	609a      	str	r2, [r3, #8]
      break;
 8003498:	e03c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 fa92 	bl	80039d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2150      	movs	r1, #80	; 0x50
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 faeb 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 80034b8:	e02c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 fab1 	bl	8003a2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2160      	movs	r1, #96	; 0x60
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fadb 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 80034d8:	e01c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f000 fa72 	bl	80039d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 facb 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 80034f8:	e00c      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f000 fac2 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 800350a:	e003      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e000      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3c      	ldr	r2, [pc, #240]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <TIM_Base_SetConfig+0x120>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <TIM_Base_SetConfig+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02b      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d027      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d023      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <TIM_Base_SetConfig+0x120>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01b      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_Base_SetConfig+0x124>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d017      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <TIM_Base_SetConfig+0x128>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <TIM_Base_SetConfig+0x12c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00f      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a26      	ldr	r2, [pc, #152]	; (8003660 <TIM_Base_SetConfig+0x130>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a25      	ldr	r2, [pc, #148]	; (8003664 <TIM_Base_SetConfig+0x134>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <TIM_Base_SetConfig+0x138>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <TIM_Base_SetConfig+0x13c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <TIM_Base_SetConfig+0x114>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <TIM_Base_SetConfig+0x124>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	615a      	str	r2, [r3, #20]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40010400 	.word	0x40010400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800
 8003664:	40001800 	.word	0x40001800
 8003668:	40001c00 	.word	0x40001c00
 800366c:	40002000 	.word	0x40002000

08003670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <TIM_OC1_SetConfig+0xd8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC1_SetConfig+0x64>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <TIM_OC1_SetConfig+0xdc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10c      	bne.n	80036ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0308 	bic.w	r3, r3, #8
 80036da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <TIM_OC1_SetConfig+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC1_SetConfig+0x8e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <TIM_OC1_SetConfig+0xdc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d111      	bne.n	8003722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800370c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f023 0210 	bic.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0320 	bic.w	r3, r3, #32
 800379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a22      	ldr	r2, [pc, #136]	; (8003834 <TIM_OC2_SetConfig+0xe4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC2_SetConfig+0x68>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <TIM_OC2_SetConfig+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <TIM_OC2_SetConfig+0xe4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC2_SetConfig+0x94>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <TIM_OC2_SetConfig+0xe8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d113      	bne.n	800380c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40010400 	.word	0x40010400

0800383c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a21      	ldr	r2, [pc, #132]	; (800391c <TIM_OC3_SetConfig+0xe0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC3_SetConfig+0x66>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <TIM_OC3_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10d      	bne.n	80038be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <TIM_OC3_SetConfig+0xe0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_OC3_SetConfig+0x92>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <TIM_OC3_SetConfig+0xe4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d113      	bne.n	80038f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40010000 	.word	0x40010000
 8003920:	40010400 	.word	0x40010400

08003924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800396e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	031b      	lsls	r3, r3, #12
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <TIM_OC4_SetConfig+0xa4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_OC4_SetConfig+0x68>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <TIM_OC4_SetConfig+0xa8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d109      	bne.n	80039a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40010400 	.word	0x40010400

080039d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 030a 	bic.w	r3, r3, #10
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b087      	sub	sp, #28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0210 	bic.w	r2, r3, #16
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f043 0307 	orr.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2201      	movs	r2, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e05a      	b.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10c      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40010400 	.word	0x40010400
 8003c40:	40014000 	.word	0x40014000
 8003c44:	40001800 	.word	0x40001800

08003c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e04a      	b.n	8003cf0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d111      	bne.n	8003c8a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8bc 	bl	8003dec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_UART_Init+0xb0>)
 8003c80:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	; 0x24
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fb02 	bl	80042ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	080016f5 	.word	0x080016f5

08003cfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d11d      	bne.n	8003d52 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_Receive_DMA+0x26>
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e016      	b.n	8003d54 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Receive_DMA+0x38>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e00f      	b.n	8003d54 <HAL_UART_Receive_DMA+0x58>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f985 	bl	8004058 <UART_Start_Receive_DMA>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	e000      	b.n	8003d54 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <UART_InitCallbacksToDefault+0x4c>)
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <UART_InitCallbacksToDefault+0x50>)
 8003dfe:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <UART_InitCallbacksToDefault+0x54>)
 8003e04:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <UART_InitCallbacksToDefault+0x58>)
 8003e0a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <UART_InitCallbacksToDefault+0x5c>)
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <UART_InitCallbacksToDefault+0x60>)
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <UART_InitCallbacksToDefault+0x64>)
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <UART_InitCallbacksToDefault+0x68>)
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <UART_InitCallbacksToDefault+0x6c>)
 8003e28:	669a      	str	r2, [r3, #104]	; 0x68

}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	08003d71 	.word	0x08003d71
 8003e3c:	08003d5d 	.word	0x08003d5d
 8003e40:	080004c5 	.word	0x080004c5
 8003e44:	080004f5 	.word	0x080004f5
 8003e48:	08003d85 	.word	0x08003d85
 8003e4c:	08003d99 	.word	0x08003d99
 8003e50:	08003dad 	.word	0x08003dad
 8003e54:	08003dc1 	.word	0x08003dc1
 8003e58:	08003dd5 	.word	0x08003dd5

08003e5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b09c      	sub	sp, #112	; 0x70
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d172      	bne.n	8003f5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ea0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ed2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f06:	633a      	str	r2, [r7, #48]	; 0x30
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d119      	bne.n	8003f5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f023 0310 	bic.w	r3, r3, #16
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f4a:	61fa      	str	r2, [r7, #28]
 8003f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	617b      	str	r3, [r7, #20]
   return(result);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f6c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003f6e:	4611      	mov	r1, r2
 8003f70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f72:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f74:	e003      	b.n	8003f7e <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 8003f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f7c:	4798      	blx	r3
}
 8003f7e:	bf00      	nop
 8003f80:	3770      	adds	r7, #112	; 0x70
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d109      	bne.n	8003fb0 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003fa4:	0852      	lsrs	r2, r2, #1
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	4611      	mov	r1, r2
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fae:	e003      	b.n	8003fb8 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	4798      	blx	r3
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b21      	cmp	r3, #33	; 0x21
 8003ff2:	d108      	bne.n	8004006 <UART_DMAError+0x46>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004000:	68b8      	ldr	r0, [r7, #8]
 8004002:	f000 f8c7 	bl	8004194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b22      	cmp	r3, #34	; 0x22
 8004026:	d108      	bne.n	800403a <UART_DMAError+0x7a>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004034:	68b8      	ldr	r0, [r7, #8]
 8004036:	f000 f8d5 	bl	80041e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	68b8      	ldr	r0, [r7, #8]
 800404c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b098      	sub	sp, #96	; 0x60
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2222      	movs	r2, #34	; 0x22
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	4a40      	ldr	r2, [pc, #256]	; (8004188 <UART_Start_Receive_DMA+0x130>)
 8004086:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	4a3f      	ldr	r2, [pc, #252]	; (800418c <UART_Start_Receive_DMA+0x134>)
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	4a3e      	ldr	r2, [pc, #248]	; (8004190 <UART_Start_Receive_DMA+0x138>)
 8004096:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	2200      	movs	r2, #0
 800409e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	f7fd fe16 	bl	8001ce8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004102:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004104:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e5      	bne.n	80040e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	657b      	str	r3, [r7, #84]	; 0x54
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3314      	adds	r3, #20
 8004134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004136:	63ba      	str	r2, [r7, #56]	; 0x38
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800413c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e5      	bne.n	8004116 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	617b      	str	r3, [r7, #20]
   return(result);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004160:	653b      	str	r3, [r7, #80]	; 0x50
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800416a:	627a      	str	r2, [r7, #36]	; 0x24
 800416c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6a39      	ldr	r1, [r7, #32]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	61fb      	str	r3, [r7, #28]
   return(result);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3760      	adds	r7, #96	; 0x60
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	08003e5d 	.word	0x08003e5d
 800418c:	08003f87 	.word	0x08003f87
 8004190:	08003fc1 	.word	0x08003fc1

08004194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	61ba      	str	r2, [r7, #24]
 80041be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80041d8:	bf00      	nop
 80041da:	3724      	adds	r7, #36	; 0x24
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b095      	sub	sp, #84	; 0x54
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800420c:	643a      	str	r2, [r7, #64]	; 0x40
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b01      	cmp	r3, #1
 800425a:	d119      	bne.n	8004290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60bb      	str	r3, [r7, #8]
   return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	647b      	str	r3, [r7, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800427c:	61ba      	str	r2, [r7, #24]
 800427e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	613b      	str	r3, [r7, #16]
   return(result);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800429e:	bf00      	nop
 80042a0:	3754      	adds	r7, #84	; 0x54
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b0c0      	sub	sp, #256	; 0x100
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	ea40 0301 	orr.w	r3, r0, r1
 80042d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004304:	f021 010c 	bic.w	r1, r1, #12
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004312:	430b      	orrs	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	6999      	ldr	r1, [r3, #24]
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	ea40 0301 	orr.w	r3, r0, r1
 8004332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b8f      	ldr	r3, [pc, #572]	; (8004578 <UART_SetConfig+0x2cc>)
 800433c:	429a      	cmp	r2, r3
 800433e:	d005      	beq.n	800434c <UART_SetConfig+0xa0>
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b8d      	ldr	r3, [pc, #564]	; (800457c <UART_SetConfig+0x2d0>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d104      	bne.n	8004356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7fe fde2 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004350:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004354:	e003      	b.n	800435e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004356:	f7fe fdc9 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 800435a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	f040 810c 	bne.w	8004584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800436c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800437a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800437e:	4622      	mov	r2, r4
 8004380:	462b      	mov	r3, r5
 8004382:	1891      	adds	r1, r2, r2
 8004384:	65b9      	str	r1, [r7, #88]	; 0x58
 8004386:	415b      	adcs	r3, r3
 8004388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800438a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800438e:	4621      	mov	r1, r4
 8004390:	eb12 0801 	adds.w	r8, r2, r1
 8004394:	4629      	mov	r1, r5
 8004396:	eb43 0901 	adc.w	r9, r3, r1
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ae:	4690      	mov	r8, r2
 80043b0:	4699      	mov	r9, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	eb18 0303 	adds.w	r3, r8, r3
 80043b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043bc:	462b      	mov	r3, r5
 80043be:	eb49 0303 	adc.w	r3, r9, r3
 80043c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043da:	460b      	mov	r3, r1
 80043dc:	18db      	adds	r3, r3, r3
 80043de:	653b      	str	r3, [r7, #80]	; 0x50
 80043e0:	4613      	mov	r3, r2
 80043e2:	eb42 0303 	adc.w	r3, r2, r3
 80043e6:	657b      	str	r3, [r7, #84]	; 0x54
 80043e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f0:	f7fb feea 	bl	80001c8 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <UART_SetConfig+0x2d4>)
 80043fa:	fba3 2302 	umull	r2, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	011c      	lsls	r4, r3, #4
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800440c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	64b9      	str	r1, [r7, #72]	; 0x48
 800441c:	415b      	adcs	r3, r3
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004424:	4641      	mov	r1, r8
 8004426:	eb12 0a01 	adds.w	sl, r2, r1
 800442a:	4649      	mov	r1, r9
 800442c:	eb43 0b01 	adc.w	fp, r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800443c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004444:	4692      	mov	sl, r2
 8004446:	469b      	mov	fp, r3
 8004448:	4643      	mov	r3, r8
 800444a:	eb1a 0303 	adds.w	r3, sl, r3
 800444e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004452:	464b      	mov	r3, r9
 8004454:	eb4b 0303 	adc.w	r3, fp, r3
 8004458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004468:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800446c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004470:	460b      	mov	r3, r1
 8004472:	18db      	adds	r3, r3, r3
 8004474:	643b      	str	r3, [r7, #64]	; 0x40
 8004476:	4613      	mov	r3, r2
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004486:	f7fb fe9f 	bl	80001c8 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <UART_SetConfig+0x2d4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	; 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <UART_SetConfig+0x2d4>)
 80044a8:	fba3 2302 	umull	r2, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044b4:	441c      	add	r4, r3
 80044b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d0:	415b      	adcs	r3, r3
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044d8:	4641      	mov	r1, r8
 80044da:	1851      	adds	r1, r2, r1
 80044dc:	6339      	str	r1, [r7, #48]	; 0x30
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f0:	4659      	mov	r1, fp
 80044f2:	00cb      	lsls	r3, r1, #3
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fa:	4651      	mov	r1, sl
 80044fc:	00ca      	lsls	r2, r1, #3
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	4603      	mov	r3, r0
 8004504:	4642      	mov	r2, r8
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004524:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800452c:	460b      	mov	r3, r1
 800452e:	18db      	adds	r3, r3, r3
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
 8004532:	4613      	mov	r3, r2
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800453e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004542:	f7fb fe41 	bl	80001c8 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <UART_SetConfig+0x2d4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	; 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	3332      	adds	r3, #50	; 0x32
 800455e:	4a08      	ldr	r2, [pc, #32]	; (8004580 <UART_SetConfig+0x2d4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 0207 	and.w	r2, r3, #7
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4422      	add	r2, r4
 8004572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004574:	e106      	b.n	8004784 <UART_SetConfig+0x4d8>
 8004576:	bf00      	nop
 8004578:	40011000 	.word	0x40011000
 800457c:	40011400 	.word	0x40011400
 8004580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800458e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004596:	4642      	mov	r2, r8
 8004598:	464b      	mov	r3, r9
 800459a:	1891      	adds	r1, r2, r2
 800459c:	6239      	str	r1, [r7, #32]
 800459e:	415b      	adcs	r3, r3
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045a6:	4641      	mov	r1, r8
 80045a8:	1854      	adds	r4, r2, r1
 80045aa:	4649      	mov	r1, r9
 80045ac:	eb43 0501 	adc.w	r5, r3, r1
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045cc:	464b      	mov	r3, r9
 80045ce:	eb45 0303 	adc.w	r3, r5, r3
 80045d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045f2:	4629      	mov	r1, r5
 80045f4:	008b      	lsls	r3, r1, #2
 80045f6:	4621      	mov	r1, r4
 80045f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fc:	4621      	mov	r1, r4
 80045fe:	008a      	lsls	r2, r1, #2
 8004600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004604:	f7fb fde0 	bl	80001c8 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4b60      	ldr	r3, [pc, #384]	; (8004790 <UART_SetConfig+0x4e4>)
 800460e:	fba3 2302 	umull	r2, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	011c      	lsls	r4, r3, #4
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004628:	4642      	mov	r2, r8
 800462a:	464b      	mov	r3, r9
 800462c:	1891      	adds	r1, r2, r2
 800462e:	61b9      	str	r1, [r7, #24]
 8004630:	415b      	adcs	r3, r3
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004638:	4641      	mov	r1, r8
 800463a:	1851      	adds	r1, r2, r1
 800463c:	6139      	str	r1, [r7, #16]
 800463e:	4649      	mov	r1, r9
 8004640:	414b      	adcs	r3, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004650:	4659      	mov	r1, fp
 8004652:	00cb      	lsls	r3, r1, #3
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465a:	4651      	mov	r1, sl
 800465c:	00ca      	lsls	r2, r1, #3
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	4603      	mov	r3, r0
 8004664:	4642      	mov	r2, r8
 8004666:	189b      	adds	r3, r3, r2
 8004668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800466c:	464b      	mov	r3, r9
 800466e:	460a      	mov	r2, r1
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	67bb      	str	r3, [r7, #120]	; 0x78
 8004682:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004690:	4649      	mov	r1, r9
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	4641      	mov	r1, r8
 8004696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469a:	4641      	mov	r1, r8
 800469c:	008a      	lsls	r2, r1, #2
 800469e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046a2:	f7fb fd91 	bl	80001c8 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4611      	mov	r1, r2
 80046ac:	4b38      	ldr	r3, [pc, #224]	; (8004790 <UART_SetConfig+0x4e4>)
 80046ae:	fba3 2301 	umull	r2, r3, r3, r1
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2264      	movs	r2, #100	; 0x64
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	1acb      	subs	r3, r1, r3
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	3332      	adds	r3, #50	; 0x32
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <UART_SetConfig+0x4e4>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	673b      	str	r3, [r7, #112]	; 0x70
 80046d6:	677a      	str	r2, [r7, #116]	; 0x74
 80046d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	415b      	adcs	r3, r3
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ec:	4641      	mov	r1, r8
 80046ee:	1851      	adds	r1, r2, r1
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	4649      	mov	r1, r9
 80046f4:	414b      	adcs	r3, r1
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004704:	4659      	mov	r1, fp
 8004706:	00cb      	lsls	r3, r1, #3
 8004708:	4651      	mov	r1, sl
 800470a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470e:	4651      	mov	r1, sl
 8004710:	00ca      	lsls	r2, r1, #3
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	4603      	mov	r3, r0
 8004718:	4642      	mov	r2, r8
 800471a:	189b      	adds	r3, r3, r2
 800471c:	66bb      	str	r3, [r7, #104]	; 0x68
 800471e:	464b      	mov	r3, r9
 8004720:	460a      	mov	r2, r1
 8004722:	eb42 0303 	adc.w	r3, r2, r3
 8004726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	663b      	str	r3, [r7, #96]	; 0x60
 8004732:	667a      	str	r2, [r7, #100]	; 0x64
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004740:	4649      	mov	r1, r9
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	4641      	mov	r1, r8
 8004746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474a:	4641      	mov	r1, r8
 800474c:	008a      	lsls	r2, r1, #2
 800474e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004752:	f7fb fd39 	bl	80001c8 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <UART_SetConfig+0x4e4>)
 800475c:	fba3 1302 	umull	r1, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2164      	movs	r1, #100	; 0x64
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	3332      	adds	r3, #50	; 0x32
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <UART_SetConfig+0x4e4>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 020f 	and.w	r2, r3, #15
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4422      	add	r2, r4
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800478a:	46bd      	mov	sp, r7
 800478c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004790:	51eb851f 	.word	0x51eb851f

08004794 <memset>:
 8004794:	4402      	add	r2, r0
 8004796:	4603      	mov	r3, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	4d0d      	ldr	r5, [pc, #52]	; (80047dc <__libc_init_array+0x38>)
 80047a8:	4c0d      	ldr	r4, [pc, #52]	; (80047e0 <__libc_init_array+0x3c>)
 80047aa:	1b64      	subs	r4, r4, r5
 80047ac:	10a4      	asrs	r4, r4, #2
 80047ae:	2600      	movs	r6, #0
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	4d0b      	ldr	r5, [pc, #44]	; (80047e4 <__libc_init_array+0x40>)
 80047b6:	4c0c      	ldr	r4, [pc, #48]	; (80047e8 <__libc_init_array+0x44>)
 80047b8:	f000 f858 	bl	800486c <_init>
 80047bc:	1b64      	subs	r4, r4, r5
 80047be:	10a4      	asrs	r4, r4, #2
 80047c0:	2600      	movs	r6, #0
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	080048bc 	.word	0x080048bc
 80047e0:	080048bc 	.word	0x080048bc
 80047e4:	080048bc 	.word	0x080048bc
 80047e8:	080048c0 	.word	0x080048c0

080047ec <lrintf>:
 80047ec:	ee10 3a10 	vmov	r3, s0
 80047f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80047f4:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80047f8:	281e      	cmp	r0, #30
 80047fa:	b082      	sub	sp, #8
 80047fc:	dc2f      	bgt.n	800485e <lrintf+0x72>
 80047fe:	1c41      	adds	r1, r0, #1
 8004800:	da02      	bge.n	8004808 <lrintf+0x1c>
 8004802:	2000      	movs	r0, #0
 8004804:	b002      	add	sp, #8
 8004806:	4770      	bx	lr
 8004808:	2816      	cmp	r0, #22
 800480a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800480e:	dd0a      	ble.n	8004826 <lrintf+0x3a>
 8004810:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004818:	3a96      	subs	r2, #150	; 0x96
 800481a:	fa03 f002 	lsl.w	r0, r3, r2
 800481e:	2900      	cmp	r1, #0
 8004820:	d0f0      	beq.n	8004804 <lrintf+0x18>
 8004822:	4240      	negs	r0, r0
 8004824:	e7ee      	b.n	8004804 <lrintf+0x18>
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <lrintf+0x7c>)
 8004828:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800482c:	ed93 7a00 	vldr	s14, [r3]
 8004830:	ee37 0a00 	vadd.f32	s0, s14, s0
 8004834:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004838:	eddd 7a01 	vldr	s15, [sp, #4]
 800483c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004840:	ee17 3a90 	vmov	r3, s15
 8004844:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004848:	d0db      	beq.n	8004802 <lrintf+0x16>
 800484a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800484e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8004852:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004856:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800485a:	40d8      	lsrs	r0, r3
 800485c:	e7df      	b.n	800481e <lrintf+0x32>
 800485e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004862:	ee17 0a90 	vmov	r0, s15
 8004866:	e7cd      	b.n	8004804 <lrintf+0x18>
 8004868:	080048ac 	.word	0x080048ac

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
