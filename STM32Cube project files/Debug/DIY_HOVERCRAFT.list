
DIY_HOVERCRAFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e4  080073e4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ec  080073ec  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080073f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000007f0  20000028  20000028  00020028  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000818  20000818  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012180  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e62  00000000  00000000  00032217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f60  00000000  00000000  00035080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf2  00000000  00000000  00035fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217b9  00000000  00000000  00036bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a26  00000000  00000000  0005838b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd853  00000000  00000000  0006cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000040b0  00000000  00000000  0013a604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0013e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073a4 	.word	0x080073a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080073a4 	.word	0x080073a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <HAL_UART_ErrorCallback>:
volatile crsf_sensor_battery_t bat = {1,2,4,34};

int last_parsed_packet_location = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_UART_ErrorCallback+0x74>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12c      	bne.n	8000d5c <HAL_UART_ErrorCallback+0x6c>
	{
		if((USART6->SR && (1<<3)))
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_ErrorCallback+0x74>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d028      	beq.n	8000d5c <HAL_UART_ErrorCallback+0x6c>
		{	// over run error
			HAL_UART_DMAStop(&huart6);
 8000d0a:	4817      	ldr	r0, [pc, #92]	; (8000d68 <HAL_UART_ErrorCallback+0x78>)
 8000d0c:	f005 f90e 	bl	8005f2c <HAL_UART_DMAStop>
			uint8_t temp = USART6->DR;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_UART_ErrorCallback+0x74>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	73fb      	strb	r3, [r7, #15]
			UNUSED(temp);
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000d16:	2110      	movs	r1, #16
 8000d18:	4814      	ldr	r0, [pc, #80]	; (8000d6c <HAL_UART_ErrorCallback+0x7c>)
 8000d1a:	f003 fcda 	bl	80046d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <HAL_UART_ErrorCallback+0x80>)
 8000d24:	f003 fcd5 	bl	80046d2 <HAL_GPIO_TogglePin>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	4912      	ldr	r1, [pc, #72]	; (8000d74 <HAL_UART_ErrorCallback+0x84>)
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <HAL_UART_ErrorCallback+0x78>)
 8000d2e:	f005 f97c 	bl	800602a <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_UART_ErrorCallback+0x78>)
 8000d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_UART_ErrorCallback+0x78>)
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0208 	bic.w	r2, r2, #8
 8000d44:	601a      	str	r2, [r3, #0]
			channel_data.channel5 = CRSF_CHANNEL_VALUE_MIN; // disarm
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <HAL_UART_ErrorCallback+0x88>)
 8000d48:	6853      	ldr	r3, [r2, #4]
 8000d4a:	21ac      	movs	r1, #172	; 0xac
 8000d4c:	f361 3316 	bfi	r3, r1, #12, #11
 8000d50:	6053      	str	r3, [r2, #4]
			// log in future how many times have to reset
			last_packet_received_time = HAL_GetTick();
 8000d52:	f002 f899 	bl	8002e88 <HAL_GetTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_UART_ErrorCallback+0x8c>)
 8000d5a:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40011400 	.word	0x40011400
 8000d68:	20000710 	.word	0x20000710
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40020000 	.word	0x40020000
 8000d74:	20000044 	.word	0x20000044
 8000d78:	20000104 	.word	0x20000104
 8000d7c:	2000021c 	.word	0x2000021c

08000d80 <crsf_init>:


void crsf_init()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
//	(&huart6)->hdmarx->XferCpltCallback = check_and_decode_crsf;
//	HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	491d      	ldr	r1, [pc, #116]	; (8000e00 <crsf_init+0x80>)
 8000d8a:	481e      	ldr	r0, [pc, #120]	; (8000e04 <crsf_init+0x84>)
 8000d8c:	f005 f94d 	bl	800602a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <crsf_init+0x84>)
 8000d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <crsf_init+0x84>)
 8000d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0208 	bic.w	r2, r2, #8
 8000da2:	601a      	str	r2, [r3, #0]


	// gen poly lookup table
	for(int i= 0 ; i < 256 ; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e021      	b.n	8000dee <crsf_init+0x6e>
	{
		uint8_t crc = i;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	72fb      	strb	r3, [r7, #11]
		for(int shift = 0 ; shift < 8 ;shift++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	e011      	b.n	8000dd8 <crsf_init+0x58>
		{
			crc = (crc << 1) ^ ((crc&0x80) ? gen_poly : 0);
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	b25a      	sxtb	r2, r3
 8000dba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da03      	bge.n	8000dca <crsf_init+0x4a>
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <crsf_init+0x88>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	e000      	b.n	8000dcc <crsf_init+0x4c>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	4053      	eors	r3, r2
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	72fb      	strb	r3, [r7, #11]
		for(int shift = 0 ; shift < 8 ;shift++)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	ddea      	ble.n	8000db4 <crsf_init+0x34>
		}
		_lut[i] = crc & 0xff;
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <crsf_init+0x8c>)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	7afa      	ldrb	r2, [r7, #11]
 8000de6:	701a      	strb	r2, [r3, #0]
	for(int i= 0 ; i < 256 ; i++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	ddda      	ble.n	8000daa <crsf_init+0x2a>
	}


}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000044 	.word	0x20000044
 8000e04:	20000710 	.word	0x20000710
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	2000011c 	.word	0x2000011c

08000e10 <HAL_UARTEx_RxEventCallback>:

int time_to_execute = 0;

//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART6){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a54      	ldr	r2, [pc, #336]	; (8000f74 <HAL_UARTEx_RxEventCallback+0x164>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f040 80a1 	bne.w	8000f6a <HAL_UARTEx_RxEventCallback+0x15a>
//	HAL_UART_DMAStop(&huart6); // y do i need to do this
	uint8_t length = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	74fb      	strb	r3, [r7, #19]

	// check if its a valid packet
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) && i < Size ; i++)
 8000e2c:	4b52      	ldr	r3, [pc, #328]	; (8000f78 <HAL_UARTEx_RxEventCallback+0x168>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e04a      	b.n	8000eca <HAL_UARTEx_RxEventCallback+0xba>
	{
		if (rx_buffer[i] == CRSF_ADDRESS_FLIGHT_CONTROLLER)
 8000e34:	4a51      	ldr	r2, [pc, #324]	; (8000f7c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2bc8      	cmp	r3, #200	; 0xc8
 8000e3e:	d141      	bne.n	8000ec4 <HAL_UARTEx_RxEventCallback+0xb4>
		{
			length = rx_buffer[i+1];
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a4d      	ldr	r2, [pc, #308]	; (8000f7c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e46:	5cd3      	ldrb	r3, [r2, r3]
 8000e48:	74fb      	strb	r3, [r7, #19]
			// check length
			//then get all packets and check CRC if pass then packet valid
			if((length+i+2 > sizeof(rx_buffer)-1) || (i+1 > sizeof(rx_buffer)-1))
 8000e4a:	7cfa      	ldrb	r2, [r7, #19]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	4413      	add	r3, r2
 8000e50:	3302      	adds	r3, #2
 8000e52:	2b7f      	cmp	r3, #127	; 0x7f
 8000e54:	d835      	bhi.n	8000ec2 <HAL_UARTEx_RxEventCallback+0xb2>
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5c:	d831      	bhi.n	8000ec2 <HAL_UARTEx_RxEventCallback+0xb2>
				// handel cases with non full packets
				// can occur when the whole packet crc fails
				continue;
			}
			// if any packet received then reset counter
			last_packet_received_time = HAL_GetTick(); // non hal way of doing it
 8000e5e:	f002 f813 	bl	8002e88 <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a46      	ldr	r2, [pc, #280]	; (8000f80 <HAL_UARTEx_RxEventCallback+0x170>)
 8000e66:	6013      	str	r3, [r2, #0]
			if(calculateCRC(rx_buffer , i+2,length) == 0) // start crc calculation from type byte
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	7cfa      	ldrb	r2, [r7, #19]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4842      	ldr	r0, [pc, #264]	; (8000f7c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e72:	f000 f895 	bl	8000fa0 <calculateCRC>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d123      	bne.n	8000ec4 <HAL_UARTEx_RxEventCallback+0xb4>
			{
				// valid packet

//				last_packet_received_time = __HAL_TIM_GET_COUNTER(&htim4);
				new_packet_recieved = true;
 8000e7c:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <HAL_UARTEx_RxEventCallback+0x174>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
				if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3302      	adds	r3, #2
 8000e86:	4a3d      	ldr	r2, [pc, #244]	; (8000f7c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e88:	5cd3      	ldrb	r3, [r2, r3]
 8000e8a:	2b16      	cmp	r3, #22
 8000e8c:	d112      	bne.n	8000eb4 <HAL_UARTEx_RxEventCallback+0xa4>
 8000e8e:	7cfb      	ldrb	r3, [r7, #19]
 8000e90:	2b18      	cmp	r3, #24
 8000e92:	d10f      	bne.n	8000eb4 <HAL_UARTEx_RxEventCallback+0xa4>
				{
					memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3303      	adds	r3, #3
 8000e98:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <HAL_UARTEx_RxEventCallback+0x178>)
 8000e9e:	4614      	mov	r4, r2
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	6828      	ldr	r0, [r5, #0]
 8000ea4:	6869      	ldr	r1, [r5, #4]
 8000ea6:	68aa      	ldr	r2, [r5, #8]
 8000ea8:	68eb      	ldr	r3, [r5, #12]
 8000eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eac:	6928      	ldr	r0, [r5, #16]
 8000eae:	6020      	str	r0, [r4, #0]
 8000eb0:	8aab      	ldrh	r3, [r5, #20]
 8000eb2:	80a3      	strh	r3, [r4, #4]
				}
				i = i + 2 + length - 1; // -1 because for loop will increment this
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	1c9a      	adds	r2, r3, #2
 8000eb8:	7cfb      	ldrb	r3, [r7, #19]
 8000eba:	4413      	add	r3, r2
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e000      	b.n	8000ec4 <HAL_UARTEx_RxEventCallback+0xb4>
				continue;
 8000ec2:	bf00      	nop
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) && i < Size ; i++)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ece:	d803      	bhi.n	8000ed8 <HAL_UARTEx_RxEventCallback+0xc8>
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbad      	blt.n	8000e34 <HAL_UARTEx_RxEventCallback+0x24>
			}
		}
	}

	last_parsed_packet_location = 0;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_UARTEx_RxEventCallback+0x168>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	// chcek RXNE before starting dma
	if(send_telemetry)
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d032      	beq.n	8000f4c <HAL_UARTEx_RxEventCallback+0x13c>
	{     crsf_sensor_battery_t temp_bat = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
		  memcpy((void*)&temp_bat , (void*)&bat, sizeof(bat));
 8000ef0:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <HAL_UARTEx_RxEventCallback+0x180>)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efa:	e883 0003 	stmia.w	r3, {r0, r1}
		  convert_to_big_endian((uint8_t*)&temp_bat, 2); // battery voltage
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	2102      	movs	r1, #2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f8af 	bl	8001068 <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&temp_bat)[2]), 2); // battery current
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	3302      	adds	r3, #2
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8a8 	bl	8001068 <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&temp_bat)[4]), 3); // mah
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2103      	movs	r1, #3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f8a1 	bl	8001068 <convert_to_big_endian>
		send_telem(CRSF_FRAMETYPE_BATTERY_SENSOR, (uint8_t*)&temp_bat, sizeof(temp_bat)/sizeof(uint8_t));
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2008      	movs	r0, #8
 8000f30:	f000 f85c 	bl	8000fec <send_telem>
		sent_telemetry = true;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_UARTEx_RxEventCallback+0x184>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
		send_telemetry = false;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
		telem_last_sent = HAL_GetTick();
 8000f40:	f001 ffa2 	bl	8002e88 <HAL_GetTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_UARTEx_RxEventCallback+0x188>)
 8000f4a:	801a      	strh	r2, [r3, #0]
	}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	490b      	ldr	r1, [pc, #44]	; (8000f7c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f52:	f005 f86a 	bl	800602a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huart6.hdmarx, DMA_IT_HT);
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	601a      	str	r2, [r3, #0]

}
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bdb0      	pop	{r4, r5, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40011400 	.word	0x40011400
 8000f78:	20000224 	.word	0x20000224
 8000f7c:	20000044 	.word	0x20000044
 8000f80:	2000021c 	.word	0x2000021c
 8000f84:	20000220 	.word	0x20000220
 8000f88:	20000104 	.word	0x20000104
 8000f8c:	20000221 	.word	0x20000221
 8000f90:	20000004 	.word	0x20000004
 8000f94:	20000001 	.word	0x20000001
 8000f98:	20000222 	.word	0x20000222
 8000f9c:	20000710 	.word	0x20000710

08000fa0 <calculateCRC>:
//    time_to_execute = (TIM4->CNT) - time_to_execute;
//    return dividend;
//}

uint8_t calculateCRC(uint8_t* buffer , int start_index , int bytes)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	uint8_t crc = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	75fb      	strb	r3, [r7, #23]
	uint8_t* data = &(buffer[start_index]);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
	while(bytes--)
 8000fb8:	e00a      	b.n	8000fd0 <calculateCRC+0x30>
	{
		crc = _lut[crc ^ *(data++)];
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	613a      	str	r2, [r7, #16]
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <calculateCRC+0x48>)
 8000fcc:	5c9b      	ldrb	r3, [r3, r2]
 8000fce:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1ef      	bne.n	8000fba <calculateCRC+0x1a>
	}
    return crc;
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	2000011c 	.word	0x2000011c

08000fec <send_telem>:

void send_telem(uint8_t type , uint8_t* payload , uint8_t payload_length)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	tx_buffer[0] = CRSF_ADDRESS_CRSF_RECEIVER;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <send_telem+0x70>)
 8000ffe:	22ec      	movs	r2, #236	; 0xec
 8001000:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = payload_length+2;
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	3302      	adds	r3, #2
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <send_telem+0x70>)
 800100a:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = type;
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <send_telem+0x70>)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	7093      	strb	r3, [r2, #2]
	memcpy(&(tx_buffer[3]),payload,payload_length);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	461a      	mov	r2, r3
 8001016:	6839      	ldr	r1, [r7, #0]
 8001018:	4811      	ldr	r0, [pc, #68]	; (8001060 <send_telem+0x74>)
 800101a:	f006 f975 	bl	8007308 <memcpy>
	tx_buffer[3+payload_length] = 0; // CRC set as 0 for calculation
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	3303      	adds	r3, #3
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <send_telem+0x70>)
 8001024:	2100      	movs	r1, #0
 8001026:	54d1      	strb	r1, [r2, r3]
	tx_buffer[3+payload_length] = calculateCRC(tx_buffer ,2, payload_length+1);
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	1cdc      	adds	r4, r3, #3
 8001030:	2102      	movs	r1, #2
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <send_telem+0x70>)
 8001034:	f7ff ffb4 	bl	8000fa0 <calculateCRC>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <send_telem+0x70>)
 800103e:	551a      	strb	r2, [r3, r4]

	HAL_UART_Transmit_DMA(&huart6 ,tx_buffer, payload_length+4);
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	b29b      	uxth	r3, r3
 8001044:	3304      	adds	r3, #4
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	4904      	ldr	r1, [pc, #16]	; (800105c <send_telem+0x70>)
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <send_telem+0x78>)
 800104e:	f004 feef 	bl	8005e30 <HAL_UART_Transmit_DMA>
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	200000c4 	.word	0x200000c4
 8001060:	200000c7 	.word	0x200000c7
 8001064:	20000710 	.word	0x20000710

08001068 <convert_to_big_endian>:

void convert_to_big_endian(uint8_t * dst , uint8_t bytes)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	uint8_t temp =0;
 8001074:	2300      	movs	r3, #0
 8001076:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i < bytes/2;i++)
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e01c      	b.n	80010b8 <convert_to_big_endian+0x50>
	{
		//swap
		temp = dst[i];
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	72fb      	strb	r3, [r7, #11]
		dst[i] = dst[(bytes-1)-i];
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	461a      	mov	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	441a      	add	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	440b      	add	r3, r1
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
		dst[(bytes-1)-i] = temp;
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	7afa      	ldrb	r2, [r7, #11]
 80010b0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < bytes/2;i++)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	085b      	lsrs	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4293      	cmp	r3, r2
 80010c4:	dbdb      	blt.n	800107e <convert_to_big_endian+0x16>
	}

}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC1_Init+0xb4>)
 80010e8:	4a28      	ldr	r2, [pc, #160]	; (800118c <MX_ADC1_Init+0xb8>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_ADC1_Init+0xb4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_ADC1_Init+0xb4>)
 80010f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <MX_ADC1_Init+0xb4>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001102:	2200      	movs	r2, #0
 8001104:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_ADC1_Init+0xbc>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_ADC1_Init+0xb4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001122:	2202      	movs	r2, #2
 8001124:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001130:	2201      	movs	r2, #1
 8001132:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001136:	f001 fed7 	bl	8002ee8 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001140:	f001 f902 	bl	8002348 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001144:	230b      	movs	r3, #11
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800114c:	2304      	movs	r3, #4
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001156:	f002 f949 	bl	80033ec <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001160:	f001 f8f2 	bl	8002348 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001164:	230d      	movs	r3, #13
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_ADC1_Init+0xb4>)
 8001172:	f002 f93b 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800117c:	f001 f8e4 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000228 	.word	0x20000228
 800118c:	40012000 	.word	0x40012000
 8001190:	0f000001 	.word	0x0f000001

08001194 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a37      	ldr	r2, [pc, #220]	; (8001290 <HAL_ADC_MspInit+0xfc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d167      	bne.n	8001286 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <HAL_ADC_MspInit+0x100>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a35      	ldr	r2, [pc, #212]	; (8001294 <HAL_ADC_MspInit+0x100>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_ADC_MspInit+0x100>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_ADC_MspInit+0x100>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <HAL_ADC_MspInit+0x100>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <HAL_ADC_MspInit+0x100>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011ee:	230a      	movs	r3, #10
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4825      	ldr	r0, [pc, #148]	; (8001298 <HAL_ADC_MspInit+0x104>)
 8001202:	f003 f8b1 	bl	8004368 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <HAL_ADC_MspInit+0x10c>)
 800120a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_ADC_MspInit+0x108>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_ADC_MspInit+0x108>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001234:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x108>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001244:	2204      	movs	r2, #4
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_ADC_MspInit+0x108>)
 800124a:	2203      	movs	r2, #3
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <HAL_ADC_MspInit+0x108>)
 800125c:	f002 fc82 	bl	8003b64 <HAL_DMA_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001266:	f001 f86f 	bl	8002348 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_ADC_MspInit+0x108>)
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_ADC_MspInit+0x108>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2012      	movs	r0, #18
 800127c:	f002 fc3b 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001280:	2012      	movs	r0, #18
 8001282:	f002 fc54 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40012000 	.word	0x40012000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	20000270 	.word	0x20000270
 80012a0:	40026410 	.word	0x40026410

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <MX_DMA_Init+0x98>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a22      	ldr	r2, [pc, #136]	; (800133c <MX_DMA_Init+0x98>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_DMA_Init+0x98>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_DMA_Init+0x98>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a1b      	ldr	r2, [pc, #108]	; (800133c <MX_DMA_Init+0x98>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_DMA_Init+0x98>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	200d      	movs	r0, #13
 80012e8:	f002 fc05 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012ec:	200d      	movs	r0, #13
 80012ee:	f002 fc1e 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2011      	movs	r0, #17
 80012f8:	f002 fbfd 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012fc:	2011      	movs	r0, #17
 80012fe:	f002 fc16 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2038      	movs	r0, #56	; 0x38
 8001308:	f002 fbf5 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800130c:	2038      	movs	r0, #56	; 0x38
 800130e:	f002 fc0e 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 2, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2102      	movs	r1, #2
 8001316:	2039      	movs	r0, #57	; 0x39
 8001318:	f002 fbed 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800131c:	2039      	movs	r0, #57	; 0x39
 800131e:	f002 fc06 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2045      	movs	r0, #69	; 0x45
 8001328:	f002 fbe5 	bl	8003af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800132c:	2045      	movs	r0, #69	; 0x45
 800132e:	f002 fbfe 	bl	8003b2e <HAL_NVIC_EnableIRQ>

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f84b 	bl	80013e8 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8001352:	f000 f8d5 	bl	8001500 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8001356:	f000 f8e9 	bl	800152c <dshot_start_pwm>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <dshot_write>:

void dshot_write(uint16_t *motor_value , bool dshot_telemetry)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
	last_sent_motor_value[0] = motor_value[0];
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <dshot_write+0x48>)
 8001376:	801a      	strh	r2, [r3, #0]
	last_sent_motor_value[1] = motor_value[1];
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	885a      	ldrh	r2, [r3, #2]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <dshot_write+0x48>)
 800137e:	805a      	strh	r2, [r3, #2]
	last_sent_motor_value[2] = motor_value[2];
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	889a      	ldrh	r2, [r3, #4]
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <dshot_write+0x48>)
 8001386:	809a      	strh	r2, [r3, #4]
	last_sent_motor_value[3] = motor_value[3];
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	88da      	ldrh	r2, [r3, #6]
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <dshot_write+0x48>)
 800138e:	80da      	strh	r2, [r3, #6]
	dshot_prepare_dmabuffer_all(motor_value, dshot_telemetry);
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f943 	bl	8001620 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800139a:	f000 f95f 	bl	800165c <dshot_dma_start>
	dshot_enable_dma_request();
 800139e:	f000 f97d 	bl	800169c <dshot_enable_dma_request>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000364 	.word	0x20000364

080013b0 <dshot_choose_type>:

/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d003      	beq.n	80013c8 <dshot_choose_type+0x18>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d103      	bne.n	80013cc <dshot_choose_type+0x1c>
	{
	case (DSHOT600):
		return DSHOT600_HZ;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <dshot_choose_type+0x2c>)
 80013c6:	e002      	b.n	80013ce <dshot_choose_type+0x1e>

	case (DSHOT300):
		return DSHOT300_HZ;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <dshot_choose_type+0x30>)
 80013ca:	e000      	b.n	80013ce <dshot_choose_type+0x1e>

	default:
	case (DSHOT150):
		return DSHOT150_HZ;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <dshot_choose_type+0x34>)
	}
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	00b71b00 	.word	0x00b71b00
 80013e0:	005b8d80 	.word	0x005b8d80
 80013e4:	002dc6c0 	.word	0x002dc6c0

080013e8 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	ed2d 8b02 	vpush	{d8}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <dshot_set_timer+0x80>)
 80013f8:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float)timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffd2 	bl	80013b0 <dshot_choose_type>
 800140c:	ee07 0a90 	vmov	s15, r0
 8001410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001414:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001418:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800146c <dshot_set_timer+0x84>
 800141c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	f005 ff7e 	bl	8007324 <lrintf>
 8001428:	4603      	mov	r3, r0
 800142a:	b29b      	uxth	r3, r3
 800142c:	3b01      	subs	r3, #1
 800142e:	817b      	strh	r3, [r7, #10]

	// motor1
#ifdef MOTOR_1_TIM
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <dshot_set_timer+0x88>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	897a      	ldrh	r2, [r7, #10]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <dshot_set_timer+0x88>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2214      	movs	r2, #20
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <dshot_set_timer+0x88>)
 8001442:	2214      	movs	r2, #20
 8001444:	60da      	str	r2, [r3, #12]
	 __HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
	 __HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
#endif
	// motor3
#ifdef MOTOR_3_TIM
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <dshot_set_timer+0x8c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	897a      	ldrh	r2, [r7, #10]
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <dshot_set_timer+0x8c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2214      	movs	r2, #20
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <dshot_set_timer+0x8c>)
 8001458:	2214      	movs	r2, #20
 800145a:	60da      	str	r2, [r3, #12]
	// // motor4
#ifdef MOTOR_4_TIM
	 __HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
	 __HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
#endif
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	ecbd 8b02 	vpop	{d8}
 8001466:	bd80      	pop	{r7, pc}
 8001468:	02dc6c00 	.word	0x02dc6c00
 800146c:	3c23d70a 	.word	0x3c23d70a
 8001470:	20000578 	.word	0x20000578
 8001474:	20000530 	.word	0x20000530

08001478 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d108      	bne.n	80014a2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800149e:	60da      	str	r2, [r3, #12]
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80014a0:	e028      	b.n	80014f4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d108      	bne.n	80014be <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ba:	60da      	str	r2, [r3, #12]
}
 80014bc:	e01a      	b.n	80014f4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d108      	bne.n	80014da <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d6:	60da      	str	r2, [r3, #12]
}
 80014d8:	e00c      	b.n	80014f4 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d107      	bne.n	80014f4 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014f2:	60da      	str	r2, [r3, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
// TIM_DMA_ID_CCx depends on timer channel
#ifdef MOTOR_1_TIM
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <dshot_put_tc_callback_function+0x20>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <dshot_put_tc_callback_function+0x24>)
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_2_TIM
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
#endif
#ifdef MOTOR_3_TIM
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <dshot_put_tc_callback_function+0x28>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <dshot_put_tc_callback_function+0x24>)
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_4_TIM
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
#endif
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000578 	.word	0x20000578
 8001524:	08001479 	.word	0x08001479
 8001528:	20000530 	.word	0x20000530

0800152c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
	// Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
#ifdef MOTOR_1_TIM
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8001530:	210c      	movs	r1, #12
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <dshot_start_pwm+0x18>)
 8001534:	f003 fe50 	bl	80051d8 <HAL_TIM_PWM_Start>
#endif
#ifdef MOTOR_2_TIM
	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
#endif
#ifdef MOTOR_3_TIM
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8001538:	210c      	movs	r1, #12
 800153a:	4803      	ldr	r0, [pc, #12]	; (8001548 <dshot_start_pwm+0x1c>)
 800153c:	f003 fe4c 	bl	80051d8 <HAL_TIM_PWM_Start>
#endif
#ifdef MOTOR_4_TIM
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
#endif
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000578 	.word	0x20000578
 8001548:	20000530 	.word	0x20000530

0800154c <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value , bool dshot_telemetry)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	4613      	mov	r3, r2
 800155a:	717b      	strb	r3, [r7, #5]
	uint16_t packet;


	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	b21a      	sxth	r2, r3
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	817b      	strh	r3, [r7, #10]

	// compute checksum
	unsigned csum = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 3; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e009      	b.n	800158e <dshot_prepare_packet+0x42>
	{
		csum ^= csum_data; // xor data by nibbles
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4053      	eors	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b02      	cmp	r3, #2
 8001592:	ddf2      	ble.n	800157a <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800159c:	897b      	ldrh	r3, [r7, #10]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	817b      	strh	r3, [r7, #10]

	return packet;
 80015aa:	897b      	ldrh	r3, [r7, #10]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t *motor_dmabuffer, uint16_t value , bool dshot_telemetry)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
	uint16_t packet;
	packet = dshot_prepare_packet(value ,dshot_telemetry );
 80015c8:	787a      	ldrb	r2, [r7, #1]
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ffbc 	bl	800154c <dshot_prepare_packet>
 80015d4:	4603      	mov	r3, r0
 80015d6:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < 16; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	e011      	b.n	8001602 <dshot_prepare_dmabuffer+0x4a>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 80015de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da01      	bge.n	80015ea <dshot_prepare_dmabuffer+0x32>
 80015e6:	220e      	movs	r2, #14
 80015e8:	e000      	b.n	80015ec <dshot_prepare_dmabuffer+0x34>
 80015ea:	2207      	movs	r2, #7
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	440b      	add	r3, r1
 80015f4:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	3301      	adds	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	ddea      	ble.n	80015de <dshot_prepare_dmabuffer+0x26>
	}

	motor_dmabuffer[16] = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3340      	adds	r3, #64	; 0x40
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3344      	adds	r3, #68	; 0x44
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t *motor_value , bool dshot_telemetry)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
#ifdef MOTOR_1_TIM
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0], dshot_telemetry);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <dshot_prepare_dmabuffer_all+0x34>)
 8001636:	f7ff ffbf 	bl	80015b8 <dshot_prepare_dmabuffer>
#endif
#ifdef MOTOR_2_TIM
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
#endif
#ifdef MOTOR_3_TIM
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2] ,dshot_telemetry);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3304      	adds	r3, #4
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	4619      	mov	r1, r3
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <dshot_prepare_dmabuffer_all+0x38>)
 8001646:	f7ff ffb7 	bl	80015b8 <dshot_prepare_dmabuffer>
#endif
#ifdef MOTOR_4_TIM
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
#endif
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002d0 	.word	0x200002d0
 8001658:	20000318 	.word	0x20000318

0800165c <dshot_dma_start>:

static void dshot_dma_start()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
#ifdef MOTOR_1_TIM
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <dshot_dma_start+0x30>)
 8001662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001664:	490a      	ldr	r1, [pc, #40]	; (8001690 <dshot_dma_start+0x34>)
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <dshot_dma_start+0x30>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3340      	adds	r3, #64	; 0x40
 800166c:	461a      	mov	r2, r3
 800166e:	2312      	movs	r3, #18
 8001670:	f002 fb26 	bl	8003cc0 <HAL_DMA_Start_IT>
#endif
#ifdef MOTOR_2_TIM
	 HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
#endif
#ifdef MOTOR_3_TIM
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <dshot_dma_start+0x38>)
 8001676:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <dshot_dma_start+0x3c>)
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <dshot_dma_start+0x38>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3340      	adds	r3, #64	; 0x40
 8001680:	461a      	mov	r2, r3
 8001682:	2312      	movs	r3, #18
 8001684:	f002 fb1c 	bl	8003cc0 <HAL_DMA_Start_IT>
#endif
#ifdef MOTOR_4_TIM
	 HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
#endif
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000578 	.word	0x20000578
 8001690:	200002d0 	.word	0x200002d0
 8001694:	20000530 	.word	0x20000530
 8001698:	20000318 	.word	0x20000318

0800169c <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
#ifdef MOTOR_1_TIM
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <dshot_enable_dma_request+0x30>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <dshot_enable_dma_request+0x30>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016ae:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_2_TIM
	 __HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
#endif
#ifdef MOTOR_3_TIM
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC4);
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <dshot_enable_dma_request+0x34>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <dshot_enable_dma_request+0x34>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016be:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_4_TIM
	 __HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000578 	.word	0x20000578
 80016d0:	20000530 	.word	0x20000530

080016d4 <dshot_arm>:

void dshot_arm()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
	uint16_t arr[4] = {0,0,0,0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
	is_armed = true;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <dshot_arm+0x44>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < 2000 ; i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e00a      	b.n	8001704 <dshot_arm+0x30>
	  {
		  dshot_write(arr , false);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fe36 	bl	8001364 <dshot_write>
		  HAL_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f001 fbd1 	bl	8002ea0 <HAL_Delay>
	for(int i =0 ; i < 2000 ; i++)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800170a:	dbf0      	blt.n	80016ee <dshot_arm+0x1a>
		  // send 0 for first 2 seconds

	  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000360 	.word	0x20000360

0800171c <dshot_beep>:
		  // send 0 for first 2 seconds
	  }
	save_settings(motor_number);
}
void dshot_beep(uint8_t motor_number ,uint8_t beep_number)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	4613      	mov	r3, r2
 800172a:	71bb      	strb	r3, [r7, #6]
	beep_number = beep_number < 0 ? 0:beep_number;
	beep_number = beep_number > 5 ? 5:beep_number;
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	2b05      	cmp	r3, #5
 8001730:	bf28      	it	cs
 8001732:	2305      	movcs	r3, #5
 8001734:	71bb      	strb	r3, [r7, #6]

	last_sent_motor_value[motor_number] = 2;
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <dshot_beep+0x3c>)
 800173a:	2102      	movs	r1, #2
 800173c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dshot_write(last_sent_motor_value,true);
 8001740:	2101      	movs	r1, #1
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <dshot_beep+0x3c>)
 8001744:	f7ff fe0e 	bl	8001364 <dshot_write>
	HAL_Delay(100);
 8001748:	2064      	movs	r0, #100	; 0x64
 800174a:	f001 fba9 	bl	8002ea0 <HAL_Delay>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000364 	.word	0x20000364

0800175c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <MX_GPIO_Init+0xe0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a30      	ldr	r2, [pc, #192]	; (800183c <MX_GPIO_Init+0xe0>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <MX_GPIO_Init+0xe0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <MX_GPIO_Init+0xe0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a29      	ldr	r2, [pc, #164]	; (800183c <MX_GPIO_Init+0xe0>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <MX_GPIO_Init+0xe0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <MX_GPIO_Init+0xe0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a22      	ldr	r2, [pc, #136]	; (800183c <MX_GPIO_Init+0xe0>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_GPIO_Init+0xe0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_GPIO_Init+0xe0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <MX_GPIO_Init+0xe0>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_GPIO_Init+0xe0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e8:	4815      	ldr	r0, [pc, #84]	; (8001840 <MX_GPIO_Init+0xe4>)
 80017ea:	f002 ff59 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2130      	movs	r1, #48	; 0x30
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <MX_GPIO_Init+0xe8>)
 80017f4:	f002 ff54 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <MX_GPIO_Init+0xe4>)
 8001812:	f002 fda9 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001816:	2330      	movs	r3, #48	; 0x30
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_GPIO_Init+0xe8>)
 800182e:	f002 fd9b 	bl	8004368 <HAL_GPIO_Init>

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f001 fab5 	bl	8002dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 fba9 	bl	8001fa8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f7ff ff81 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 800185a:	f7ff fd23 	bl	80012a4 <MX_DMA_Init>
  MX_TIM2_Init();
 800185e:	f000 fe25 	bl	80024ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001862:	f000 fe97 	bl	8002594 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001866:	f000 ff8d 	bl	8002784 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800186a:	f001 f995 	bl	8002b98 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 800186e:	f000 ff07 	bl	8002680 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001872:	f7ff fc2f 	bl	80010d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  dshot_init(DSHOT600);
 8001876:	2002      	movs	r0, #2
 8001878:	f7ff fd62 	bl	8001340 <dshot_init>
  crsf_init();
 800187c:	f7ff fa80 	bl	8000d80 <crsf_init>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8001880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001884:	489e      	ldr	r0, [pc, #632]	; (8001b00 <main+0x2b8>)
 8001886:	f002 ff24 	bl	80046d2 <HAL_GPIO_TogglePin>

	// want the timer to run at 1 mhz (u can choose any )
	// so prescaler = 48mhz(apb1) / 1mhz = 48
	__HAL_TIM_SET_PRESCALER(&htim5, 48);
 800188a:	4b9e      	ldr	r3, [pc, #632]	; (8001b04 <main+0x2bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim4, 48);
 8001892:	4b9d      	ldr	r3, [pc, #628]	; (8001b08 <main+0x2c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2230      	movs	r2, #48	; 0x30
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
		//for 50hz the arr value should be 1mhz/50 = 20000
	__HAL_TIM_SET_AUTORELOAD(&htim5, 20000);
 800189a:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <main+0x2bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018a4:	4b97      	ldr	r3, [pc, #604]	; (8001b04 <main+0x2bc>)
 80018a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018aa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 , (min_servo+max_servo)/2);
 80018ac:	4b95      	ldr	r3, [pc, #596]	; (8001b04 <main+0x2bc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f240 621d 	movw	r2, #1565	; 0x61d
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	4892      	ldr	r0, [pc, #584]	; (8001b04 <main+0x2bc>)
 80018ba:	f003 fc8d 	bl	80051d8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_AUTORELOAD(&htim4, 20000);
 80018be:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <main+0x2c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c8:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <main+0x2c0>)
 80018ca:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018ce:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1 , 2300);
 80018d0:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <main+0x2c0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2 , 2050);
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <main+0x2c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f640 0202 	movw	r2, #2050	; 0x802
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80018e4:	2100      	movs	r1, #0
 80018e6:	4888      	ldr	r0, [pc, #544]	; (8001b08 <main+0x2c0>)
 80018e8:	f003 fc76 	bl	80051d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80018ec:	2104      	movs	r1, #4
 80018ee:	4886      	ldr	r0, [pc, #536]	; (8001b08 <main+0x2c0>)
 80018f0:	f003 fc72 	bl	80051d8 <HAL_TIM_PWM_Start>
	// adc
    //HAL_ADC_Start_DMA(&hadc1,(uint32_t *)raw_adc_data , 2); // take readings from adc


	// arm esc
    dshot_arm();
 80018f4:	f7ff feee 	bl	80016d4 <dshot_arm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = total_number_of_samples-1 ; i >0  ; i--)
 80018f8:	2363      	movs	r3, #99	; 0x63
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e01f      	b.n	800193e <main+0xf6>
	  {
		  for(int j = 0; j < number_of_motors;j++)
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e016      	b.n	8001932 <main+0xea>
		  {
			  average_motor_values[j][i] = average_motor_values[j][i-1];
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3b01      	subs	r3, #1
 8001908:	4980      	ldr	r1, [pc, #512]	; (8001b0c <main+0x2c4>)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	2064      	movs	r0, #100	; 0x64
 800190e:	fb00 f202 	mul.w	r2, r0, r2
 8001912:	4413      	add	r3, r2
 8001914:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001918:	497c      	ldr	r1, [pc, #496]	; (8001b0c <main+0x2c4>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2264      	movs	r2, #100	; 0x64
 800191e:	fb03 f202 	mul.w	r2, r3, r2
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	4602      	mov	r2, r0
 8001928:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		  for(int j = 0; j < number_of_motors;j++)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	3301      	adds	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b01      	cmp	r3, #1
 8001936:	dde5      	ble.n	8001904 <main+0xbc>
	  for (int i = total_number_of_samples-1 ; i >0  ; i--)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3b01      	subs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dcdc      	bgt.n	80018fe <main+0xb6>
			  // shift to right
		  }
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001944:	2120      	movs	r1, #32
 8001946:	4872      	ldr	r0, [pc, #456]	; (8001b10 <main+0x2c8>)
 8001948:	f002 fec3 	bl	80046d2 <HAL_GPIO_TogglePin>
	  if(arm_state == ARMED && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = IDLE ;
 800194c:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <main+0x2cc>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d110      	bne.n	8001976 <main+0x12e>
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <main+0x2d0>)
 8001956:	795a      	ldrb	r2, [r3, #5]
 8001958:	0912      	lsrs	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	799b      	ldrb	r3, [r3, #6]
 800195e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4313      	orrs	r3, r2
 8001966:	b29b      	uxth	r3, r3
 8001968:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800196c:	d203      	bcs.n	8001976 <main+0x12e>
 800196e:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <main+0x2cc>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e085      	b.n	8001a82 <main+0x23a>
	  else if(arm_state == IDLE && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = PREARMED ;
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <main+0x2cc>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d120      	bne.n	80019c0 <main+0x178>
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <main+0x2d0>)
 8001980:	799a      	ldrb	r2, [r3, #6]
 8001982:	09d2      	lsrs	r2, r2, #7
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	79d9      	ldrb	r1, [r3, #7]
 8001988:	0049      	lsls	r1, r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	7a1b      	ldrb	r3, [r3, #8]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	4313      	orrs	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800199c:	d910      	bls.n	80019c0 <main+0x178>
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <main+0x2d0>)
 80019a0:	795a      	ldrb	r2, [r3, #5]
 80019a2:	0912      	lsrs	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	799b      	ldrb	r3, [r3, #6]
 80019a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80019b6:	d203      	bcs.n	80019c0 <main+0x178>
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <main+0x2cc>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e060      	b.n	8001a82 <main+0x23a>
	  else if(arm_state == IDLE && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = NOPREARM ;
 80019c0:	4b54      	ldr	r3, [pc, #336]	; (8001b14 <main+0x2cc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d120      	bne.n	8001a0a <main+0x1c2>
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <main+0x2d0>)
 80019ca:	799a      	ldrb	r2, [r3, #6]
 80019cc:	09d2      	lsrs	r2, r2, #7
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	79d9      	ldrb	r1, [r3, #7]
 80019d2:	0049      	lsls	r1, r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	7a1b      	ldrb	r3, [r3, #8]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	025b      	lsls	r3, r3, #9
 80019de:	4313      	orrs	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80019e6:	d210      	bcs.n	8001a0a <main+0x1c2>
 80019e8:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <main+0x2d0>)
 80019ea:	795a      	ldrb	r2, [r3, #5]
 80019ec:	0912      	lsrs	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	799b      	ldrb	r3, [r3, #6]
 80019f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001a00:	d903      	bls.n	8001a0a <main+0x1c2>
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <main+0x2cc>)
 8001a04:	2202      	movs	r2, #2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e03b      	b.n	8001a82 <main+0x23a>
	  else if(arm_state == PREARMED && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = ARMED ;
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <main+0x2cc>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d120      	bne.n	8001a54 <main+0x20c>
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <main+0x2d0>)
 8001a14:	799a      	ldrb	r2, [r3, #6]
 8001a16:	09d2      	lsrs	r2, r2, #7
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	79d9      	ldrb	r1, [r3, #7]
 8001a1c:	0049      	lsls	r1, r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	7a1b      	ldrb	r3, [r3, #8]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001a30:	d910      	bls.n	8001a54 <main+0x20c>
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <main+0x2d0>)
 8001a34:	795a      	ldrb	r2, [r3, #5]
 8001a36:	0912      	lsrs	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	799b      	ldrb	r3, [r3, #6]
 8001a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001a4a:	d903      	bls.n	8001a54 <main+0x20c>
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <main+0x2cc>)
 8001a4e:	2203      	movs	r2, #3
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e016      	b.n	8001a82 <main+0x23a>
	  else if(arm_state == NOPREARM && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 ) arm_state = IDLE ;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <main+0x2cc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d112      	bne.n	8001a82 <main+0x23a>
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <main+0x2d0>)
 8001a5e:	799a      	ldrb	r2, [r3, #6]
 8001a60:	09d2      	lsrs	r2, r2, #7
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	79d9      	ldrb	r1, [r3, #7]
 8001a66:	0049      	lsls	r1, r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001a7a:	d202      	bcs.n	8001a82 <main+0x23a>
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <main+0x2cc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
//	  if(rx_buffer[0] | rx_buffer[1] | rx_buffer[2] | rx_buffer[3] | rx_buffer[4])
//	  {
//		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
//	  }

	  if(arm_state == ARMED) // arm channel
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <main+0x2cc>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	f040 814f 	bne.w	8001d2a <main+0x4e2>
	  {
		  if(channel_data.channel6 < 1500)
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <main+0x2d0>)
 8001a8e:	799a      	ldrb	r2, [r3, #6]
 8001a90:	09d2      	lsrs	r2, r2, #7
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	79d9      	ldrb	r1, [r3, #7]
 8001a96:	0049      	lsls	r1, r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	7a1b      	ldrb	r3, [r3, #8]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f240 52db 	movw	r2, #1499	; 0x5db
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d840      	bhi.n	8001b30 <main+0x2e8>
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true);
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <main+0x2d0>)
 8001ab0:	789a      	ldrb	r2, [r3, #2]
 8001ab2:	0992      	lsrs	r2, r2, #6
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	78d9      	ldrb	r1, [r3, #3]
 8001ab8:	0089      	lsls	r1, r1, #2
 8001aba:	430a      	orrs	r2, r1
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8001b1c <main+0x2d4>
 8001ad6:	eddf 1a12 	vldr	s3, [pc, #72]	; 8001b20 <main+0x2d8>
 8001ada:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001b24 <main+0x2dc>
 8001ade:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001b28 <main+0x2e0>
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	f000 facb 	bl	8002080 <map>
 8001aea:	eef0 7a40 	vmov.f32	s15, s0
 8001aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <main+0x2e4>)
 8001afa:	809a      	strh	r2, [r3, #4]
 8001afc:	e03f      	b.n	8001b7e <main+0x336>
 8001afe:	bf00      	nop
 8001b00:	40020000 	.word	0x40020000
 8001b04:	20000608 	.word	0x20000608
 8001b08:	200005c0 	.word	0x200005c0
 8001b0c:	2000038c 	.word	0x2000038c
 8001b10:	40020400 	.word	0x40020400
 8001b14:	20000380 	.word	0x20000380
 8001b18:	20000104 	.word	0x20000104
 8001b1c:	447a0000 	.word	0x447a0000
 8001b20:	42400000 	.word	0x42400000
 8001b24:	44e00000 	.word	0x44e00000
 8001b28:	433f0000 	.word	0x433f0000
 8001b2c:	2000036c 	.word	0x2000036c
		  else
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DR_MIN_THROTTLE, DSHOT_3DR_MAX_THROTTLE, true);
 8001b30:	4bb8      	ldr	r3, [pc, #736]	; (8001e14 <main+0x5cc>)
 8001b32:	789a      	ldrb	r2, [r3, #2]
 8001b34:	0992      	lsrs	r2, r2, #6
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	78d9      	ldrb	r1, [r3, #3]
 8001b3a:	0089      	lsls	r1, r1, #2
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	2001      	movs	r0, #1
 8001b54:	ed9f 2ab0 	vldr	s4, [pc, #704]	; 8001e18 <main+0x5d0>
 8001b58:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8001e1c <main+0x5d4>
 8001b5c:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8001e20 <main+0x5d8>
 8001b60:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8001e24 <main+0x5dc>
 8001b64:	eeb0 0a67 	vmov.f32	s0, s15
 8001b68:	f000 fa8a 	bl	8002080 <map>
 8001b6c:	eef0 7a40 	vmov.f32	s15, s0
 8001b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b74:	ee17 3a90 	vmov	r3, s15
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4bab      	ldr	r3, [pc, #684]	; (8001e28 <main+0x5e0>)
 8001b7c:	809a      	strh	r2, [r3, #4]


		  // back motor
		  if(channel_data.channel2 >= CRSF_CHANNEL_VALUE_MID + deadband)
 8001b7e:	4ba5      	ldr	r3, [pc, #660]	; (8001e14 <main+0x5cc>)
 8001b80:	785a      	ldrb	r2, [r3, #1]
 8001b82:	08d2      	lsrs	r2, r2, #3
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	789b      	ldrb	r3, [r3, #2]
 8001b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b8c:	015b      	lsls	r3, r3, #5
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f240 4243 	movw	r2, #1091	; 0x443
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d924      	bls.n	8001be4 <main+0x39c>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_MID + deadband, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true); // correct this
 8001b9a:	4b9e      	ldr	r3, [pc, #632]	; (8001e14 <main+0x5cc>)
 8001b9c:	785a      	ldrb	r2, [r3, #1]
 8001b9e:	08d2      	lsrs	r2, r2, #3
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	789b      	ldrb	r3, [r3, #2]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	015b      	lsls	r3, r3, #5
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8001e2c <main+0x5e4>
 8001bbc:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8001e30 <main+0x5e8>
 8001bc0:	ed9f 1a97 	vldr	s2, [pc, #604]	; 8001e20 <main+0x5d8>
 8001bc4:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001e34 <main+0x5ec>
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	f000 fa58 	bl	8002080 <map>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd8:	ee17 3a90 	vmov	r3, s15
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <main+0x5e0>)
 8001be0:	801a      	strh	r2, [r3, #0]
 8001be2:	e034      	b.n	8001c4e <main+0x406>
		  else if(channel_data.channel2 <= CRSF_CHANNEL_VALUE_MID - deadband)
 8001be4:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <main+0x5cc>)
 8001be6:	785a      	ldrb	r2, [r3, #1]
 8001be8:	08d2      	lsrs	r2, r2, #3
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	789b      	ldrb	r3, [r3, #2]
 8001bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf2:	015b      	lsls	r3, r3, #5
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f5b3 7f5f 	cmp.w	r3, #892	; 0x37c
 8001bfc:	d824      	bhi.n	8001c48 <main+0x400>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_MID - deadband, DSHOT_3DR_MAX_THROTTLE, DSHOT_3DR_MIN_THROTTLE, true); // correct this
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <main+0x5cc>)
 8001c00:	785a      	ldrb	r2, [r3, #1]
 8001c02:	08d2      	lsrs	r2, r2, #3
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	789b      	ldrb	r3, [r3, #2]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8001e1c <main+0x5d4>
 8001c20:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8001e18 <main+0x5d0>
 8001c24:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8001e38 <main+0x5f0>
 8001c28:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8001e24 <main+0x5dc>
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f000 fa26 	bl	8002080 <map>
 8001c34:	eef0 7a40 	vmov.f32	s15, s0
 8001c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3c:	ee17 3a90 	vmov	r3, s15
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <main+0x5e0>)
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	e002      	b.n	8001c4e <main+0x406>
		  else
			  my_motor_value[0]= DSHOT_3D_NEUTRAL;
 8001c48:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <main+0x5e0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]


		  angle = map(channel_data.channel1,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 8001c4e:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <main+0x5cc>)
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c66:	2001      	movs	r0, #1
 8001c68:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8001e3c <main+0x5f4>
 8001c6c:	eddf 1a74 	vldr	s3, [pc, #464]	; 8001e40 <main+0x5f8>
 8001c70:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8001e20 <main+0x5d8>
 8001c74:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8001e24 <main+0x5dc>
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	f000 fa00 	bl	8002080 <map>
 8001c80:	eef0 7a40 	vmov.f32	s15, s0
 8001c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c88:	ee17 2a90 	vmov	r2, s15
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <main+0x5fc>)
 8001c8e:	601a      	str	r2, [r3, #0]
		  average_motor_values[0][0] = map(channel_data.channel10,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,750, 2500,true);
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <main+0x5cc>)
 8001c92:	7b1a      	ldrb	r2, [r3, #12]
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	7b5b      	ldrb	r3, [r3, #13]
 8001c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cac:	2001      	movs	r0, #1
 8001cae:	ed9f 2a66 	vldr	s4, [pc, #408]	; 8001e48 <main+0x600>
 8001cb2:	eddf 1a66 	vldr	s3, [pc, #408]	; 8001e4c <main+0x604>
 8001cb6:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8001e20 <main+0x5d8>
 8001cba:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001e24 <main+0x5dc>
 8001cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc2:	f000 f9dd 	bl	8002080 <map>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cce:	ee17 3a90 	vmov	r3, s15
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <main+0x608>)
 8001cd6:	801a      	strh	r2, [r3, #0]
		  average_motor_values[1][0] = map(channel_data.channel11,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <main+0x5cc>)
 8001cda:	7b5a      	ldrb	r2, [r3, #13]
 8001cdc:	0992      	lsrs	r2, r2, #6
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	7b99      	ldrb	r1, [r3, #14]
 8001ce2:	0089      	lsls	r1, r1, #2
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	7bdb      	ldrb	r3, [r3, #15]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	029b      	lsls	r3, r3, #10
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 8001e3c <main+0x5f4>
 8001d00:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8001e40 <main+0x5f8>
 8001d04:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8001e20 <main+0x5d8>
 8001d08:	eddf 0a46 	vldr	s1, [pc, #280]	; 8001e24 <main+0x5dc>
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	f000 f9b6 	bl	8002080 <map>
 8001d14:	eef0 7a40 	vmov.f32	s15, s0
 8001d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1c:	ee17 3a90 	vmov	r3, s15
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <main+0x608>)
 8001d24:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001d28:	e009      	b.n	8001d3e <main+0x4f6>
	  }
	  else{
		  my_motor_value[0] = 0;
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <main+0x5e0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
		  my_motor_value[2] = 0;
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <main+0x5e0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	809a      	strh	r2, [r3, #4]
		  angle  = (min_servo+max_servo)/2;
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <main+0x5fc>)
 8001d38:	f240 621d 	movw	r2, #1565	; 0x61d
 8001d3c:	601a      	str	r2, [r3, #0]
	  }

	  for(int j = 0; j < number_of_motors;j++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e00c      	b.n	8001d5e <main+0x516>
		  {
			  final_motor_values[j] = 0;
 8001d44:	4a43      	ldr	r2, [pc, #268]	; (8001e54 <main+0x60c>)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	18d1      	adds	r1, r2, r3
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int j = 0; j < number_of_motors;j++)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	ddef      	ble.n	8001d44 <main+0x4fc>
			  // shift to right
		  }
	  for (int i = 0 ; i < total_number_of_samples ; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	e030      	b.n	8001dcc <main+0x584>
	  	  {
	  		  for(int j = 0; j < number_of_motors;j++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	e027      	b.n	8001dc0 <main+0x578>
	  		  {
	  			  final_motor_values[j] += (average_motor_values[j][i])/total_number_of_samples;
 8001d70:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <main+0x60c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d7c:	4934      	ldr	r1, [pc, #208]	; (8001e50 <main+0x608>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2264      	movs	r2, #100	; 0x64
 8001d82:	fb03 f202 	mul.w	r2, r3, r2
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d8e:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <main+0x610>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb67 	bl	800046c <__aeabi_i2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa15 	bl	80001d4 <__adddf3>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4829      	ldr	r0, [pc, #164]	; (8001e54 <main+0x60c>)
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	00c9      	lsls	r1, r1, #3
 8001db4:	4401      	add	r1, r0
 8001db6:	e9c1 2300 	strd	r2, r3, [r1]
	  		  for(int j = 0; j < number_of_motors;j++)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	ddd4      	ble.n	8001d70 <main+0x528>
	  for (int i = 0 ; i < total_number_of_samples ; i++)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b63      	cmp	r3, #99	; 0x63
 8001dd0:	ddcb      	ble.n	8001d6a <main+0x522>
	  		  }
	  	  }
	  anglex = (int)(final_motor_values[0]);
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <main+0x60c>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fdc2 	bl	8000964 <__aeabi_d2iz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <main+0x614>)
 8001de4:	6013      	str	r3, [r2, #0]
	  angley = (int)(final_motor_values[1]);
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <main+0x60c>)
 8001de8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe fdb8 	bl	8000964 <__aeabi_d2iz>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <main+0x618>)
 8001df8:	6013      	str	r3, [r2, #0]

	  if(arm_state == FAILSAFE )
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <main+0x61c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d13f      	bne.n	8001e82 <main+0x63a>
	  {
		  if(!(USART6->SR && (1<<3)))
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <main+0x620>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d130      	bne.n	8001e6c <main+0x624>
		  {
			  // not over run error
			  dshot_beep(0,2);
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fc85 	bl	800171c <dshot_beep>
 8001e12:	e02e      	b.n	8001e72 <main+0x62a>
 8001e14:	20000104 	.word	0x20000104
 8001e18:	44ffe000 	.word	0x44ffe000
 8001e1c:	4483e000 	.word	0x4483e000
 8001e20:	44e00000 	.word	0x44e00000
 8001e24:	433f0000 	.word	0x433f0000
 8001e28:	2000036c 	.word	0x2000036c
 8001e2c:	447a0000 	.word	0x447a0000
 8001e30:	42400000 	.word	0x42400000
 8001e34:	44888000 	.word	0x44888000
 8001e38:	445f0000 	.word	0x445f0000
 8001e3c:	45084000 	.word	0x45084000
 8001e40:	446d8000 	.word	0x446d8000
 8001e44:	20000374 	.word	0x20000374
 8001e48:	451c4000 	.word	0x451c4000
 8001e4c:	443b8000 	.word	0x443b8000
 8001e50:	2000038c 	.word	0x2000038c
 8001e54:	20000520 	.word	0x20000520
 8001e58:	51eb851f 	.word	0x51eb851f
 8001e5c:	20000378 	.word	0x20000378
 8001e60:	2000037c 	.word	0x2000037c
 8001e64:	20000380 	.word	0x20000380
 8001e68:	40011400 	.word	0x40011400
		  }else
		  {
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
			  HAL_UART_ErrorCallback(&huart6);
 8001e6c:	483e      	ldr	r0, [pc, #248]	; (8001f68 <main+0x720>)
 8001e6e:	f7fe ff3f 	bl	8000cf0 <HAL_UART_ErrorCallback>
		  }
		  dshot_beep(2,2);
 8001e72:	2102      	movs	r1, #2
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7ff fc51 	bl	800171c <dshot_beep>
		  angle = 1000;
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <main+0x724>)
 8001e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e80:	601a      	str	r2, [r3, #0]

	  }
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 ,angle);
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <main+0x724>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <main+0x728>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1 ,anglex);
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <main+0x72c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <main+0x730>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2 ,angley);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <main+0x734>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <main+0x730>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
	  if(my_motor_value[0] == 0 && my_motor_value[2] == 0 && channel_data.channel9 > 1500)
 8001ea0:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <main+0x738>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d118      	bne.n	8001eda <main+0x692>
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <main+0x738>)
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d114      	bne.n	8001eda <main+0x692>
 8001eb0:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <main+0x73c>)
 8001eb2:	7ada      	ldrb	r2, [r3, #11]
 8001eb4:	7b1b      	ldrb	r3, [r3, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d908      	bls.n	8001eda <main+0x692>
	  {
		  dshot_beep(0,2);
 8001ec8:	2102      	movs	r1, #2
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fc26 	bl	800171c <dshot_beep>
		  dshot_beep(2,2);
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f7ff fc22 	bl	800171c <dshot_beep>
 8001ed8:	e003      	b.n	8001ee2 <main+0x69a>
	  }else{
	  dshot_write(my_motor_value , false);
 8001eda:	2100      	movs	r1, #0
 8001edc:	4828      	ldr	r0, [pc, #160]	; (8001f80 <main+0x738>)
 8001ede:	f7ff fa41 	bl	8001364 <dshot_write>

	  }


	  // telemetry
	  if((uint16_t)(HAL_GetTick() - telem_last_sent) > 500 && arm_state != FAILSAFE && sent_telemetry) // send battery telemetry every 500ms
 8001ee2:	f000 ffd1 	bl	8002e88 <HAL_GetTick>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <main+0x740>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ef6:	d912      	bls.n	8001f1e <main+0x6d6>
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <main+0x744>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d00e      	beq.n	8001f1e <main+0x6d6>
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <main+0x748>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <main+0x6d6>
	  {
		  send_telemetry = true;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <main+0x74c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
		  sent_telemetry = false;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <main+0x748>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)raw_adc_data , 2); // take readings from adc
 8001f14:	2202      	movs	r2, #2
 8001f16:	4920      	ldr	r1, [pc, #128]	; (8001f98 <main+0x750>)
 8001f18:	4820      	ldr	r0, [pc, #128]	; (8001f9c <main+0x754>)
 8001f1a:	f001 f939 	bl	8003190 <HAL_ADC_Start_DMA>
		 // in future before sending check whether old data sent or not
	  }


	// FAILSAFE detection
	  if((uint32_t)(HAL_GetTick() - last_packet_received_time) > 500) //no packet received in 1 second
 8001f1e:	f000 ffb3 	bl	8002e88 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <main+0x758>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f2e:	d90b      	bls.n	8001f48 <main+0x700>
	  {
		  arm_state = FAILSAFE;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <main+0x744>)
 8001f32:	2204      	movs	r2, #4
 8001f34:	701a      	strb	r2, [r3, #0]
		  new_packet_recieved = false;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <main+0x75c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
		  last_packet_received_time = HAL_GetTick();
 8001f3c:	f000 ffa4 	bl	8002e88 <HAL_GetTick>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <main+0x758>)
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e4d7      	b.n	80018f8 <main+0xb0>

	  }else if(arm_state == FAILSAFE && new_packet_recieved == true)
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <main+0x744>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	f47f acd3 	bne.w	80018f8 <main+0xb0>
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <main+0x75c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f43f accd 	beq.w	80018f8 <main+0xb0>
	  {
		  arm_state = IDLE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <main+0x744>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
	  for (int i = total_number_of_samples-1 ; i >0  ; i--)
 8001f64:	e4c8      	b.n	80018f8 <main+0xb0>
 8001f66:	bf00      	nop
 8001f68:	20000710 	.word	0x20000710
 8001f6c:	20000374 	.word	0x20000374
 8001f70:	20000608 	.word	0x20000608
 8001f74:	20000378 	.word	0x20000378
 8001f78:	200005c0 	.word	0x200005c0
 8001f7c:	2000037c 	.word	0x2000037c
 8001f80:	2000036c 	.word	0x2000036c
 8001f84:	20000104 	.word	0x20000104
 8001f88:	20000222 	.word	0x20000222
 8001f8c:	20000380 	.word	0x20000380
 8001f90:	20000001 	.word	0x20000001
 8001f94:	20000221 	.word	0x20000221
 8001f98:	20000384 	.word	0x20000384
 8001f9c:	20000228 	.word	0x20000228
 8001fa0:	2000021c 	.word	0x2000021c
 8001fa4:	20000220 	.word	0x20000220

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b094      	sub	sp, #80	; 0x50
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2230      	movs	r2, #48	; 0x30
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 f97a 	bl	80072b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <SystemClock_Config+0xd0>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a28      	ldr	r2, [pc, #160]	; (8002078 <SystemClock_Config+0xd0>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b26      	ldr	r3, [pc, #152]	; (8002078 <SystemClock_Config+0xd0>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <SystemClock_Config+0xd4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <SystemClock_Config+0xd4>)
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <SystemClock_Config+0xd4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002004:	2301      	movs	r3, #1
 8002006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200e:	2302      	movs	r3, #2
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002018:	2308      	movs	r3, #8
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002024:	2304      	movs	r3, #4
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fb6b 	bl	8004708 <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002038:	f000 f986 	bl	8002348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002040:	2302      	movs	r3, #2
 8002042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002048:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800204c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800204e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fdcc 	bl	8004bf8 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002066:	f000 f96f 	bl	8002348 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800206a:	f002 feab 	bl	8004dc4 <HAL_RCC_EnableCSS>
}
 800206e:	bf00      	nop
 8002070:	3750      	adds	r7, #80	; 0x50
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000

08002080 <map>:

/* USER CODE BEGIN 4 */

float map(float value_to_map , float from_low ,float from_high , float to_low , float to_high , bool constrain_within_range)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a05 	vstr	s0, [r7, #20]
 800208a:	edc7 0a04 	vstr	s1, [r7, #16]
 800208e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002092:	edc7 1a02 	vstr	s3, [r7, #8]
 8002096:	ed87 2a01 	vstr	s4, [r7, #4]
 800209a:	4603      	mov	r3, r0
 800209c:	70fb      	strb	r3, [r7, #3]

	value_to_map = (value_to_map- from_low)*((to_high - to_low)/(from_high- from_low)) + to_low;
 800209e:	ed97 7a05 	vldr	s14, [r7, #20]
 80020a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020aa:	edd7 6a01 	vldr	s13, [r7, #4]
 80020ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80020b2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80020b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80020ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80020be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	edc7 7a05 	vstr	s15, [r7, #20]
	if(constrain_within_range)
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03d      	beq.n	8002158 <map+0xd8>
	{
		if(to_high>=to_low){
 80020dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	db1a      	blt.n	8002124 <map+0xa4>
			value_to_map = value_to_map > to_high ? to_high : value_to_map;
 80020ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80020f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	dd01      	ble.n	8002104 <map+0x84>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	e000      	b.n	8002106 <map+0x86>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map < to_low ? to_low : value_to_map;
 8002108:	ed97 7a05 	vldr	s14, [r7, #20]
 800210c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d501      	bpl.n	800211e <map+0x9e>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	e000      	b.n	8002120 <map+0xa0>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e019      	b.n	8002158 <map+0xd8>
		}else{
			// to low is the higher limit
			value_to_map = value_to_map < to_high ? to_high : value_to_map;
 8002124:	ed97 7a05 	vldr	s14, [r7, #20]
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	d501      	bpl.n	800213a <map+0xba>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e000      	b.n	800213c <map+0xbc>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map > to_low ? to_low : value_to_map;
 800213e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002142:	edd7 7a02 	vldr	s15, [r7, #8]
 8002146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	dd01      	ble.n	8002154 <map+0xd4>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	e000      	b.n	8002156 <map+0xd6>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	617b      	str	r3, [r7, #20]

		}
	}
	return value_to_map;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	ee07 3a90 	vmov	s15, r3
}
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	0000      	movs	r0, r0
	...

08002170 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	f040 80c0 	bne.w	8002304 <HAL_ADC_ConvCpltCallback+0x194>
	{
		bat.voltage = (uint16_t)(((raw_adc_data[0]*3.3/(float)1024)*vbat_scale*vbat_multiplier/(float)vbat_divider)*10.0); // battery voltage in 0.1V units
 8002184:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f96e 	bl	800046c <__aeabi_i2d>
 8002190:	a35f      	add	r3, pc, #380	; (adr r3, 8002310 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe f9d3 	bl	8000540 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80021a8:	f7fe faf4 	bl	8000794 <__aeabi_ddiv>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80021ba:	f7fe f9c1 	bl	8000540 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80021cc:	f7fe fae2 	bl	8000794 <__aeabi_ddiv>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b52      	ldr	r3, [pc, #328]	; (8002328 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80021de:	f7fe f9af 	bl	8000540 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fbe3 	bl	80009b4 <__aeabi_d2uiz>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80021f4:	801a      	strh	r2, [r3, #0]
		bat.current = (uint16_t)(((raw_adc_data[1]*3.3/(float)1024)*ibata_scale - ibata_offset)*10.0); // battery voltage in 0.1A units
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80021f8:	885b      	ldrh	r3, [r3, #2]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f935 	bl	800046c <__aeabi_i2d>
 8002202:	a343      	add	r3, pc, #268	; (adr r3, 8002310 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe f99a 	bl	8000540 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800221a:	f7fe fabb 	bl	8000794 <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800222c:	f7fe f988 	bl	8000540 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_ADC_ConvCpltCallback+0x1b8>)
 800223e:	f7fe f97f 	bl	8000540 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fbb3 	bl	80009b4 <__aeabi_d2uiz>
 800224e:	4603      	mov	r3, r0
 8002250:	b29a      	uxth	r2, r3
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002254:	805a      	strh	r2, [r3, #2]
		if(first_startup)
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d025      	beq.n	80022aa <HAL_ADC_ConvCpltCallback+0x13a>
		{   first_startup = false;
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
			if(bat.voltage > 152)
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b98      	cmp	r3, #152	; 0x98
 800226c:	d906      	bls.n	800227c <HAL_ADC_ConvCpltCallback+0x10c>
			{
				//4s
				bat_0_voltage = 152;
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002270:	2298      	movs	r2, #152	; 0x98
 8002272:	601a      	str	r2, [r3, #0]
				bat_100_voltage = 168;
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8002276:	22a8      	movs	r2, #168	; 0xa8
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e016      	b.n	80022aa <HAL_ADC_ConvCpltCallback+0x13a>
			}else if(bat.voltage > 114)
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b72      	cmp	r3, #114	; 0x72
 8002284:	d906      	bls.n	8002294 <HAL_ADC_ConvCpltCallback+0x124>
			{
				//3s
				bat_0_voltage = 114;
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002288:	2272      	movs	r2, #114	; 0x72
 800228a:	601a      	str	r2, [r3, #0]
				bat_100_voltage = 126;
 800228c:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_ADC_ConvCpltCallback+0x1cc>)
 800228e:	227e      	movs	r2, #126	; 0x7e
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e00a      	b.n	80022aa <HAL_ADC_ConvCpltCallback+0x13a>
			}else if(bat.voltage > 76)
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b4c      	cmp	r3, #76	; 0x4c
 800229c:	d905      	bls.n	80022aa <HAL_ADC_ConvCpltCallback+0x13a>
			{
				//3s
				bat_0_voltage = 76;
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80022a0:	224c      	movs	r2, #76	; 0x4c
 80022a2:	601a      	str	r2, [r3, #0]
				bat_100_voltage = 84;
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_ADC_ConvCpltCallback+0x1cc>)
 80022a6:	2254      	movs	r2, #84	; 0x54
 80022a8:	601a      	str	r2, [r3, #0]
			}

		}
		bat.remaining = (uint8_t)(map(bat.voltage,bat_0_voltage,bat_100_voltage,0,100,true));
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	ee07 3a10 	vmov	s14, r3
 80022c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_ADC_ConvCpltCallback+0x1cc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	ee06 3a90 	vmov	s13, r3
 80022cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80022d0:	2001      	movs	r0, #1
 80022d2:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8002340 <HAL_ADC_ConvCpltCallback+0x1d0>
 80022d6:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8002344 <HAL_ADC_ConvCpltCallback+0x1d4>
 80022da:	eeb0 1a66 	vmov.f32	s2, s13
 80022de:	eef0 0a47 	vmov.f32	s1, s14
 80022e2:	eeb0 0a67 	vmov.f32	s0, s15
 80022e6:	f7ff fecb 	bl	8002080 <map>
 80022ea:	eef0 7a40 	vmov.f32	s15, s0
 80022ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f2:	edc7 7a00 	vstr	s15, [r7]
 80022f6:	783b      	ldrb	r3, [r7, #0]
 80022f8:	b2d9      	uxtb	r1, r3
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80022fc:	79d3      	ldrb	r3, [r2, #7]
 80022fe:	f361 0307 	bfi	r3, r1, #0, #8
 8002302:	71d3      	strb	r3, [r2, #7]
	}
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	f3af 8000 	nop.w
 8002310:	66666666 	.word	0x66666666
 8002314:	400a6666 	.word	0x400a6666
 8002318:	40012000 	.word	0x40012000
 800231c:	20000384 	.word	0x20000384
 8002320:	40900000 	.word	0x40900000
 8002324:	405b8000 	.word	0x405b8000
 8002328:	40240000 	.word	0x40240000
 800232c:	20000004 	.word	0x20000004
 8002330:	40790000 	.word	0x40790000
 8002334:	20000014 	.word	0x20000014
 8002338:	2000000c 	.word	0x2000000c
 800233c:	20000010 	.word	0x20000010
 8002340:	42c80000 	.word	0x42c80000
 8002344:	00000000 	.word	0x00000000

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002350:	e7fe      	b.n	8002350 <Error_Handler+0x8>
	...

08002354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_MspInit+0x4c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_MspInit+0x4c>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_MspInit+0x4c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_MspInit+0x4c>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_MspInit+0x4c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80023a8:	f002 fe52 	bl	8005050 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <NMI_Handler+0x8>

080023ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <MemManage_Handler+0x4>

080023ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f4:	f000 fd34 	bl	8002e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <DMA1_Stream2_IRQHandler+0x10>)
 8002402:	f001 fd47 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200006b0 	.word	0x200006b0

08002410 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <DMA1_Stream6_IRQHandler+0x10>)
 8002416:	f001 fd3d 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000650 	.word	0x20000650

08002424 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <ADC_IRQHandler+0x10>)
 800242a:	f000 fda0 	bl	8002f6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000228 	.word	0x20000228

08002438 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <DMA2_Stream0_IRQHandler+0x10>)
 800243e:	f001 fd29 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000270 	.word	0x20000270

0800244c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <DMA2_Stream1_IRQHandler+0x10>)
 8002452:	f001 fd1f 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000754 	.word	0x20000754

08002460 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <DMA2_Stream6_IRQHandler+0x10>)
 8002466:	f001 fd15 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200007b4 	.word	0x200007b4

08002474 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <USART6_IRQHandler+0x10>)
 800247a:	f003 fe3b 	bl	80060f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000710 	.word	0x20000710

08002488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch2_ch4;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <MX_TIM2_Init+0xe4>)
 80024de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <MX_TIM2_Init+0xe4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <MX_TIM2_Init+0xe4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <MX_TIM2_Init+0xe4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <MX_TIM2_Init+0xe4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <MX_TIM2_Init+0xe4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002502:	4823      	ldr	r0, [pc, #140]	; (8002590 <MX_TIM2_Init+0xe4>)
 8002504:	f002 fdbf 	bl	8005086 <HAL_TIM_Base_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800250e:	f7ff ff1b 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251c:	4619      	mov	r1, r3
 800251e:	481c      	ldr	r0, [pc, #112]	; (8002590 <MX_TIM2_Init+0xe4>)
 8002520:	f002 ffe4 	bl	80054ec <HAL_TIM_ConfigClockSource>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800252a:	f7ff ff0d 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800252e:	4818      	ldr	r0, [pc, #96]	; (8002590 <MX_TIM2_Init+0xe4>)
 8002530:	f002 fdf8 	bl	8005124 <HAL_TIM_PWM_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800253a:	f7ff ff05 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	4619      	mov	r1, r3
 800254c:	4810      	ldr	r0, [pc, #64]	; (8002590 <MX_TIM2_Init+0xe4>)
 800254e:	f003 fba5 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002558:	f7ff fef6 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255c:	2360      	movs	r3, #96	; 0x60
 800255e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	220c      	movs	r2, #12
 8002570:	4619      	mov	r1, r3
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <MX_TIM2_Init+0xe4>)
 8002574:	f002 fef8 	bl	8005368 <HAL_TIM_PWM_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800257e:	f7ff fee3 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002582:	4803      	ldr	r0, [pc, #12]	; (8002590 <MX_TIM2_Init+0xe4>)
 8002584:	f000 fa5c 	bl	8002a40 <HAL_TIM_MspPostInit>

}
 8002588:	bf00      	nop
 800258a:	3738      	adds	r7, #56	; 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000530 	.word	0x20000530

08002594 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025c6:	4a2d      	ldr	r2, [pc, #180]	; (800267c <MX_TIM3_Init+0xe8>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b26      	ldr	r3, [pc, #152]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025e8:	4823      	ldr	r0, [pc, #140]	; (8002678 <MX_TIM3_Init+0xe4>)
 80025ea:	f002 fd4c 	bl	8005086 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80025f4:	f7ff fea8 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002602:	4619      	mov	r1, r3
 8002604:	481c      	ldr	r0, [pc, #112]	; (8002678 <MX_TIM3_Init+0xe4>)
 8002606:	f002 ff71 	bl	80054ec <HAL_TIM_ConfigClockSource>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002610:	f7ff fe9a 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002614:	4818      	ldr	r0, [pc, #96]	; (8002678 <MX_TIM3_Init+0xe4>)
 8002616:	f002 fd85 	bl	8005124 <HAL_TIM_PWM_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002620:	f7ff fe92 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800262c:	f107 0320 	add.w	r3, r7, #32
 8002630:	4619      	mov	r1, r3
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <MX_TIM3_Init+0xe4>)
 8002634:	f003 fb32 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800263e:	f7ff fe83 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002642:	2360      	movs	r3, #96	; 0x60
 8002644:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	220c      	movs	r2, #12
 8002656:	4619      	mov	r1, r3
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <MX_TIM3_Init+0xe4>)
 800265a:	f002 fe85 	bl	8005368 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002664:	f7ff fe70 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <MX_TIM3_Init+0xe4>)
 800266a:	f000 f9e9 	bl	8002a40 <HAL_TIM_MspPostInit>

}
 800266e:	bf00      	nop
 8002670:	3738      	adds	r7, #56	; 0x38
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000578 	.word	0x20000578
 800267c:	40000400 	.word	0x40000400

08002680 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	f107 0320 	add.w	r3, r7, #32
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	615a      	str	r2, [r3, #20]
 80026ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <MX_TIM4_Init+0xfc>)
 80026b2:	4a33      	ldr	r2, [pc, #204]	; (8002780 <MX_TIM4_Init+0x100>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <MX_TIM4_Init+0xfc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <MX_TIM4_Init+0xfc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026c2:	4b2e      	ldr	r3, [pc, #184]	; (800277c <MX_TIM4_Init+0xfc>)
 80026c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ca:	4b2c      	ldr	r3, [pc, #176]	; (800277c <MX_TIM4_Init+0xfc>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <MX_TIM4_Init+0xfc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026d6:	4829      	ldr	r0, [pc, #164]	; (800277c <MX_TIM4_Init+0xfc>)
 80026d8:	f002 fcd5 	bl	8005086 <HAL_TIM_Base_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80026e2:	f7ff fe31 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f0:	4619      	mov	r1, r3
 80026f2:	4822      	ldr	r0, [pc, #136]	; (800277c <MX_TIM4_Init+0xfc>)
 80026f4:	f002 fefa 	bl	80054ec <HAL_TIM_ConfigClockSource>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80026fe:	f7ff fe23 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002702:	481e      	ldr	r0, [pc, #120]	; (800277c <MX_TIM4_Init+0xfc>)
 8002704:	f002 fd0e 	bl	8005124 <HAL_TIM_PWM_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800270e:	f7ff fe1b 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800271a:	f107 0320 	add.w	r3, r7, #32
 800271e:	4619      	mov	r1, r3
 8002720:	4816      	ldr	r0, [pc, #88]	; (800277c <MX_TIM4_Init+0xfc>)
 8002722:	f003 fabb 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800272c:	f7ff fe0c 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002730:	2360      	movs	r3, #96	; 0x60
 8002732:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	480d      	ldr	r0, [pc, #52]	; (800277c <MX_TIM4_Init+0xfc>)
 8002748:	f002 fe0e 	bl	8005368 <HAL_TIM_PWM_ConfigChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002752:	f7ff fdf9 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2204      	movs	r2, #4
 800275a:	4619      	mov	r1, r3
 800275c:	4807      	ldr	r0, [pc, #28]	; (800277c <MX_TIM4_Init+0xfc>)
 800275e:	f002 fe03 	bl	8005368 <HAL_TIM_PWM_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002768:	f7ff fdee 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <MX_TIM4_Init+0xfc>)
 800276e:	f000 f967 	bl	8002a40 <HAL_TIM_MspPostInit>

}
 8002772:	bf00      	nop
 8002774:	3738      	adds	r7, #56	; 0x38
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200005c0 	.word	0x200005c0
 8002780:	40000800 	.word	0x40000800

08002784 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08e      	sub	sp, #56	; 0x38
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	f107 0320 	add.w	r3, r7, #32
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
 80027b0:	615a      	str	r2, [r3, #20]
 80027b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <MX_TIM5_Init+0xe8>)
 80027b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80027ba:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80027c6:	4b28      	ldr	r3, [pc, #160]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d2:	4b25      	ldr	r3, [pc, #148]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027d8:	4823      	ldr	r0, [pc, #140]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027da:	f002 fc54 	bl	8005086 <HAL_TIM_Base_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80027e4:	f7ff fdb0 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027f2:	4619      	mov	r1, r3
 80027f4:	481c      	ldr	r0, [pc, #112]	; (8002868 <MX_TIM5_Init+0xe4>)
 80027f6:	f002 fe79 	bl	80054ec <HAL_TIM_ConfigClockSource>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8002800:	f7ff fda2 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002804:	4818      	ldr	r0, [pc, #96]	; (8002868 <MX_TIM5_Init+0xe4>)
 8002806:	f002 fc8d 	bl	8005124 <HAL_TIM_PWM_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002810:	f7ff fd9a 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800281c:	f107 0320 	add.w	r3, r7, #32
 8002820:	4619      	mov	r1, r3
 8002822:	4811      	ldr	r0, [pc, #68]	; (8002868 <MX_TIM5_Init+0xe4>)
 8002824:	f003 fa3a 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800282e:	f7ff fd8b 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002832:	2360      	movs	r3, #96	; 0x60
 8002834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	4619      	mov	r1, r3
 8002848:	4807      	ldr	r0, [pc, #28]	; (8002868 <MX_TIM5_Init+0xe4>)
 800284a:	f002 fd8d 	bl	8005368 <HAL_TIM_PWM_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8002854:	f7ff fd78 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002858:	4803      	ldr	r0, [pc, #12]	; (8002868 <MX_TIM5_Init+0xe4>)
 800285a:	f000 f8f1 	bl	8002a40 <HAL_TIM_MspPostInit>

}
 800285e:	bf00      	nop
 8002860:	3738      	adds	r7, #56	; 0x38
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000608 	.word	0x20000608
 800286c:	40000c00 	.word	0x40000c00

08002870 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d14e      	bne.n	8002920 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028a0:	4a61      	ldr	r2, [pc, #388]	; (8002a28 <HAL_TIM_Base_MspInit+0x1b8>)
 80028a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ac:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028be:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028c0:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028c6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028c8:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ce:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028dc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028e0:	2204      	movs	r2, #4
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80028ea:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80028f6:	484b      	ldr	r0, [pc, #300]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 80028f8:	f001 f934 	bl	8003b64 <HAL_DMA_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8002902:	f7ff fd21 	bl	8002348 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a46      	ldr	r2, [pc, #280]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
 800290c:	4a45      	ldr	r2, [pc, #276]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
 8002918:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_TIM_Base_MspInit+0x1b4>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800291e:	e07a      	b.n	8002a16 <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a41      	ldr	r2, [pc, #260]	; (8002a2c <HAL_TIM_Base_MspInit+0x1bc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d14e      	bne.n	80029c8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002946:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002948:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_TIM_Base_MspInit+0x1c4>)
 800294a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800294c:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 800294e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002952:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002966:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 800296a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800296e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002976:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002984:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002988:	2204      	movs	r2, #4
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 8002994:	2200      	movs	r2, #0
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800299e:	4824      	ldr	r0, [pc, #144]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 80029a0:	f001 f8e0 	bl	8003b64 <HAL_DMA_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 80029aa:	f7ff fccd 	bl	8002348 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 80029be:	621a      	str	r2, [r3, #32]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_TIM_Base_MspInit+0x1c0>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029c6:	e026      	b.n	8002a16 <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_TIM_Base_MspInit+0x1c8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	e012      	b.n	8002a16 <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM5)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_TIM_Base_MspInit+0x1cc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10d      	bne.n	8002a16 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_TIM_Base_MspInit+0x1b0>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	20000650 	.word	0x20000650
 8002a28:	400260a0 	.word	0x400260a0
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	200006b0 	.word	0x200006b0
 8002a34:	40026040 	.word	0x40026040
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	40000c00 	.word	0x40000c00

08002a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d11e      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a45      	ldr	r2, [pc, #276]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a7e:	2308      	movs	r3, #8
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	483a      	ldr	r0, [pc, #232]	; (8002b84 <HAL_TIM_MspPostInit+0x144>)
 8002a9a:	f001 fc65 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a9e:	e06a      	b.n	8002b76 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_TIM_MspPostInit+0x148>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a33      	ldr	r2, [pc, #204]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 031c 	add.w	r3, r7, #28
 8002ade:	4619      	mov	r1, r3
 8002ae0:	482a      	ldr	r0, [pc, #168]	; (8002b8c <HAL_TIM_MspPostInit+0x14c>)
 8002ae2:	f001 fc41 	bl	8004368 <HAL_GPIO_Init>
}
 8002ae6:	e046      	b.n	8002b76 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <HAL_TIM_MspPostInit+0x150>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11e      	bne.n	8002b30 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b0e:	23c0      	movs	r3, #192	; 0xc0
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4818      	ldr	r0, [pc, #96]	; (8002b8c <HAL_TIM_MspPostInit+0x14c>)
 8002b2a:	f001 fc1d 	bl	8004368 <HAL_GPIO_Init>
}
 8002b2e:	e022      	b.n	8002b76 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM5)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_TIM_MspPostInit+0x154>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d11d      	bne.n	8002b76 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_TIM_MspPostInit+0x140>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b66:	2302      	movs	r3, #2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <HAL_TIM_MspPostInit+0x144>)
 8002b72:	f001 fbf9 	bl	8004368 <HAL_GPIO_Init>
}
 8002b76:	bf00      	nop
 8002b78:	3730      	adds	r7, #48	; 0x30
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00

08002b98 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <MX_USART6_UART_Init+0x4c>)
 8002ba0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 416666;
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002ba4:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <MX_USART6_UART_Init+0x50>)
 8002ba6:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bcc:	4804      	ldr	r0, [pc, #16]	; (8002be0 <MX_USART6_UART_Init+0x48>)
 8002bce:	f003 f8e1 	bl	8005d94 <HAL_UART_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8002bd8:	f7ff fbb6 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000710 	.word	0x20000710
 8002be4:	40011400 	.word	0x40011400
 8002be8:	00065b9a 	.word	0x00065b9a

08002bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_UART_MspInit+0x160>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	f040 809a 	bne.w	8002d44 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	4a4d      	ldr	r2, [pc, #308]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c20:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4a46      	ldr	r2, [pc, #280]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3c:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_UART_MspInit+0x164>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c48:	23c0      	movs	r3, #192	; 0xc0
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c58:	2308      	movs	r3, #8
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	483c      	ldr	r0, [pc, #240]	; (8002d54 <HAL_UART_MspInit+0x168>)
 8002c64:	f001 fb80 	bl	8004368 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002c68:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c6a:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <HAL_UART_MspInit+0x170>)
 8002c6c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c70:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002c74:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c82:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c88:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ca2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cb6:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cbc:	4826      	ldr	r0, [pc, #152]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002cbe:	f000 ff51 	bl	8003b64 <HAL_DMA_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002cc8:	f7ff fb3e 	bl	8002348 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8002cd2:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_UART_MspInit+0x16c>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002cd8:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_UART_MspInit+0x178>)
 8002cdc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002ce0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ce4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002d18:	4811      	ldr	r0, [pc, #68]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d1a:	f000 ff23 	bl	8003b64 <HAL_DMA_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002d24:	f7ff fb10 	bl	8002348 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <HAL_UART_MspInit+0x174>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2101      	movs	r1, #1
 8002d38:	2047      	movs	r0, #71	; 0x47
 8002d3a:	f000 fedc 	bl	8003af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d3e:	2047      	movs	r0, #71	; 0x47
 8002d40:	f000 fef5 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d44:	bf00      	nop
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40020800 	.word	0x40020800
 8002d58:	20000754 	.word	0x20000754
 8002d5c:	40026428 	.word	0x40026428
 8002d60:	200007b4 	.word	0x200007b4
 8002d64:	400264a0 	.word	0x400264a0

08002d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d6c:	480d      	ldr	r0, [pc, #52]	; (8002da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d6e:	490e      	ldr	r1, [pc, #56]	; (8002da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d70:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d74:	e002      	b.n	8002d7c <LoopCopyDataInit>

08002d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7a:	3304      	adds	r3, #4

08002d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d80:	d3f9      	bcc.n	8002d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d82:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d84:	4c0b      	ldr	r4, [pc, #44]	; (8002db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d88:	e001      	b.n	8002d8e <LoopFillZerobss>

08002d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d8c:	3204      	adds	r2, #4

08002d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d90:	d3fb      	bcc.n	8002d8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d92:	f7ff fb79 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d96:	f004 fa93 	bl	80072c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9a:	f7fe fd55 	bl	8001848 <main>
  bx  lr    
 8002d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002dac:	080073f4 	.word	0x080073f4
  ldr r2, =_sbss
 8002db0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002db4:	20000818 	.word	0x20000818

08002db8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <CAN1_RX0_IRQHandler>
	...

08002dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <HAL_Init+0x40>)
 8002dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_Init+0x40>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_Init+0x40>)
 8002dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de4:	2003      	movs	r0, #3
 8002de6:	f000 fe7b 	bl	8003ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dea:	200f      	movs	r0, #15
 8002dec:	f000 f808 	bl	8002e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df0:	f7ff fab0 	bl	8002354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00

08002e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_InitTick+0x54>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_InitTick+0x58>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4619      	mov	r1, r3
 8002e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fe93 	bl	8003b4a <HAL_SYSTICK_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00e      	b.n	8002e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b0f      	cmp	r3, #15
 8002e32:	d80a      	bhi.n	8002e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e34:	2200      	movs	r2, #0
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f000 fe5b 	bl	8003af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e40:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <HAL_InitTick+0x5c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000018 	.word	0x20000018
 8002e58:	20000020 	.word	0x20000020
 8002e5c:	2000001c 	.word	0x2000001c

08002e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_IncTick+0x20>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_IncTick+0x24>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_IncTick+0x24>)
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000020 	.word	0x20000020
 8002e84:	20000814 	.word	0x20000814

08002e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_GetTick+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000814 	.word	0x20000814

08002ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff ffee 	bl	8002e88 <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d005      	beq.n	8002ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_Delay+0x44>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ec6:	bf00      	nop
 8002ec8:	f7ff ffde 	bl	8002e88 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d8f7      	bhi.n	8002ec8 <HAL_Delay+0x28>
  {
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000020 	.word	0x20000020

08002ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e033      	b.n	8002f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f944 	bl	8001194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d118      	bne.n	8002f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f2e:	f023 0302 	bic.w	r3, r3, #2
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fb78 	bl	8003630 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
 8002f56:	e001      	b.n	8002f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d049      	beq.n	8003038 <HAL_ADC_IRQHandler+0xca>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d046      	beq.n	8003038 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d12b      	bne.n	8003028 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d127      	bne.n	8003028 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d119      	bne.n	8003028 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0220 	bic.w	r2, r2, #32
 8003002:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff f8a1 	bl	8002170 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f06f 0212 	mvn.w	r2, #18
 8003036:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d057      	beq.n	80030fe <HAL_ADC_IRQHandler+0x190>
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d054      	beq.n	80030fe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d139      	bne.n	80030ee <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003092:	2b00      	cmp	r3, #0
 8003094:	d12b      	bne.n	80030ee <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d124      	bne.n	80030ee <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11d      	bne.n	80030ee <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d119      	bne.n	80030ee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fc1c 	bl	800392c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 020c 	mvn.w	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d017      	beq.n	8003144 <HAL_ADC_IRQHandler+0x1d6>
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10d      	bne.n	8003144 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f945 	bl	80033c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0201 	mvn.w	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003152:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d015      	beq.n	8003186 <HAL_ADC_IRQHandler+0x218>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0220 	mvn.w	r2, #32
 8003174:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f92e 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0220 	mvn.w	r2, #32
 8003184:	601a      	str	r2, [r3, #0]
  }
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_Start_DMA+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0e9      	b.n	8003382 <HAL_ADC_Start_DMA+0x1f2>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d018      	beq.n	80031f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031d4:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_ADC_Start_DMA+0x1fc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6d      	ldr	r2, [pc, #436]	; (8003390 <HAL_ADC_Start_DMA+0x200>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0c9a      	lsrs	r2, r3, #18
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031e8:	e002      	b.n	80031f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f9      	bne.n	80031ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003204:	d107      	bne.n	8003216 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003214:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	f040 80a1 	bne.w	8003368 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003250:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d106      	bne.n	8003274 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f023 0206 	bic.w	r2, r3, #6
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
 8003272:	e002      	b.n	800327a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003282:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_ADC_Start_DMA+0x204>)
 8003284:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4a43      	ldr	r2, [pc, #268]	; (8003398 <HAL_ADC_Start_DMA+0x208>)
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	4a42      	ldr	r2, [pc, #264]	; (800339c <HAL_ADC_Start_DMA+0x20c>)
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a41      	ldr	r2, [pc, #260]	; (80033a0 <HAL_ADC_Start_DMA+0x210>)
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	334c      	adds	r3, #76	; 0x4c
 80032d2:	4619      	mov	r1, r3
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f000 fcf2 	bl	8003cc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12a      	bne.n	800333e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_ADC_Start_DMA+0x214>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d015      	beq.n	800331e <HAL_ADC_Start_DMA+0x18e>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <HAL_ADC_Start_DMA+0x218>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_Start_DMA+0x178>
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_ADC_Start_DMA+0x204>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_ADC_Start_DMA+0x21c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d136      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_ADC_Start_DMA+0x204>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d129      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e020      	b.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_ADC_Start_DMA+0x214>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11b      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d114      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e00b      	b.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000018 	.word	0x20000018
 8003390:	431bde83 	.word	0x431bde83
 8003394:	40012300 	.word	0x40012300
 8003398:	08003829 	.word	0x08003829
 800339c:	080038e3 	.word	0x080038e3
 80033a0:	080038ff 	.word	0x080038ff
 80033a4:	40012000 	.word	0x40012000
 80033a8:	40012100 	.word	0x40012100
 80033ac:	40012200 	.word	0x40012200

080033b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e105      	b.n	8003614 <HAL_ADC_ConfigChannel+0x228>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b09      	cmp	r3, #9
 8003416:	d925      	bls.n	8003464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68d9      	ldr	r1, [r3, #12]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	3b1e      	subs	r3, #30
 800342e:	2207      	movs	r2, #7
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43da      	mvns	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	400a      	ands	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68d9      	ldr	r1, [r3, #12]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	4618      	mov	r0, r3
 8003450:	4603      	mov	r3, r0
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4403      	add	r3, r0
 8003456:	3b1e      	subs	r3, #30
 8003458:	409a      	lsls	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	e022      	b.n	80034aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	2207      	movs	r2, #7
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6919      	ldr	r1, [r3, #16]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4618      	mov	r0, r3
 800349a:	4603      	mov	r3, r0
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4403      	add	r3, r0
 80034a0:	409a      	lsls	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d824      	bhi.n	80034fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b05      	subs	r3, #5
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b05      	subs	r3, #5
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34
 80034fa:	e04c      	b.n	8003596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d824      	bhi.n	800354e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	3b23      	subs	r3, #35	; 0x23
 8003516:	221f      	movs	r2, #31
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43da      	mvns	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	400a      	ands	r2, r1
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	3b23      	subs	r3, #35	; 0x23
 8003540:	fa00 f203 	lsl.w	r2, r0, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
 800354c:	e023      	b.n	8003596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b41      	subs	r3, #65	; 0x41
 8003560:	221f      	movs	r2, #31
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	3b41      	subs	r3, #65	; 0x41
 800358a:	fa00 f203 	lsl.w	r2, r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_ADC_ConfigChannel+0x234>)
 8003598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <HAL_ADC_ConfigChannel+0x238>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x1cc>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b12      	cmp	r3, #18
 80035aa:	d105      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <HAL_ADC_ConfigChannel+0x238>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d123      	bne.n	800360a <HAL_ADC_ConfigChannel+0x21e>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d003      	beq.n	80035d2 <HAL_ADC_ConfigChannel+0x1e6>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b11      	cmp	r3, #17
 80035d0:	d11b      	bne.n	800360a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d111      	bne.n	800360a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_ADC_ConfigChannel+0x23c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <HAL_ADC_ConfigChannel+0x240>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	0c9a      	lsrs	r2, r3, #18
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035fc:	e002      	b.n	8003604 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3b01      	subs	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f9      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40012300 	.word	0x40012300
 8003624:	40012000 	.word	0x40012000
 8003628:	20000018 	.word	0x20000018
 800362c:	431bde83 	.word	0x431bde83

08003630 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003638:	4b79      	ldr	r3, [pc, #484]	; (8003820 <ADC_Init+0x1f0>)
 800363a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	4a58      	ldr	r2, [pc, #352]	; (8003824 <ADC_Init+0x1f4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6899      	ldr	r1, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	e00f      	b.n	800372e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800372c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0202 	bic.w	r2, r2, #2
 800373c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	005a      	lsls	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800377a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	3b01      	subs	r3, #1
 8003788:	035a      	lsls	r2, r3, #13
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e007      	b.n	80037a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	3b01      	subs	r3, #1
 80037c0:	051a      	lsls	r2, r3, #20
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037e6:	025a      	lsls	r2, r3, #9
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	029a      	lsls	r2, r3, #10
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40012300 	.word	0x40012300
 8003824:	0f000001 	.word	0x0f000001

08003828 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800383e:	2b00      	cmp	r3, #0
 8003840:	d13c      	bne.n	80038bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d12b      	bne.n	80038b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	d127      	bne.n	80038b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800387c:	2b00      	cmp	r3, #0
 800387e:	d119      	bne.n	80038b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0220 	bic.w	r2, r2, #32
 800388e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fe fc5b 	bl	8002170 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038ba:	e00e      	b.n	80038da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fd85 	bl	80033d8 <HAL_ADC_ErrorCallback>
}
 80038ce:	e004      	b.n	80038da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f7ff fd5d 	bl	80033b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fd5a 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800395c:	4013      	ands	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	60d3      	str	r3, [r2, #12]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__NVIC_GetPriorityGrouping+0x18>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	db0b      	blt.n	80039ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	4907      	ldr	r1, [pc, #28]	; (80039dc <__NVIC_EnableIRQ+0x38>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2001      	movs	r0, #1
 80039c6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	e000e100 	.word	0xe000e100

080039e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	db0a      	blt.n	8003a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	490c      	ldr	r1, [pc, #48]	; (8003a2c <__NVIC_SetPriority+0x4c>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	0112      	lsls	r2, r2, #4
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	440b      	add	r3, r1
 8003a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a08:	e00a      	b.n	8003a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4908      	ldr	r1, [pc, #32]	; (8003a30 <__NVIC_SetPriority+0x50>)
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	3b04      	subs	r3, #4
 8003a18:	0112      	lsls	r2, r2, #4
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	761a      	strb	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f1c3 0307 	rsb	r3, r3, #7
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	bf28      	it	cs
 8003a52:	2304      	movcs	r3, #4
 8003a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d902      	bls.n	8003a64 <NVIC_EncodePriority+0x30>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3b03      	subs	r3, #3
 8003a62:	e000      	b.n	8003a66 <NVIC_EncodePriority+0x32>
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	401a      	ands	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	43d9      	mvns	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	4313      	orrs	r3, r2
         );
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aac:	d301      	bcc.n	8003ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00f      	b.n	8003ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <SysTick_Config+0x40>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aba:	210f      	movs	r1, #15
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac0:	f7ff ff8e 	bl	80039e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <SysTick_Config+0x40>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <SysTick_Config+0x40>)
 8003acc:	2207      	movs	r2, #7
 8003ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000e010 	.word	0xe000e010

08003ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff29 	bl	8003940 <__NVIC_SetPriorityGrouping>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b08:	f7ff ff3e 	bl	8003988 <__NVIC_GetPriorityGrouping>
 8003b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f7ff ff8e 	bl	8003a34 <NVIC_EncodePriority>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff5d 	bl	80039e0 <__NVIC_SetPriority>
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff31 	bl	80039a4 <__NVIC_EnableIRQ>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ffa2 	bl	8003a9c <SysTick_Config>
 8003b58:	4603      	mov	r3, r0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b70:	f7ff f98a 	bl	8002e88 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e099      	b.n	8003cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba0:	e00f      	b.n	8003bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba2:	f7ff f971 	bl	8002e88 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d908      	bls.n	8003bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e078      	b.n	8003cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e8      	bne.n	8003ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_DMA_Init+0x158>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d107      	bne.n	8003c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	4313      	orrs	r3, r2
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d117      	bne.n	8003c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb01 	bl	8004270 <DMA_CheckFifoParam>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c82:	2301      	movs	r3, #1
 8003c84:	e016      	b.n	8003cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fab8 	bl	8004204 <DMA_CalcBaseAndBitshift>
 8003c94:	4603      	mov	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	223f      	movs	r2, #63	; 0x3f
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	f010803f 	.word	0xf010803f

08003cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_DMA_Start_IT+0x26>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e040      	b.n	8003d68 <HAL_DMA_Start_IT+0xa8>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d12f      	bne.n	8003d5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa4a 	bl	80041a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	223f      	movs	r2, #63	; 0x3f
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0216 	orr.w	r2, r2, #22
 8003d2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e005      	b.n	8003d66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
 8003d64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d7e:	f7ff f883 	bl	8002e88 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e052      	b.n	8003e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0216 	bic.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_DMA_Abort+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	e013      	b.n	8003e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df4:	f7ff f848 	bl	8002e88 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d90c      	bls.n	8003e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e015      	b.n	8003e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e4      	bne.n	8003df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	223f      	movs	r2, #63	; 0x3f
 8003e30:	409a      	lsls	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ea0:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <HAL_DMA_IRQHandler+0x248>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a8e      	ldr	r2, [pc, #568]	; (80040e0 <HAL_DMA_IRQHandler+0x24c>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01a      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0204 	bic.w	r2, r2, #4
 8003ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2208      	movs	r2, #8
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2201      	movs	r2, #1
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2204      	movs	r2, #4
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0204 	orr.w	r2, r3, #4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	2210      	movs	r2, #16
 8003f72:	409a      	lsls	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d043      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d03c      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	2210      	movs	r2, #16
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d018      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d024      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e01f      	b.n	8004004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
 8003fd4:	e016      	b.n	8004004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0208 	bic.w	r2, r2, #8
 8003ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	2220      	movs	r2, #32
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 808f 	beq.w	8004134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8087 	beq.w	8004134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	2220      	movs	r2, #32
 800402c:	409a      	lsls	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b05      	cmp	r3, #5
 800403c:	d136      	bne.n	80040ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0216 	bic.w	r2, r2, #22
 800404c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800405c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_DMA_IRQHandler+0x1da>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0208 	bic.w	r2, r2, #8
 800407c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	223f      	movs	r2, #63	; 0x3f
 8004084:	409a      	lsls	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d07e      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
        }
        return;
 80040aa:	e079      	b.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01d      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d031      	beq.n	8004134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e02c      	b.n	8004134 <HAL_DMA_IRQHandler+0x2a0>
 80040da:	bf00      	nop
 80040dc:	20000018 	.word	0x20000018
 80040e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e01e      	b.n	8004134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0210 	bic.w	r2, r2, #16
 8004112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	2b00      	cmp	r3, #0
 800413a:	d032      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2205      	movs	r2, #5
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3301      	adds	r3, #1
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	429a      	cmp	r2, r3
 800416a:	d307      	bcc.n	800417c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f2      	bne.n	8004160 <HAL_DMA_IRQHandler+0x2cc>
 800417a:	e000      	b.n	800417e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800417c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
 800419e:	e000      	b.n	80041a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80041a0:	bf00      	nop
    }
  }
}
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d108      	bne.n	80041e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041e6:	e007      	b.n	80041f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	3b10      	subs	r3, #16
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <DMA_CalcBaseAndBitshift+0x64>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <DMA_CalcBaseAndBitshift+0x68>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d909      	bls.n	8004246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	659a      	str	r2, [r3, #88]	; 0x58
 8004244:	e007      	b.n	8004256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	080073d4 	.word	0x080073d4

08004270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d856      	bhi.n	800433e <DMA_CheckFifoParam+0xce>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x28>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042bb 	.word	0x080042bb
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	0800433f 	.word	0x0800433f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d046      	beq.n	8004342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e043      	b.n	8004342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c2:	d140      	bne.n	8004346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e03d      	b.n	8004346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d121      	bne.n	8004318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d837      	bhi.n	800434a <DMA_CheckFifoParam+0xda>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <DMA_CheckFifoParam+0x70>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f7 	.word	0x080042f7
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004309 	.word	0x08004309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e030      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d025      	beq.n	800434e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004306:	e022      	b.n	800434e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004310:	d11f      	bne.n	8004352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004316:	e01c      	b.n	8004352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d903      	bls.n	8004326 <DMA_CheckFifoParam+0xb6>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d003      	beq.n	800432c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004324:	e018      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      break;
 800432a:	e015      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	e00b      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 800433e:	bf00      	nop
 8004340:	e00a      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e008      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e006      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;   
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
    }
  } 
  
  return status; 
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e16b      	b.n	800465c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	f040 815a 	bne.w	8004656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d005      	beq.n	80043ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d130      	bne.n	800441c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 0201 	and.w	r2, r3, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d017      	beq.n	8004458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d123      	bne.n	80044ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3208      	adds	r2, #8
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	220f      	movs	r2, #15
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	08da      	lsrs	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3208      	adds	r2, #8
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0203 	and.w	r2, r3, #3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80b4 	beq.w	8004656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b60      	ldr	r3, [pc, #384]	; (8004674 <HAL_GPIO_Init+0x30c>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	4a5f      	ldr	r2, [pc, #380]	; (8004674 <HAL_GPIO_Init+0x30c>)
 80044f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044fc:	6453      	str	r3, [r2, #68]	; 0x44
 80044fe:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <HAL_GPIO_Init+0x30c>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450a:	4a5b      	ldr	r2, [pc, #364]	; (8004678 <HAL_GPIO_Init+0x310>)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a52      	ldr	r2, [pc, #328]	; (800467c <HAL_GPIO_Init+0x314>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x226>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a51      	ldr	r2, [pc, #324]	; (8004680 <HAL_GPIO_Init+0x318>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x222>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a50      	ldr	r2, [pc, #320]	; (8004684 <HAL_GPIO_Init+0x31c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x21e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4f      	ldr	r2, [pc, #316]	; (8004688 <HAL_GPIO_Init+0x320>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x21a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a4e      	ldr	r2, [pc, #312]	; (800468c <HAL_GPIO_Init+0x324>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x216>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <HAL_GPIO_Init+0x328>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x212>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a4c      	ldr	r2, [pc, #304]	; (8004694 <HAL_GPIO_Init+0x32c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x20e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a4b      	ldr	r2, [pc, #300]	; (8004698 <HAL_GPIO_Init+0x330>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x20a>
 800456e:	2307      	movs	r3, #7
 8004570:	e00e      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004572:	2308      	movs	r3, #8
 8004574:	e00c      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004576:	2306      	movs	r3, #6
 8004578:	e00a      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800457a:	2305      	movs	r3, #5
 800457c:	e008      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800457e:	2304      	movs	r3, #4
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004582:	2303      	movs	r3, #3
 8004584:	e004      	b.n	8004590 <HAL_GPIO_Init+0x228>
 8004586:	2302      	movs	r3, #2
 8004588:	e002      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_GPIO_Init+0x228>
 800458e:	2300      	movs	r3, #0
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	f002 0203 	and.w	r2, r2, #3
 8004596:	0092      	lsls	r2, r2, #2
 8004598:	4093      	lsls	r3, r2
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a0:	4935      	ldr	r1, [pc, #212]	; (8004678 <HAL_GPIO_Init+0x310>)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	3302      	adds	r3, #2
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_GPIO_Init+0x334>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045d2:	4a32      	ldr	r2, [pc, #200]	; (800469c <HAL_GPIO_Init+0x334>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d8:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_GPIO_Init+0x334>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045fc:	4a27      	ldr	r2, [pc, #156]	; (800469c <HAL_GPIO_Init+0x334>)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_GPIO_Init+0x334>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_GPIO_Init+0x334>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_GPIO_Init+0x334>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004650:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_GPIO_Init+0x334>)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3301      	adds	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b0f      	cmp	r3, #15
 8004660:	f67f ae90 	bls.w	8004384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3724      	adds	r7, #36	; 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	40013800 	.word	0x40013800
 800467c:	40020000 	.word	0x40020000
 8004680:	40020400 	.word	0x40020400
 8004684:	40020800 	.word	0x40020800
 8004688:	40020c00 	.word	0x40020c00
 800468c:	40021000 	.word	0x40021000
 8004690:	40021400 	.word	0x40021400
 8004694:	40021800 	.word	0x40021800
 8004698:	40021c00 	.word	0x40021c00
 800469c:	40013c00 	.word	0x40013c00

080046a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
 80046ac:	4613      	mov	r3, r2
 80046ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046b0:	787b      	ldrb	r3, [r7, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046b6:	887a      	ldrh	r2, [r7, #2]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046bc:	e003      	b.n	80046c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046be:	887b      	ldrh	r3, [r7, #2]
 80046c0:	041a      	lsls	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	619a      	str	r2, [r3, #24]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046e4:	887a      	ldrh	r2, [r7, #2]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4013      	ands	r3, r2
 80046ea:	041a      	lsls	r2, r3, #16
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	43d9      	mvns	r1, r3
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	400b      	ands	r3, r1
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e267      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d075      	beq.n	8004812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00c      	beq.n	800474c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004732:	4b85      	ldr	r3, [pc, #532]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	2b08      	cmp	r3, #8
 800473c:	d112      	bne.n	8004764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473e:	4b82      	ldr	r3, [pc, #520]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800474a:	d10b      	bne.n	8004764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	4b7e      	ldr	r3, [pc, #504]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05b      	beq.n	8004810 <HAL_RCC_OscConfig+0x108>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d157      	bne.n	8004810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e242      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d106      	bne.n	800477c <HAL_RCC_OscConfig+0x74>
 800476e:	4b76      	ldr	r3, [pc, #472]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a75      	ldr	r2, [pc, #468]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0xb0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x98>
 8004786:	4b70      	ldr	r3, [pc, #448]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a6f      	ldr	r2, [pc, #444]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b6d      	ldr	r3, [pc, #436]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6c      	ldr	r2, [pc, #432]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0xb0>
 80047a0:	4b69      	ldr	r3, [pc, #420]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a68      	ldr	r2, [pc, #416]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b66      	ldr	r3, [pc, #408]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a65      	ldr	r2, [pc, #404]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fe fb62 	bl	8002e88 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fe fb5e 	bl	8002e88 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e207      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0xc0>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fe fb4e 	bl	8002e88 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f0:	f7fe fb4a 	bl	8002e88 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e1f3      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	4b51      	ldr	r3, [pc, #324]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0xe8>
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d063      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481e:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482a:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	2b08      	cmp	r3, #8
 8004834:	d11c      	bne.n	8004870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004836:	4b44      	ldr	r3, [pc, #272]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	4b41      	ldr	r3, [pc, #260]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_RCC_OscConfig+0x152>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e1c7      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485a:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4937      	ldr	r1, [pc, #220]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	e03a      	b.n	80048e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_RCC_OscConfig+0x244>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fe fb03 	bl	8002e88 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004886:	f7fe faff 	bl	8002e88 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e1a8      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	4b2b      	ldr	r3, [pc, #172]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4925      	ldr	r1, [pc, #148]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	e015      	b.n	80048e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCC_OscConfig+0x244>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fe fae2 	bl	8002e88 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c8:	f7fe fade 	bl	8002e88 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e187      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d036      	beq.n	8004960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_RCC_OscConfig+0x248>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fe fac2 	bl	8002e88 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004908:	f7fe fabe 	bl	8002e88 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e167      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_OscConfig+0x240>)
 800491c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x200>
 8004926:	e01b      	b.n	8004960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_OscConfig+0x248>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7fe faab 	bl	8002e88 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	e00e      	b.n	8004954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004936:	f7fe faa7 	bl	8002e88 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d907      	bls.n	8004954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e150      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
 8004948:	40023800 	.word	0x40023800
 800494c:	42470000 	.word	0x42470000
 8004950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	4b88      	ldr	r3, [pc, #544]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ea      	bne.n	8004936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8097 	beq.w	8004a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004972:	4b81      	ldr	r3, [pc, #516]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	4b7d      	ldr	r3, [pc, #500]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	4a7c      	ldr	r2, [pc, #496]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498c:	6413      	str	r3, [r2, #64]	; 0x40
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b77      	ldr	r3, [pc, #476]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d118      	bne.n	80049dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a73      	ldr	r2, [pc, #460]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b6:	f7fe fa67 	bl	8002e88 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fe fa63 	bl	8002e88 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e10c      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b6a      	ldr	r3, [pc, #424]	; (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x2ea>
 80049e4:	4b64      	ldr	r3, [pc, #400]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	4a63      	ldr	r2, [pc, #396]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70
 80049f0:	e01c      	b.n	8004a2c <HAL_RCC_OscConfig+0x324>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x30c>
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a5e      	ldr	r2, [pc, #376]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
 8004a06:	4b5c      	ldr	r3, [pc, #368]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a5b      	ldr	r2, [pc, #364]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0x324>
 8004a14:	4b58      	ldr	r3, [pc, #352]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a57      	ldr	r2, [pc, #348]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b55      	ldr	r3, [pc, #340]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a54      	ldr	r2, [pc, #336]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a26:	f023 0304 	bic.w	r3, r3, #4
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe fa28 	bl	8002e88 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fe fa24 	bl	8002e88 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0cb      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ee      	beq.n	8004a3c <HAL_RCC_OscConfig+0x334>
 8004a5e:	e014      	b.n	8004a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a60:	f7fe fa12 	bl	8002e88 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fe fa0e 	bl	8002e88 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0b5      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ee      	bne.n	8004a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	4a38      	ldr	r2, [pc, #224]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a1 	beq.w	8004be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa6:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d05c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d141      	bne.n	8004b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe f9e2 	bl	8002e88 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fe f9de 	bl	8002e88 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e087      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	491b      	ldr	r1, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe f9b7 	bl	8002e88 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe f9b3 	bl	8002e88 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e05c      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x416>
 8004b3c:	e054      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fe f9a0 	bl	8002e88 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fe f99c 	bl	8002e88 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e045      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x444>
 8004b6a:	e03d      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e038      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b84:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4ec>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d028      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d121      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d11a      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800

08004bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0cc      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d90c      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b65      	ldr	r3, [pc, #404]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0b8      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c4c:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a58      	ldr	r2, [pc, #352]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c64:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a52      	ldr	r2, [pc, #328]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	494d      	ldr	r1, [pc, #308]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d044      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d119      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e06f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e067      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd6:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f023 0203 	bic.w	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4934      	ldr	r1, [pc, #208]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce8:	f7fe f8ce 	bl	8002e88 <HAL_GetTick>
 8004cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf0:	f7fe f8ca 	bl	8002e88 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e04f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 020c 	and.w	r2, r3, #12
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d1eb      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d20c      	bcs.n	8004d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e032      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	490e      	ldr	r1, [pc, #56]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d7e:	f000 f82d 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8004d82:	4602      	mov	r2, r0
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	490a      	ldr	r1, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	5ccb      	ldrb	r3, [r1, r3]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe f82e 	bl	8002e00 <HAL_InitTick>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023c00 	.word	0x40023c00
 8004db4:	40023800 	.word	0x40023800
 8004db8:	080073bc 	.word	0x080073bc
 8004dbc:	20000018 	.word	0x20000018
 8004dc0:	2000001c 	.word	0x2000001c

08004dc4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <HAL_RCC_EnableCSS+0x14>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	4247004c 	.word	0x4247004c

08004ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de0:	b094      	sub	sp, #80	; 0x50
 8004de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	647b      	str	r3, [r7, #68]	; 0x44
 8004de8:	2300      	movs	r3, #0
 8004dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dec:	2300      	movs	r3, #0
 8004dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df4:	4b79      	ldr	r3, [pc, #484]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d00d      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x40>
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	f200 80e1 	bhi.w	8004fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x34>
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d003      	beq.n	8004e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0e:	e0db      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e14:	e0db      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e16:	4b73      	ldr	r3, [pc, #460]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e1a:	e0d8      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e26:	4b6d      	ldr	r3, [pc, #436]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d063      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e32:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	2200      	movs	r2, #0
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e44:	633b      	str	r3, [r7, #48]	; 0x30
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e4e:	4622      	mov	r2, r4
 8004e50:	462b      	mov	r3, r5
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	0159      	lsls	r1, r3, #5
 8004e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e60:	0150      	lsls	r0, r2, #5
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4621      	mov	r1, r4
 8004e68:	1a51      	subs	r1, r2, r1
 8004e6a:	6139      	str	r1, [r7, #16]
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e80:	4659      	mov	r1, fp
 8004e82:	018b      	lsls	r3, r1, #6
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	018a      	lsls	r2, r1, #6
 8004e8e:	4651      	mov	r1, sl
 8004e90:	ebb2 0801 	subs.w	r8, r2, r1
 8004e94:	4659      	mov	r1, fp
 8004e96:	eb63 0901 	sbc.w	r9, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	eb18 0303 	adds.w	r3, r8, r3
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	462b      	mov	r3, r5
 8004ebc:	eb49 0303 	adc.w	r3, r9, r3
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	024b      	lsls	r3, r1, #9
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed8:	4621      	mov	r1, r4
 8004eda:	024a      	lsls	r2, r1, #9
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eec:	f7fb fd82 	bl	80009f4 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef8:	e058      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efa:	4b38      	ldr	r3, [pc, #224]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	2200      	movs	r2, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	4611      	mov	r1, r2
 8004f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	f04f 0000 	mov.w	r0, #0
 8004f1c:	f04f 0100 	mov.w	r1, #0
 8004f20:	0159      	lsls	r1, r3, #5
 8004f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f26:	0150      	lsls	r0, r2, #5
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f32:	4649      	mov	r1, r9
 8004f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f50:	eb63 050b 	sbc.w	r5, r3, fp
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	00eb      	lsls	r3, r5, #3
 8004f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f62:	00e2      	lsls	r2, r4, #3
 8004f64:	4614      	mov	r4, r2
 8004f66:	461d      	mov	r5, r3
 8004f68:	4643      	mov	r3, r8
 8004f6a:	18e3      	adds	r3, r4, r3
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	464b      	mov	r3, r9
 8004f70:	eb45 0303 	adc.w	r3, r5, r3
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f82:	4629      	mov	r1, r5
 8004f84:	028b      	lsls	r3, r1, #10
 8004f86:	4621      	mov	r1, r4
 8004f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	028a      	lsls	r2, r1, #10
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f96:	2200      	movs	r2, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	61fa      	str	r2, [r7, #28]
 8004f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa0:	f7fb fd28 	bl	80009f4 <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc6:	e002      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3750      	adds	r7, #80	; 0x50
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	007a1200 	.word	0x007a1200

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000018 	.word	0x20000018

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005004:	f7ff fff0 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0a9b      	lsrs	r3, r3, #10
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	080073cc 	.word	0x080073cc

08005028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800502c:	f7ff ffdc 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0b5b      	lsrs	r3, r3, #13
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4903      	ldr	r1, [pc, #12]	; (800504c <HAL_RCC_GetPCLK2Freq+0x24>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800
 800504c:	080073cc 	.word	0x080073cc

08005050 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d104      	bne.n	800506a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005060:	f000 f80a 	bl	8005078 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	701a      	strb	r2, [r3, #0]
  }
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	4002380e 	.word	0x4002380e

08005078 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e041      	b.n	800511c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fd fbdf 	bl	8002870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f000 fad9 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e041      	b.n	80051ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f839 	bl	80051c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f000 fa8a 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x24>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e022      	b.n	8005242 <HAL_TIM_PWM_Start+0x6a>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d109      	bne.n	8005216 <HAL_TIM_PWM_Start+0x3e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e015      	b.n	8005242 <HAL_TIM_PWM_Start+0x6a>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x58>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e008      	b.n	8005242 <HAL_TIM_PWM_Start+0x6a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07c      	b.n	8005344 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Start+0x82>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005258:	e013      	b.n	8005282 <HAL_TIM_PWM_Start+0xaa>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start+0x92>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	e00b      	b.n	8005282 <HAL_TIM_PWM_Start+0xaa>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start+0xa2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005278:	e003      	b.n	8005282 <HAL_TIM_PWM_Start+0xaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fce0 	bl	8005c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2d      	ldr	r2, [pc, #180]	; (800534c <HAL_TIM_PWM_Start+0x174>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_TIM_PWM_Start+0xcc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2c      	ldr	r2, [pc, #176]	; (8005350 <HAL_TIM_PWM_Start+0x178>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_PWM_Start+0xd0>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_TIM_PWM_Start+0xd2>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a22      	ldr	r2, [pc, #136]	; (800534c <HAL_TIM_PWM_Start+0x174>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d022      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d01d      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <HAL_TIM_PWM_Start+0x17c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <HAL_TIM_PWM_Start+0x180>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1c      	ldr	r2, [pc, #112]	; (800535c <HAL_TIM_PWM_Start+0x184>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a16      	ldr	r2, [pc, #88]	; (8005350 <HAL_TIM_PWM_Start+0x178>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_TIM_PWM_Start+0x188>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Start+0x136>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <HAL_TIM_PWM_Start+0x18c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b06      	cmp	r3, #6
 800531e:	d010      	beq.n	8005342 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005330:	e007      	b.n	8005342 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40010000 	.word	0x40010000
 8005350:	40010400 	.word	0x40010400
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40001800 	.word	0x40001800

08005368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005382:	2302      	movs	r3, #2
 8005384:	e0ae      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b0c      	cmp	r3, #12
 8005392:	f200 809f 	bhi.w	80054d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080054d5 	.word	0x080054d5
 80053a4:	080054d5 	.word	0x080054d5
 80053a8:	080054d5 	.word	0x080054d5
 80053ac:	08005411 	.word	0x08005411
 80053b0:	080054d5 	.word	0x080054d5
 80053b4:	080054d5 	.word	0x080054d5
 80053b8:	080054d5 	.word	0x080054d5
 80053bc:	08005453 	.word	0x08005453
 80053c0:	080054d5 	.word	0x080054d5
 80053c4:	080054d5 	.word	0x080054d5
 80053c8:	080054d5 	.word	0x080054d5
 80053cc:	08005493 	.word	0x08005493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f9f0 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0208 	orr.w	r2, r2, #8
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0204 	bic.w	r2, r2, #4
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	619a      	str	r2, [r3, #24]
      break;
 800540e:	e064      	b.n	80054da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fa40 	bl	800589c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	021a      	lsls	r2, r3, #8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	619a      	str	r2, [r3, #24]
      break;
 8005450:	e043      	b.n	80054da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fa95 	bl	8005988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0208 	orr.w	r2, r2, #8
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0204 	bic.w	r2, r2, #4
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
      break;
 8005490:	e023      	b.n	80054da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fae9 	bl	8005a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	021a      	lsls	r2, r3, #8
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	61da      	str	r2, [r3, #28]
      break;
 80054d2:	e002      	b.n	80054da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
      break;
 80054d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIM_ConfigClockSource+0x1c>
 8005504:	2302      	movs	r3, #2
 8005506:	e0b4      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x186>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005540:	d03e      	beq.n	80055c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005546:	f200 8087 	bhi.w	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554e:	f000 8086 	beq.w	800565e <HAL_TIM_ConfigClockSource+0x172>
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d87f      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b70      	cmp	r3, #112	; 0x70
 800555a:	d01a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xa6>
 800555c:	2b70      	cmp	r3, #112	; 0x70
 800555e:	d87b      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b60      	cmp	r3, #96	; 0x60
 8005562:	d050      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x11a>
 8005564:	2b60      	cmp	r3, #96	; 0x60
 8005566:	d877      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b50      	cmp	r3, #80	; 0x50
 800556a:	d03c      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0xfa>
 800556c:	2b50      	cmp	r3, #80	; 0x50
 800556e:	d873      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d058      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x13a>
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d86f      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b30      	cmp	r3, #48	; 0x30
 800557a:	d064      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d86b      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b20      	cmp	r3, #32
 8005582:	d060      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d867      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 800558c:	2b10      	cmp	r3, #16
 800558e:	d05a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 8005590:	e062      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6899      	ldr	r1, [r3, #8]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f000 fb35 	bl	8005c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	609a      	str	r2, [r3, #8]
      break;
 80055be:	e04f      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6899      	ldr	r1, [r3, #8]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f000 fb1e 	bl	8005c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e2:	609a      	str	r2, [r3, #8]
      break;
 80055e4:	e03c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f000 fa92 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2150      	movs	r1, #80	; 0x50
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 faeb 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005604:	e02c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	461a      	mov	r2, r3
 8005614:	f000 fab1 	bl	8005b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2160      	movs	r1, #96	; 0x60
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fadb 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005624:	e01c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	461a      	mov	r2, r3
 8005634:	f000 fa72 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	4618      	mov	r0, r3
 8005640:	f000 facb 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005644:	e00c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f000 fac2 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 8005656:	e003      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      break;
 800565c:	e000      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800565e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3b      	ldr	r2, [pc, #236]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <TIM_Base_SetConfig+0x114>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d027      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d023      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d017      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <TIM_Base_SetConfig+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a26      	ldr	r2, [pc, #152]	; (80057ac <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	40001800 	.word	0x40001800
 80057b4:	40001c00 	.word	0x40001c00
 80057b8:	40002000 	.word	0x40002000

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0302 	bic.w	r3, r3, #2
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC1_SetConfig+0x64>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10c      	bne.n	800583a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0308 	bic.w	r3, r3, #8
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC1_SetConfig+0x8e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400

0800589c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0210 	bic.w	r2, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0320 	bic.w	r3, r3, #32
 80058e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a22      	ldr	r2, [pc, #136]	; (8005980 <TIM_OC2_SetConfig+0xe4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC2_SetConfig+0x68>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <TIM_OC2_SetConfig+0xe8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10d      	bne.n	8005920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC2_SetConfig+0xe4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_OC2_SetConfig+0x94>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <TIM_OC2_SetConfig+0xe8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d113      	bne.n	8005958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400

08005988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10d      	bne.n	8005a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_OC3_SetConfig+0x92>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d113      	bne.n	8005a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <TIM_OC4_SetConfig+0xa4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <TIM_OC4_SetConfig+0xa8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d109      	bne.n	8005aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	019b      	lsls	r3, r3, #6
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0210 	bic.w	r2, r3, #16
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f043 0307 	orr.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	2201      	movs	r2, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e05a      	b.n	8005d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d01d      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10c      	bne.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40001800 	.word	0x40001800

08005d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e03f      	b.n	8005e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc ff16 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2224      	movs	r2, #36	; 0x24
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fff5 	bl	8006dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08c      	sub	sp, #48	; 0x30
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d165      	bne.n	8005f16 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_UART_Transmit_DMA+0x26>
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e05e      	b.n	8005f18 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UART_Transmit_DMA+0x38>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e057      	b.n	8005f18 <HAL_UART_Transmit_DMA+0xe8>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2221      	movs	r2, #33	; 0x21
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <HAL_UART_Transmit_DMA+0xf0>)
 8005e96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <HAL_UART_Transmit_DMA+0xf4>)
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <HAL_UART_Transmit_DMA+0xf8>)
 8005ea6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	2200      	movs	r2, #0
 8005eae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f7fd fefa 	bl	8003cc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	617b      	str	r3, [r7, #20]
   return(result);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efe:	627a      	str	r2, [r7, #36]	; 0x24
 8005f00:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6a39      	ldr	r1, [r7, #32]
 8005f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e5      	bne.n	8005ede <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e000      	b.n	8005f18 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005f16:	2302      	movs	r3, #2
  }
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3730      	adds	r7, #48	; 0x30
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	08006661 	.word	0x08006661
 8005f24:	080066fb 	.word	0x080066fb
 8005f28:	08006873 	.word	0x08006873

08005f2c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b090      	sub	sp, #64	; 0x40
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f42:	2b80      	cmp	r3, #128	; 0x80
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b21      	cmp	r3, #33	; 0x21
 8005f58:	d128      	bne.n	8005fac <HAL_UART_DMAStop+0x80>
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d025      	beq.n	8005fac <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3314      	adds	r3, #20
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f80:	633a      	str	r2, [r7, #48]	; 0x30
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fd fee5 	bl	8003d70 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fd4c 	bl	8006a44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	bf0c      	ite	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	2300      	movne	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b22      	cmp	r3, #34	; 0x22
 8005fcc:	d128      	bne.n	8006020 <HAL_UART_DMAStop+0xf4>
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d025      	beq.n	8006020 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff4:	61fa      	str	r2, [r7, #28]
 8005ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	617b      	str	r3, [r7, #20]
   return(result);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	4618      	mov	r0, r3
 8006016:	f7fd feab 	bl	8003d70 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fd3a 	bl	8006a94 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3740      	adds	r7, #64	; 0x40
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08c      	sub	sp, #48	; 0x30
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	4613      	mov	r3, r2
 8006036:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d152      	bne.n	80060ea <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e04b      	b.n	80060ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800605e:	2302      	movs	r3, #2
 8006060:	e044      	b.n	80060ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	461a      	mov	r2, r3
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fc46 	bl	8006908 <UART_Start_Receive_DMA>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006086:	2b00      	cmp	r3, #0
 8006088:	d12c      	bne.n	80060e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	2b01      	cmp	r3, #1
 8006090:	d125      	bne.n	80060de <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	617b      	str	r3, [r7, #20]
   return(result);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f043 0310 	orr.w	r3, r3, #16
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c8:	627a      	str	r2, [r7, #36]	; 0x24
 80060ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6a39      	ldr	r1, [r7, #32]
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80060dc:	e002      	b.n	80060e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80060e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060e8:	e000      	b.n	80060ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
  }
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3730      	adds	r7, #48	; 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0ba      	sub	sp, #232	; 0xe8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800611a:	2300      	movs	r3, #0
 800611c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_UART_IRQHandler+0x66>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd7d 	bl	8006c52 <UART_Receive_IT>
      return;
 8006158:	e256      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800615a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80de 	beq.w	8006320 <HAL_UART_IRQHandler+0x22c>
 8006164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80d1 	beq.w	8006320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_UART_IRQHandler+0xae>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_UART_IRQHandler+0xd2>
 80061ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0202 	orr.w	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <HAL_UART_IRQHandler+0xf6>
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f043 0204 	orr.w	r2, r3, #4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <HAL_UART_IRQHandler+0x126>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0208 	orr.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 81ed 	beq.w	80065fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_UART_IRQHandler+0x14e>
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fd08 	bl	8006c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_UART_IRQHandler+0x17a>
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04f      	beq.n	800630e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fc10 	bl	8006a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d141      	bne.n	8006306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d9      	bne.n	8006282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	4a7d      	ldr	r2, [pc, #500]	; (80064d0 <HAL_UART_IRQHandler+0x3dc>)
 80062dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fdb4 	bl	8003e50 <HAL_DMA_Abort_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	e00e      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fa fcf6 	bl	8000cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	e00a      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fa fcf2 	bl	8000cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	e006      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fa fcee 	bl	8000cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800631a:	e170      	b.n	80065fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	bf00      	nop
    return;
 800631e:	e16e      	b.n	80065fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 814a 	bne.w	80065be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8143 	beq.w	80065be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 813c 	beq.w	80065be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	60bb      	str	r3, [r7, #8]
 800635a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	f040 80b4 	bne.w	80064d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8140 	beq.w	8006602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800638a:	429a      	cmp	r2, r3
 800638c:	f080 8139 	bcs.w	8006602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	f000 8088 	beq.w	80064b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800641a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800641e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e1      	bne.n	80063f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800643e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006498:	65ba      	str	r2, [r7, #88]	; 0x58
 800649a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800649e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e3      	bne.n	8006474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fd fc5d 	bl	8003d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fa fca2 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064cc:	e099      	b.n	8006602 <HAL_UART_IRQHandler+0x50e>
 80064ce:	bf00      	nop
 80064d0:	08006b5b 	.word	0x08006b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 808b 	beq.w	8006606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8086 	beq.w	8006606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800651e:	647a      	str	r2, [r7, #68]	; 0x44
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	623b      	str	r3, [r7, #32]
   return(result);
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f023 0301 	bic.w	r3, r3, #1
 8006548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006556:	633a      	str	r2, [r7, #48]	; 0x30
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60fb      	str	r3, [r7, #12]
   return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	69b9      	ldr	r1, [r7, #24]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	617b      	str	r3, [r7, #20]
   return(result);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e3      	bne.n	8006578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fa fc2a 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065bc:	e023      	b.n	8006606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_UART_IRQHandler+0x4ea>
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fad3 	bl	8006b82 <UART_Transmit_IT>
    return;
 80065dc:	e014      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_UART_IRQHandler+0x514>
 80065ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb13 	bl	8006c22 <UART_EndTransmit_IT>
    return;
 80065fc:	e004      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
    return;
 80065fe:	bf00      	nop
 8006600:	e002      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
      return;
 8006602:	bf00      	nop
 8006604:	e000      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
      return;
 8006606:	bf00      	nop
  }
}
 8006608:	37e8      	adds	r7, #232	; 0xe8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b090      	sub	sp, #64	; 0x40
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d137      	bne.n	80066ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800667c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667e:	2200      	movs	r2, #0
 8006680:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	623b      	str	r3, [r7, #32]
   return(result);
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006698:	63bb      	str	r3, [r7, #56]	; 0x38
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a2:	633a      	str	r2, [r7, #48]	; 0x30
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e5      	bne.n	8006682 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d6:	61fa      	str	r2, [r7, #28]
 80066d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	617b      	str	r3, [r7, #20]
   return(result);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066ea:	e002      	b.n	80066f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80066ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066ee:	f7ff ff8f 	bl	8006610 <HAL_UART_TxCpltCallback>
}
 80066f2:	bf00      	nop
 80066f4:	3740      	adds	r7, #64	; 0x40
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff ff8b 	bl	8006624 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b09c      	sub	sp, #112	; 0x70
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d172      	bne.n	8006818 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006734:	2200      	movs	r2, #0
 8006736:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006758:	65ba      	str	r2, [r7, #88]	; 0x58
 800675a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800675e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e5      	bne.n	8006738 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3314      	adds	r3, #20
 8006772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	667b      	str	r3, [r7, #100]	; 0x64
 8006784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3314      	adds	r3, #20
 800678a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800678c:	647a      	str	r2, [r7, #68]	; 0x44
 800678e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e5      	bne.n	800676c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3314      	adds	r3, #20
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	623b      	str	r3, [r7, #32]
   return(result);
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b6:	663b      	str	r3, [r7, #96]	; 0x60
 80067b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3314      	adds	r3, #20
 80067be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067c0:	633a      	str	r2, [r7, #48]	; 0x30
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e5      	bne.n	80067a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d119      	bne.n	8006818 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0310 	bic.w	r3, r3, #16
 80067fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006804:	61fa      	str	r2, [r7, #28]
 8006806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	69b9      	ldr	r1, [r7, #24]
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	617b      	str	r3, [r7, #20]
   return(result);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006824:	4619      	mov	r1, r3
 8006826:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006828:	f7fa faf2 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800682c:	e002      	b.n	8006834 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800682e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006830:	f7ff ff02 	bl	8006638 <HAL_UART_RxCpltCallback>
}
 8006834:	bf00      	nop
 8006836:	3770      	adds	r7, #112	; 0x70
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	2b01      	cmp	r3, #1
 8006850:	d108      	bne.n	8006864 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	b29b      	uxth	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7fa fad7 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006862:	e002      	b.n	800686a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fef1 	bl	800664c <HAL_UART_RxHalfCpltCallback>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	bf0c      	ite	eq
 8006892:	2301      	moveq	r3, #1
 8006894:	2300      	movne	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b21      	cmp	r3, #33	; 0x21
 80068a4:	d108      	bne.n	80068b8 <UART_DMAError+0x46>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068b2:	68b8      	ldr	r0, [r7, #8]
 80068b4:	f000 f8c6 	bl	8006a44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b22      	cmp	r3, #34	; 0x22
 80068d8:	d108      	bne.n	80068ec <UART_DMAError+0x7a>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80068e6:	68b8      	ldr	r0, [r7, #8]
 80068e8:	f000 f8d4 	bl	8006a94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f043 0210 	orr.w	r2, r3, #16
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f8:	68b8      	ldr	r0, [r7, #8]
 80068fa:	f7fa f9f9 	bl	8000cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b098      	sub	sp, #96	; 0x60
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2222      	movs	r2, #34	; 0x22
 800692c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	4a40      	ldr	r2, [pc, #256]	; (8006a38 <UART_Start_Receive_DMA+0x130>)
 8006936:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	4a3f      	ldr	r2, [pc, #252]	; (8006a3c <UART_Start_Receive_DMA+0x134>)
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	4a3e      	ldr	r2, [pc, #248]	; (8006a40 <UART_Start_Receive_DMA+0x138>)
 8006946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	2200      	movs	r2, #0
 800694e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	f7fd f9aa 	bl	8003cc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d019      	beq.n	80069c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80069b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e5      	bne.n	8006992 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3314      	adds	r3, #20
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	657b      	str	r3, [r7, #84]	; 0x54
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3314      	adds	r3, #20
 80069e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	617b      	str	r3, [r7, #20]
   return(result);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a10:	653b      	str	r3, [r7, #80]	; 0x50
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3314      	adds	r3, #20
 8006a18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6a39      	ldr	r1, [r7, #32]
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3760      	adds	r7, #96	; 0x60
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	08006717 	.word	0x08006717
 8006a3c:	0800683d 	.word	0x0800683d
 8006a40:	08006873 	.word	0x08006873

08006a44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	61ba      	str	r2, [r7, #24]
 8006a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6979      	ldr	r1, [r7, #20]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a88:	bf00      	nop
 8006a8a:	3724      	adds	r7, #36	; 0x24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b095      	sub	sp, #84	; 0x54
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006abc:	643a      	str	r2, [r7, #64]	; 0x40
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f023 0301 	bic.w	r3, r3, #1
 8006ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d119      	bne.n	8006b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b2c:	61ba      	str	r2, [r7, #24]
 8006b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6979      	ldr	r1, [r7, #20]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b4e:	bf00      	nop
 8006b50:	3754      	adds	r7, #84	; 0x54
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7fa f8bb 	bl	8000cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b21      	cmp	r3, #33	; 0x21
 8006b94:	d13e      	bne.n	8006c14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9e:	d114      	bne.n	8006bca <UART_Transmit_IT+0x48>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d110      	bne.n	8006bca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	1c9a      	adds	r2, r3, #2
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]
 8006bc8:	e008      	b.n	8006bdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	1c59      	adds	r1, r3, #1
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6211      	str	r1, [r2, #32]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4619      	mov	r1, r3
 8006bea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10f      	bne.n	8006c10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e000      	b.n	8006c16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fce4 	bl	8006610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b08c      	sub	sp, #48	; 0x30
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b22      	cmp	r3, #34	; 0x22
 8006c64:	f040 80ab 	bne.w	8006dbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d117      	bne.n	8006ca2 <UART_Receive_IT+0x50>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d113      	bne.n	8006ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca0:	e026      	b.n	8006cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb4:	d007      	beq.n	8006cc6 <UART_Receive_IT+0x74>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <UART_Receive_IT+0x82>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e008      	b.n	8006ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d15a      	bne.n	8006dba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0220 	bic.w	r2, r2, #32
 8006d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695a      	ldr	r2, [r3, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d135      	bne.n	8006db0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f023 0310 	bic.w	r3, r3, #16
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	623a      	str	r2, [r7, #32]
 8006d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	69f9      	ldr	r1, [r7, #28]
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	d10a      	bne.n	8006da2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fa f831 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
 8006dae:	e002      	b.n	8006db6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fc41 	bl	8006638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e002      	b.n	8006dc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3730      	adds	r7, #48	; 0x30
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dcc:	b0c0      	sub	sp, #256	; 0x100
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	ea40 0301 	orr.w	r3, r0, r1
 8006df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e20:	f021 010c 	bic.w	r1, r1, #12
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	6999      	ldr	r1, [r3, #24]
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	ea40 0301 	orr.w	r3, r0, r1
 8006e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b8f      	ldr	r3, [pc, #572]	; (8007094 <UART_SetConfig+0x2cc>)
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d005      	beq.n	8006e68 <UART_SetConfig+0xa0>
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b8d      	ldr	r3, [pc, #564]	; (8007098 <UART_SetConfig+0x2d0>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d104      	bne.n	8006e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7fe f8de 	bl	8005028 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e70:	e003      	b.n	8006e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7fe f8c5 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006e76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e84:	f040 810c 	bne.w	80070a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eaa:	4621      	mov	r1, r4
 8006eac:	eb12 0801 	adds.w	r8, r2, r1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	eb43 0901 	adc.w	r9, r3, r1
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eca:	4690      	mov	r8, r2
 8006ecc:	4699      	mov	r9, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	eb18 0303 	adds.w	r3, r8, r3
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ed8:	462b      	mov	r3, r5
 8006eda:	eb49 0303 	adc.w	r3, r9, r3
 8006ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	18db      	adds	r3, r3, r3
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
 8006efc:	4613      	mov	r3, r2
 8006efe:	eb42 0303 	adc.w	r3, r2, r3
 8006f02:	657b      	str	r3, [r7, #84]	; 0x54
 8006f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f0c:	f7f9 fd72 	bl	80009f4 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <UART_SetConfig+0x2d4>)
 8006f16:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	011c      	lsls	r4, r3, #4
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f40:	4641      	mov	r1, r8
 8006f42:	eb12 0a01 	adds.w	sl, r2, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	eb43 0b01 	adc.w	fp, r3, r1
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f60:	4692      	mov	sl, r2
 8006f62:	469b      	mov	fp, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	eb1a 0303 	adds.w	r3, sl, r3
 8006f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	eb4b 0303 	adc.w	r3, fp, r3
 8006f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	18db      	adds	r3, r3, r3
 8006f90:	643b      	str	r3, [r7, #64]	; 0x40
 8006f92:	4613      	mov	r3, r2
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
 8006f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fa2:	f7f9 fd27 	bl	80009f4 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	4b3b      	ldr	r3, [pc, #236]	; (800709c <UART_SetConfig+0x2d4>)
 8006fae:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2264      	movs	r2, #100	; 0x64
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	1acb      	subs	r3, r1, r3
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fc2:	4b36      	ldr	r3, [pc, #216]	; (800709c <UART_SetConfig+0x2d4>)
 8006fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fec:	415b      	adcs	r3, r3
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007040:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007048:	460b      	mov	r3, r1
 800704a:	18db      	adds	r3, r3, r3
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
 800704e:	4613      	mov	r3, r2
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800705a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800705e:	f7f9 fcc9 	bl	80009f4 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <UART_SetConfig+0x2d4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	; 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3332      	adds	r3, #50	; 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	; (800709c <UART_SetConfig+0x2d4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 0207 	and.w	r2, r3, #7
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007090:	e106      	b.n	80072a0 <UART_SetConfig+0x4d8>
 8007092:	bf00      	nop
 8007094:	40011000 	.word	0x40011000
 8007098:	40011400 	.word	0x40011400
 800709c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	1891      	adds	r1, r2, r2
 80070b8:	6239      	str	r1, [r7, #32]
 80070ba:	415b      	adcs	r3, r3
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070c2:	4641      	mov	r1, r8
 80070c4:	1854      	adds	r4, r2, r1
 80070c6:	4649      	mov	r1, r9
 80070c8:	eb43 0501 	adc.w	r5, r3, r1
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	00eb      	lsls	r3, r5, #3
 80070d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070da:	00e2      	lsls	r2, r4, #3
 80070dc:	4614      	mov	r4, r2
 80070de:	461d      	mov	r5, r3
 80070e0:	4643      	mov	r3, r8
 80070e2:	18e3      	adds	r3, r4, r3
 80070e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070e8:	464b      	mov	r3, r9
 80070ea:	eb45 0303 	adc.w	r3, r5, r3
 80070ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800710e:	4629      	mov	r1, r5
 8007110:	008b      	lsls	r3, r1, #2
 8007112:	4621      	mov	r1, r4
 8007114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007118:	4621      	mov	r1, r4
 800711a:	008a      	lsls	r2, r1, #2
 800711c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007120:	f7f9 fc68 	bl	80009f4 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4b60      	ldr	r3, [pc, #384]	; (80072ac <UART_SetConfig+0x4e4>)
 800712a:	fba3 2302 	umull	r2, r3, r3, r2
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	011c      	lsls	r4, r3, #4
 8007132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007136:	2200      	movs	r2, #0
 8007138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800713c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	61b9      	str	r1, [r7, #24]
 800714c:	415b      	adcs	r3, r3
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007154:	4641      	mov	r1, r8
 8007156:	1851      	adds	r1, r2, r1
 8007158:	6139      	str	r1, [r7, #16]
 800715a:	4649      	mov	r1, r9
 800715c:	414b      	adcs	r3, r1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800716c:	4659      	mov	r1, fp
 800716e:	00cb      	lsls	r3, r1, #3
 8007170:	4651      	mov	r1, sl
 8007172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007176:	4651      	mov	r1, sl
 8007178:	00ca      	lsls	r2, r1, #3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	4603      	mov	r3, r0
 8007180:	4642      	mov	r2, r8
 8007182:	189b      	adds	r3, r3, r2
 8007184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007188:	464b      	mov	r3, r9
 800718a:	460a      	mov	r2, r1
 800718c:	eb42 0303 	adc.w	r3, r2, r3
 8007190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	67bb      	str	r3, [r7, #120]	; 0x78
 800719e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071ac:	4649      	mov	r1, r9
 80071ae:	008b      	lsls	r3, r1, #2
 80071b0:	4641      	mov	r1, r8
 80071b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b6:	4641      	mov	r1, r8
 80071b8:	008a      	lsls	r2, r1, #2
 80071ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071be:	f7f9 fc19 	bl	80009f4 <__aeabi_uldivmod>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	4b38      	ldr	r3, [pc, #224]	; (80072ac <UART_SetConfig+0x4e4>)
 80071ca:	fba3 2301 	umull	r2, r3, r3, r1
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	2264      	movs	r2, #100	; 0x64
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	1acb      	subs	r3, r1, r3
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	3332      	adds	r3, #50	; 0x32
 80071dc:	4a33      	ldr	r2, [pc, #204]	; (80072ac <UART_SetConfig+0x4e4>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071e8:	441c      	add	r4, r3
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ee:	2200      	movs	r2, #0
 80071f0:	673b      	str	r3, [r7, #112]	; 0x70
 80071f2:	677a      	str	r2, [r7, #116]	; 0x74
 80071f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	415b      	adcs	r3, r3
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007208:	4641      	mov	r1, r8
 800720a:	1851      	adds	r1, r2, r1
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	4649      	mov	r1, r9
 8007210:	414b      	adcs	r3, r1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007220:	4659      	mov	r1, fp
 8007222:	00cb      	lsls	r3, r1, #3
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722a:	4651      	mov	r1, sl
 800722c:	00ca      	lsls	r2, r1, #3
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	4603      	mov	r3, r0
 8007234:	4642      	mov	r2, r8
 8007236:	189b      	adds	r3, r3, r2
 8007238:	66bb      	str	r3, [r7, #104]	; 0x68
 800723a:	464b      	mov	r3, r9
 800723c:	460a      	mov	r2, r1
 800723e:	eb42 0303 	adc.w	r3, r2, r3
 8007242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	663b      	str	r3, [r7, #96]	; 0x60
 800724e:	667a      	str	r2, [r7, #100]	; 0x64
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800725c:	4649      	mov	r1, r9
 800725e:	008b      	lsls	r3, r1, #2
 8007260:	4641      	mov	r1, r8
 8007262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007266:	4641      	mov	r1, r8
 8007268:	008a      	lsls	r2, r1, #2
 800726a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800726e:	f7f9 fbc1 	bl	80009f4 <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <UART_SetConfig+0x4e4>)
 8007278:	fba3 1302 	umull	r1, r3, r3, r2
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	2164      	movs	r1, #100	; 0x64
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	3332      	adds	r3, #50	; 0x32
 800728a:	4a08      	ldr	r2, [pc, #32]	; (80072ac <UART_SetConfig+0x4e4>)
 800728c:	fba2 2303 	umull	r2, r3, r2, r3
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	f003 020f 	and.w	r2, r3, #15
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4422      	add	r2, r4
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072a6:	46bd      	mov	sp, r7
 80072a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ac:	51eb851f 	.word	0x51eb851f

080072b0 <memset>:
 80072b0:	4402      	add	r2, r0
 80072b2:	4603      	mov	r3, r0
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d100      	bne.n	80072ba <memset+0xa>
 80072b8:	4770      	bx	lr
 80072ba:	f803 1b01 	strb.w	r1, [r3], #1
 80072be:	e7f9      	b.n	80072b4 <memset+0x4>

080072c0 <__libc_init_array>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4d0d      	ldr	r5, [pc, #52]	; (80072f8 <__libc_init_array+0x38>)
 80072c4:	4c0d      	ldr	r4, [pc, #52]	; (80072fc <__libc_init_array+0x3c>)
 80072c6:	1b64      	subs	r4, r4, r5
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	2600      	movs	r6, #0
 80072cc:	42a6      	cmp	r6, r4
 80072ce:	d109      	bne.n	80072e4 <__libc_init_array+0x24>
 80072d0:	4d0b      	ldr	r5, [pc, #44]	; (8007300 <__libc_init_array+0x40>)
 80072d2:	4c0c      	ldr	r4, [pc, #48]	; (8007304 <__libc_init_array+0x44>)
 80072d4:	f000 f866 	bl	80073a4 <_init>
 80072d8:	1b64      	subs	r4, r4, r5
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	2600      	movs	r6, #0
 80072de:	42a6      	cmp	r6, r4
 80072e0:	d105      	bne.n	80072ee <__libc_init_array+0x2e>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e8:	4798      	blx	r3
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7ee      	b.n	80072cc <__libc_init_array+0xc>
 80072ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f2:	4798      	blx	r3
 80072f4:	3601      	adds	r6, #1
 80072f6:	e7f2      	b.n	80072de <__libc_init_array+0x1e>
 80072f8:	080073ec 	.word	0x080073ec
 80072fc:	080073ec 	.word	0x080073ec
 8007300:	080073ec 	.word	0x080073ec
 8007304:	080073f0 	.word	0x080073f0

08007308 <memcpy>:
 8007308:	440a      	add	r2, r1
 800730a:	4291      	cmp	r1, r2
 800730c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007310:	d100      	bne.n	8007314 <memcpy+0xc>
 8007312:	4770      	bx	lr
 8007314:	b510      	push	{r4, lr}
 8007316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800731e:	4291      	cmp	r1, r2
 8007320:	d1f9      	bne.n	8007316 <memcpy+0xe>
 8007322:	bd10      	pop	{r4, pc}

08007324 <lrintf>:
 8007324:	ee10 3a10 	vmov	r3, s0
 8007328:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800732c:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8007330:	281e      	cmp	r0, #30
 8007332:	b082      	sub	sp, #8
 8007334:	dc2f      	bgt.n	8007396 <lrintf+0x72>
 8007336:	1c41      	adds	r1, r0, #1
 8007338:	da02      	bge.n	8007340 <lrintf+0x1c>
 800733a:	2000      	movs	r0, #0
 800733c:	b002      	add	sp, #8
 800733e:	4770      	bx	lr
 8007340:	2816      	cmp	r0, #22
 8007342:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8007346:	dd0a      	ble.n	800735e <lrintf+0x3a>
 8007348:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800734c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007350:	3a96      	subs	r2, #150	; 0x96
 8007352:	fa03 f002 	lsl.w	r0, r3, r2
 8007356:	2900      	cmp	r1, #0
 8007358:	d0f0      	beq.n	800733c <lrintf+0x18>
 800735a:	4240      	negs	r0, r0
 800735c:	e7ee      	b.n	800733c <lrintf+0x18>
 800735e:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <lrintf+0x7c>)
 8007360:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007364:	ed93 7a00 	vldr	s14, [r3]
 8007368:	ee37 0a00 	vadd.f32	s0, s14, s0
 800736c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007370:	eddd 7a01 	vldr	s15, [sp, #4]
 8007374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007378:	ee17 3a90 	vmov	r3, s15
 800737c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007380:	d0db      	beq.n	800733a <lrintf+0x16>
 8007382:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007386:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800738a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800738e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007392:	40d8      	lsrs	r0, r3
 8007394:	e7df      	b.n	8007356 <lrintf+0x32>
 8007396:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800739a:	ee17 0a90 	vmov	r0, s15
 800739e:	e7cd      	b.n	800733c <lrintf+0x18>
 80073a0:	080073dc 	.word	0x080073dc

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
