
DIY_HOVERCRAFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070ac  080070ac  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b4  080070b4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b4  080070b4  000170b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080070bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000544  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000055c  2000055c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011e1d  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e0d  00000000  00000000  00031ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f68  00000000  00000000  00034cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf8  00000000  00000000  00035c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217ad  00000000  00000000  00036818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001490b  00000000  00000000  00057fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd7e3  00000000  00000000  0006c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000040a8  00000000  00000000  0013a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0013e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800706c 	.word	0x0800706c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800706c 	.word	0x0800706c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <HAL_UART_ErrorCallback>:
volatile bool new_packet_recieved = false;

int last_parsed_packet_location = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_UART_ErrorCallback+0x4c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d117      	bne.n	8000ce2 <HAL_UART_ErrorCallback+0x42>
	{
		if((USART6->SR && (1<<3)))
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_ErrorCallback+0x4c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d013      	beq.n	8000ce2 <HAL_UART_ErrorCallback+0x42>
		{	// over run error
			USART6->DR;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_UART_ErrorCallback+0x4c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <HAL_UART_ErrorCallback+0x50>)
 8000cc2:	f003 fb3e 	bl	8004342 <HAL_GPIO_TogglePin>
			HAL_UART_DMAStop(&huart6);
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <HAL_UART_ErrorCallback+0x54>)
 8000cc8:	f005 f800 	bl	8005ccc <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	490a      	ldr	r1, [pc, #40]	; (8000cf8 <HAL_UART_ErrorCallback+0x58>)
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <HAL_UART_ErrorCallback+0x54>)
 8000cd2:	f004 ffcb 	bl	8005c6c <HAL_UART_Receive_DMA>
			channel_data.channel5 = CRSF_CHANNEL_VALUE_MIN; // disarm
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_UART_ErrorCallback+0x5c>)
 8000cd8:	6853      	ldr	r3, [r2, #4]
 8000cda:	21ac      	movs	r1, #172	; 0xac
 8000cdc:	f361 3316 	bfi	r3, r1, #12, #11
 8000ce0:	6053      	str	r3, [r2, #4]
			// log in future how many times have to reset
		}
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40011400 	.word	0x40011400
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	20000454 	.word	0x20000454
 8000cf8:	20000034 	.word	0x20000034
 8000cfc:	200000f4 	.word	0x200000f4

08000d00 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a2c      	ldr	r2, [pc, #176]	; (8000dc0 <HAL_UART_RxHalfCpltCallback+0xc0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d152      	bne.n	8000db8 <HAL_UART_RxHalfCpltCallback+0xb8>

	uint8_t length = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	72fb      	strb	r3, [r7, #11]

		// check if its a valid packet
		for(int i = 0 ; i < sizeof(rx_buffer)/2 ; i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e04a      	b.n	8000db2 <HAL_UART_RxHalfCpltCallback+0xb2>
		{
			if (rx_buffer[i] == CRSF_ADDRESS_FLIGHT_CONTROLLER)
 8000d1c:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_UART_RxHalfCpltCallback+0xc4>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2bc8      	cmp	r3, #200	; 0xc8
 8000d26:	d141      	bne.n	8000dac <HAL_UART_RxHalfCpltCallback+0xac>
			{
				length = rx_buffer[i+1];
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <HAL_UART_RxHalfCpltCallback+0xc4>)
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	72fb      	strb	r3, [r7, #11]
				// check length
				//then get all packets and check CRC if pass then packet valid
				if((length+i+2 > (sizeof(rx_buffer)/2)-1) || (i+1 > (sizeof(rx_buffer)/2)-1))
 8000d32:	7afa      	ldrb	r2, [r7, #11]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	d835      	bhi.n	8000daa <HAL_UART_RxHalfCpltCallback+0xaa>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	2b3f      	cmp	r3, #63	; 0x3f
 8000d44:	d831      	bhi.n	8000daa <HAL_UART_RxHalfCpltCallback+0xaa>
				{
					// handel cases with non full packets
					// can occur when the whole packet crc fails
					continue;
				}
				if(calculateCRC(rx_buffer ,i+2,length) == 0) // start crc calculation from type byte
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	7afa      	ldrb	r2, [r7, #11]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <HAL_UART_RxHalfCpltCallback+0xc4>)
 8000d50:	f000 f8c2 	bl	8000ed8 <calculateCRC>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d128      	bne.n	8000dac <HAL_UART_RxHalfCpltCallback+0xac>
				{
					// valid packet
					last_parsed_packet_location = i+2+length;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1c9a      	adds	r2, r3, #2
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_RxHalfCpltCallback+0xc8>)
 8000d64:	6013      	str	r3, [r2, #0]
				    last_packet_received_time = HAL_GetTick(); // non hal way of doing it
 8000d66:	f001 fec7 	bl	8002af8 <HAL_GetTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_RxHalfCpltCallback+0xcc>)
 8000d6e:	6013      	str	r3, [r2, #0]
	//				last_packet_received_time = __HAL_TIM_GET_COUNTER(&htim4);
					new_packet_recieved = true;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_RxHalfCpltCallback+0xd0>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
					if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_UART_RxHalfCpltCallback+0xc4>)
 8000d7c:	5cd3      	ldrb	r3, [r2, r3]
 8000d7e:	2b16      	cmp	r3, #22
 8000d80:	d114      	bne.n	8000dac <HAL_UART_RxHalfCpltCallback+0xac>
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	2b18      	cmp	r3, #24
 8000d86:	d111      	bne.n	8000dac <HAL_UART_RxHalfCpltCallback+0xac>
					{
						memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3303      	adds	r3, #3
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_UART_RxHalfCpltCallback+0xc4>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_UART_RxHalfCpltCallback+0xd4>)
 8000d92:	4614      	mov	r4, r2
 8000d94:	461d      	mov	r5, r3
 8000d96:	6828      	ldr	r0, [r5, #0]
 8000d98:	6869      	ldr	r1, [r5, #4]
 8000d9a:	68aa      	ldr	r2, [r5, #8]
 8000d9c:	68eb      	ldr	r3, [r5, #12]
 8000d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da0:	6928      	ldr	r0, [r5, #16]
 8000da2:	6020      	str	r0, [r4, #0]
 8000da4:	8aab      	ldrh	r3, [r5, #20]
 8000da6:	80a3      	strh	r3, [r4, #4]
 8000da8:	e000      	b.n	8000dac <HAL_UART_RxHalfCpltCallback+0xac>
					continue;
 8000daa:	bf00      	nop
		for(int i = 0 ; i < sizeof(rx_buffer)/2 ; i++)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b3f      	cmp	r3, #63	; 0x3f
 8000db6:	d9b1      	bls.n	8000d1c <HAL_UART_RxHalfCpltCallback+0x1c>
				}
			}
		}
	}

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	40011400 	.word	0x40011400
 8000dc4:	20000034 	.word	0x20000034
 8000dc8:	20000114 	.word	0x20000114
 8000dcc:	2000010c 	.word	0x2000010c
 8000dd0:	20000110 	.word	0x20000110
 8000dd4:	200000f4 	.word	0x200000f4

08000dd8 <crsf_init>:


void crsf_init()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
//	(&huart6)->hdmarx->XferCpltCallback = check_and_decode_crsf;
	HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	4903      	ldr	r1, [pc, #12]	; (8000dec <crsf_init+0x14>)
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <crsf_init+0x18>)
 8000de2:	f004 ff43 	bl	8005c6c <HAL_UART_Receive_DMA>

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000034 	.word	0x20000034
 8000df0:	20000454 	.word	0x20000454

08000df4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <HAL_UART_RxCpltCallback+0xc8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d155      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0xbe>
//	HAL_UART_DMAStop(&huart6);
	uint8_t length = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	72fb      	strb	r3, [r7, #11]

	// check if its a valid packet
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) ; i++)
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_UART_RxCpltCallback+0xcc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e044      	b.n	8000e9c <HAL_UART_RxCpltCallback+0xa8>
	{
		if (rx_buffer[i] == CRSF_ADDRESS_FLIGHT_CONTROLLER)
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <HAL_UART_RxCpltCallback+0xd0>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2bc8      	cmp	r3, #200	; 0xc8
 8000e1c:	d13b      	bne.n	8000e96 <HAL_UART_RxCpltCallback+0xa2>
		{
			length = rx_buffer[i+1];
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <HAL_UART_RxCpltCallback+0xd0>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	72fb      	strb	r3, [r7, #11]
			// check length
			//then get all packets and check CRC if pass then packet valid
			if((length+i+2 > sizeof(rx_buffer)-1) || (i+1 > sizeof(rx_buffer)-1))
 8000e28:	7afa      	ldrb	r2, [r7, #11]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	2b7f      	cmp	r3, #127	; 0x7f
 8000e32:	d82f      	bhi.n	8000e94 <HAL_UART_RxCpltCallback+0xa0>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	2b7f      	cmp	r3, #127	; 0x7f
 8000e3a:	d82b      	bhi.n	8000e94 <HAL_UART_RxCpltCallback+0xa0>
			{
				// handel cases with non full packets
				// can occur when the whole packet crc fails
				continue;
			}
			if(calculateCRC(rx_buffer , i+2,length) == 0) // start crc calculation from type byte
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	7afa      	ldrb	r2, [r7, #11]
 8000e42:	4619      	mov	r1, r3
 8000e44:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <HAL_UART_RxCpltCallback+0xd0>)
 8000e46:	f000 f847 	bl	8000ed8 <calculateCRC>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d122      	bne.n	8000e96 <HAL_UART_RxCpltCallback+0xa2>
			{
				// valid packet
			    last_packet_received_time = HAL_GetTick(); // non hal way of doing it
 8000e50:	f001 fe52 	bl	8002af8 <HAL_GetTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_UART_RxCpltCallback+0xd4>)
 8000e58:	6013      	str	r3, [r2, #0]
//				last_packet_received_time = __HAL_TIM_GET_COUNTER(&htim4);
				new_packet_recieved = true;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_UART_RxCpltCallback+0xd8>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
				if(rx_buffer[i+2] == CRSF_FRAMETYPE_RC_CHANNELS_PACKED && length-2 == CRSF_FRAME_RC_CHANNELS_PAYLOAD_SIZE)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3302      	adds	r3, #2
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_UART_RxCpltCallback+0xd0>)
 8000e66:	5cd3      	ldrb	r3, [r2, r3]
 8000e68:	2b16      	cmp	r3, #22
 8000e6a:	d114      	bne.n	8000e96 <HAL_UART_RxCpltCallback+0xa2>
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	2b18      	cmp	r3, #24
 8000e70:	d111      	bne.n	8000e96 <HAL_UART_RxCpltCallback+0xa2>
				{
					memcpy(&channel_data, &(rx_buffer[i+3]),sizeof(channel_data));
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3303      	adds	r3, #3
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_UART_RxCpltCallback+0xd0>)
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <HAL_UART_RxCpltCallback+0xdc>)
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	461d      	mov	r5, r3
 8000e80:	6828      	ldr	r0, [r5, #0]
 8000e82:	6869      	ldr	r1, [r5, #4]
 8000e84:	68aa      	ldr	r2, [r5, #8]
 8000e86:	68eb      	ldr	r3, [r5, #12]
 8000e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8a:	6928      	ldr	r0, [r5, #16]
 8000e8c:	6020      	str	r0, [r4, #0]
 8000e8e:	8aab      	ldrh	r3, [r5, #20]
 8000e90:	80a3      	strh	r3, [r4, #4]
 8000e92:	e000      	b.n	8000e96 <HAL_UART_RxCpltCallback+0xa2>
				continue;
 8000e94:	bf00      	nop
	for(int i = last_parsed_packet_location ; i < sizeof(rx_buffer) ; i++)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea0:	d9b7      	bls.n	8000e12 <HAL_UART_RxCpltCallback+0x1e>
//		rx_buffer[i] = 0; // clear buffer
//	}

//	__HAL_DMA_DISABLE(huart6.hdmarx); // workaround for clearing the interrupt bit
	// after processing re-enable DMA for new data
	last_parsed_packet_location = 0;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_UART_RxCpltCallback+0xcc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	4906      	ldr	r1, [pc, #24]	; (8000ec4 <HAL_UART_RxCpltCallback+0xd0>)
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <HAL_UART_RxCpltCallback+0xe0>)
 8000eae:	f004 fedd 	bl	8005c6c <HAL_UART_Receive_DMA>
}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	20000114 	.word	0x20000114
 8000ec4:	20000034 	.word	0x20000034
 8000ec8:	2000010c 	.word	0x2000010c
 8000ecc:	20000110 	.word	0x20000110
 8000ed0:	200000f4 	.word	0x200000f4
 8000ed4:	20000454 	.word	0x20000454

08000ed8 <calculateCRC>:


uint8_t calculateCRC(uint8_t* buffer , int start_index , int bytes)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b08b      	sub	sp, #44	; 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]

	// CRC is calculated for payload + type
    uint8_t dividend = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t next_byte;
    int numberOfBytesProcessed = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
    int numberOfBitsLeft = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    bool isMsbOne = false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
    for(int i = 0 ; i <9999 ; i++) // avoiding infinite loops
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e04a      	b.n	8000f92 <calculateCRC+0xba>
    {

        if (numberOfBitsLeft <=0 && numberOfBytesProcessed >= bytes)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dc03      	bgt.n	8000f0a <calculateCRC+0x32>
 8000f02:	6a3a      	ldr	r2, [r7, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	da49      	bge.n	8000f9e <calculateCRC+0xc6>
        {
            // ALL BITS PROCEESSED
            break;
        }
        if (numberOfBitsLeft <= 0 && numberOfBytesProcessed < bytes)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dc11      	bgt.n	8000f34 <calculateCRC+0x5c>
 8000f10:	6a3a      	ldr	r2, [r7, #32]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	da0d      	bge.n	8000f34 <calculateCRC+0x5c>
        {
            // load bits into buffer if empty and if bits available
            next_byte = buffer[start_index + numberOfBytesProcessed];
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            numberOfBytesProcessed++;
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
            numberOfBitsLeft =8;
 8000f30:	2308      	movs	r3, #8
 8000f32:	61fb      	str	r3, [r7, #28]
        }

        isMsbOne = dividend & 0b10000000;
 8000f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf14      	ite	ne
 8000f40:	2301      	movne	r3, #1
 8000f42:	2300      	moveq	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]
        dividend = dividend << 1 | (next_byte>>7);   // shift First bit of Next_byte into dividend
 8000f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b25a      	sxtb	r2, r3
 8000f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f52:	09db      	lsrs	r3, r3, #7
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        next_byte = next_byte << 1;  // Shift out the first bit
 8000f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        numberOfBitsLeft --;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
        dividend = isMsbOne ? dividend ^ gen_poly : dividend; //if bit aligning with MSB of gen_poly is 1 then do XOR
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <calculateCRC+0xac>
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <calculateCRC+0xd8>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f7e:	4053      	eors	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	e001      	b.n	8000f88 <calculateCRC+0xb0>
 8000f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int i = 0 ; i <9999 ; i++) // avoiding infinite loops
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	f242 720e 	movw	r2, #9998	; 0x270e
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	ddaf      	ble.n	8000efc <calculateCRC+0x24>
 8000f9c:	e000      	b.n	8000fa0 <calculateCRC+0xc8>
            break;
 8000f9e:	bf00      	nop

    }

    return dividend;
 8000fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	372c      	adds	r7, #44	; 0x2c
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <send_telem>:

void send_telem(uint8_t type , uint8_t* payload , uint8_t payload_length)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]
	tx_buffer[0] = CRSF_ADDRESS_CRSF_RECEIVER;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <send_telem+0x70>)
 8000fc6:	22ec      	movs	r2, #236	; 0xec
 8000fc8:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = payload_length+2;
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <send_telem+0x70>)
 8000fd2:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = type;
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <send_telem+0x70>)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	7093      	strb	r3, [r2, #2]
	memcpy(&(tx_buffer[3]),payload,payload_length);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <send_telem+0x74>)
 8000fe2:	f005 fff5 	bl	8006fd0 <memcpy>
	tx_buffer[3+payload_length] = 0; // CRC set as 0 for calculation
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	3303      	adds	r3, #3
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <send_telem+0x70>)
 8000fec:	2100      	movs	r1, #0
 8000fee:	54d1      	strb	r1, [r2, r3]
	tx_buffer[3+payload_length] = calculateCRC(tx_buffer ,2, payload_length+2);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	1c9a      	adds	r2, r3, #2
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	1cdc      	adds	r4, r3, #3
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <send_telem+0x70>)
 8000ffc:	f7ff ff6c 	bl	8000ed8 <calculateCRC>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <send_telem+0x70>)
 8001006:	551a      	strb	r2, [r3, r4]

	HAL_UART_Transmit_DMA(&huart6 ,tx_buffer, payload_length+4);
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	b29b      	uxth	r3, r3
 800100c:	3304      	adds	r3, #4
 800100e:	b29b      	uxth	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4904      	ldr	r1, [pc, #16]	; (8001024 <send_telem+0x70>)
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <send_telem+0x78>)
 8001016:	f004 fdab 	bl	8005b70 <HAL_UART_Transmit_DMA>
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	200000b4 	.word	0x200000b4
 8001028:	200000b7 	.word	0x200000b7
 800102c:	20000454 	.word	0x20000454

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xb8>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800105e:	2200      	movs	r2, #0
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <MX_ADC1_Init+0xbc>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800107e:	2202      	movs	r2, #2
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_ADC1_Init+0xb4>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <MX_ADC1_Init+0xb4>)
 8001092:	f001 fd61 	bl	8002b58 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f000 ffe6 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010a0:	230b      	movs	r3, #11
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010a8:	2304      	movs	r3, #4
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_ADC1_Init+0xb4>)
 80010b2:	f001 ffd3 	bl	800305c <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f000 ffd6 	bl	800206c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c0:	230d      	movs	r3, #13
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_ADC1_Init+0xb4>)
 80010ce:	f001 ffc5 	bl	800305c <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d8:	f000 ffc8 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000118 	.word	0x20000118
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a37      	ldr	r2, [pc, #220]	; (80011ec <HAL_ADC_MspInit+0xfc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d167      	bne.n	80011e2 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_ADC_MspInit+0x100>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a35      	ldr	r2, [pc, #212]	; (80011f0 <HAL_ADC_MspInit+0x100>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_ADC_MspInit+0x100>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_ADC_MspInit+0x100>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <HAL_ADC_MspInit+0x100>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_ADC_MspInit+0x100>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800114a:	230a      	movs	r3, #10
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <HAL_ADC_MspInit+0x104>)
 800115e:	f002 ff3b 	bl	8003fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 8001164:	4a25      	ldr	r2, [pc, #148]	; (80011fc <HAL_ADC_MspInit+0x10c>)
 8001166:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 800117c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001180:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 8001184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001188:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011b8:	f002 fb0c 	bl	80037d4 <HAL_DMA_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80011c2:	f000 ff53 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_ADC_MspInit+0x108>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2012      	movs	r0, #18
 80011d8:	f002 fac5 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011dc:	2012      	movs	r0, #18
 80011de:	f002 fade 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40012000 	.word	0x40012000
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020800 	.word	0x40020800
 80011f8:	20000160 	.word	0x20000160
 80011fc:	40026410 	.word	0x40026410

08001200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_DMA_Init+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <MX_DMA_Init+0x98>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_DMA_Init+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_DMA_Init+0x98>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <MX_DMA_Init+0x98>)
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_DMA_Init+0x98>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	200d      	movs	r0, #13
 8001244:	f002 fa8f 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001248:	200d      	movs	r0, #13
 800124a:	f002 faa8 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2011      	movs	r0, #17
 8001254:	f002 fa87 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001258:	2011      	movs	r0, #17
 800125a:	f002 faa0 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2038      	movs	r0, #56	; 0x38
 8001264:	f002 fa7f 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001268:	2038      	movs	r0, #56	; 0x38
 800126a:	f002 fa98 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 2, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2102      	movs	r1, #2
 8001272:	2039      	movs	r0, #57	; 0x39
 8001274:	f002 fa77 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001278:	2039      	movs	r0, #57	; 0x39
 800127a:	f002 fa90 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2045      	movs	r0, #69	; 0x45
 8001284:	f002 fa6f 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001288:	2045      	movs	r0, #69	; 0x45
 800128a:	f002 fa88 	bl	800379e <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <dshot_init>:
static void dshot_dma_start();
static void dshot_enable_dma_request();

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f84b 	bl	8001344 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80012ae:	f000 f8d5 	bl	800145c <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80012b2:	f000 f8e9 	bl	8001488 <dshot_start_pwm>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <dshot_write>:

void dshot_write(uint16_t *motor_value , bool dshot_telemetry)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
	last_sent_motor_value[0] = motor_value[0];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <dshot_write+0x48>)
 80012d2:	801a      	strh	r2, [r3, #0]
	last_sent_motor_value[1] = motor_value[1];
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	885a      	ldrh	r2, [r3, #2]
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <dshot_write+0x48>)
 80012da:	805a      	strh	r2, [r3, #2]
	last_sent_motor_value[2] = motor_value[2];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	889a      	ldrh	r2, [r3, #4]
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <dshot_write+0x48>)
 80012e2:	809a      	strh	r2, [r3, #4]
	last_sent_motor_value[3] = motor_value[3];
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	88da      	ldrh	r2, [r3, #6]
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <dshot_write+0x48>)
 80012ea:	80da      	strh	r2, [r3, #6]
	dshot_prepare_dmabuffer_all(motor_value, dshot_telemetry);
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	4619      	mov	r1, r3
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f943 	bl	800157c <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80012f6:	f000 f95f 	bl	80015b8 <dshot_dma_start>
	dshot_enable_dma_request();
 80012fa:	f000 f97d 	bl	80015f8 <dshot_enable_dma_request>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000254 	.word	0x20000254

0800130c <dshot_choose_type>:

/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d003      	beq.n	8001324 <dshot_choose_type+0x18>
 800131c:	2b02      	cmp	r3, #2
 800131e:	d103      	bne.n	8001328 <dshot_choose_type+0x1c>
	{
	case (DSHOT600):
		return DSHOT600_HZ;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <dshot_choose_type+0x2c>)
 8001322:	e002      	b.n	800132a <dshot_choose_type+0x1e>

	case (DSHOT300):
		return DSHOT300_HZ;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <dshot_choose_type+0x30>)
 8001326:	e000      	b.n	800132a <dshot_choose_type+0x1e>

	default:
	case (DSHOT150):
		return DSHOT150_HZ;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <dshot_choose_type+0x34>)
	}
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	00b71b00 	.word	0x00b71b00
 800133c:	005b8d80 	.word	0x005b8d80
 8001340:	002dc6c0 	.word	0x002dc6c0

08001344 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	ed2d 8b02 	vpush	{d8}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <dshot_set_timer+0x80>)
 8001354:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float)timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ffd2 	bl	800130c <dshot_choose_type>
 8001368:	ee07 0a90 	vmov	s15, r0
 800136c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001370:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001374:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80013c8 <dshot_set_timer+0x84>
 8001378:	ee77 7a87 	vadd.f32	s15, s15, s14
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	f005 fe34 	bl	8006fec <lrintf>
 8001384:	4603      	mov	r3, r0
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <dshot_set_timer+0x88>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	897a      	ldrh	r2, [r7, #10]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <dshot_set_timer+0x88>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2214      	movs	r2, #20
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <dshot_set_timer+0x88>)
 800139e:	2214      	movs	r2, #20
 80013a0:	60da      	str	r2, [r3, #12]
	// motor2
	// __HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
	// __HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <dshot_set_timer+0x8c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	897a      	ldrh	r2, [r7, #10]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <dshot_set_timer+0x8c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2214      	movs	r2, #20
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <dshot_set_timer+0x8c>)
 80013b4:	2214      	movs	r2, #20
 80013b6:	60da      	str	r2, [r3, #12]

	// // motor4
	// __HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
	// __HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	ecbd 8b02 	vpop	{d8}
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	02dc6c00 	.word	0x02dc6c00
 80013c8:	3c23d70a 	.word	0x3c23d70a
 80013cc:	200002bc 	.word	0x200002bc
 80013d0:	20000274 	.word	0x20000274

080013d4 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d108      	bne.n	80013fe <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013fa:	60da      	str	r2, [r3, #12]
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80013fc:	e028      	b.n	8001450 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d108      	bne.n	800141a <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001416:	60da      	str	r2, [r3, #12]
}
 8001418:	e01a      	b.n	8001450 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d108      	bne.n	8001436 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001432:	60da      	str	r2, [r3, #12]
}
 8001434:	e00c      	b.n	8001450 <dshot_dma_tc_callback+0x7c>
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800144e:	60da      	str	r2, [r3, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
// TIM_DMA_ID_CCx depends on timer channel
#ifdef MOTOR_1_TIM
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <dshot_put_tc_callback_function+0x20>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <dshot_put_tc_callback_function+0x24>)
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_2_TIM
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
#endif
#ifdef MOTOR_3_TIM
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <dshot_put_tc_callback_function+0x28>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <dshot_put_tc_callback_function+0x24>)
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#ifdef MOTOR_4_TIM
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200002bc 	.word	0x200002bc
 8001480:	080013d5 	.word	0x080013d5
 8001484:	20000274 	.word	0x20000274

08001488 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
	// Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 800148c:	210c      	movs	r1, #12
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <dshot_start_pwm+0x18>)
 8001490:	f003 fd42 	bl	8004f18 <HAL_TIM_PWM_Start>
	// HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8001494:	210c      	movs	r1, #12
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <dshot_start_pwm+0x1c>)
 8001498:	f003 fd3e 	bl	8004f18 <HAL_TIM_PWM_Start>
	// HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200002bc 	.word	0x200002bc
 80014a4:	20000274 	.word	0x20000274

080014a8 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value , bool dshot_telemetry)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	460a      	mov	r2, r1
 80014b2:	80fb      	strh	r3, [r7, #6]
 80014b4:	4613      	mov	r3, r2
 80014b6:	717b      	strb	r3, [r7, #5]
	uint16_t packet;


	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	b21a      	sxth	r2, r3
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	817b      	strh	r3, [r7, #10]

	// compute checksum
	unsigned csum = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 80014cc:	897b      	ldrh	r3, [r7, #10]
 80014ce:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 3; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e009      	b.n	80014ea <dshot_prepare_packet+0x42>
	{
		csum ^= csum_data; // xor data by nibbles
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4053      	eors	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
		csum_data >>= 4;
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	ddf2      	ble.n	80014d6 <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80014f8:	897b      	ldrh	r3, [r7, #10]
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	817b      	strh	r3, [r7, #10]

	return packet;
 8001506:	897b      	ldrh	r3, [r7, #10]
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t *motor_dmabuffer, uint16_t value , bool dshot_telemetry)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
	uint16_t packet;
	packet = dshot_prepare_packet(value ,dshot_telemetry );
 8001524:	787a      	ldrb	r2, [r7, #1]
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ffbc 	bl	80014a8 <dshot_prepare_packet>
 8001530:	4603      	mov	r3, r0
 8001532:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < 16; i++)
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	e011      	b.n	800155e <dshot_prepare_dmabuffer+0x4a>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 800153a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da01      	bge.n	8001546 <dshot_prepare_dmabuffer+0x32>
 8001542:	220e      	movs	r2, #14
 8001544:	e000      	b.n	8001548 <dshot_prepare_dmabuffer+0x34>
 8001546:	2207      	movs	r2, #7
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	440b      	add	r3, r1
 8001550:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 16; i++)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	ddea      	ble.n	800153a <dshot_prepare_dmabuffer+0x26>
	}

	motor_dmabuffer[16] = 0;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3340      	adds	r3, #64	; 0x40
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3344      	adds	r3, #68	; 0x44
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t *motor_value , bool dshot_telemetry)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0], dshot_telemetry);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <dshot_prepare_dmabuffer_all+0x34>)
 8001592:	f7ff ffbf 	bl	8001514 <dshot_prepare_dmabuffer>
	// dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2] ,dshot_telemetry);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3304      	adds	r3, #4
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	4619      	mov	r1, r3
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <dshot_prepare_dmabuffer_all+0x38>)
 80015a2:	f7ff ffb7 	bl	8001514 <dshot_prepare_dmabuffer>
	// dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200001c0 	.word	0x200001c0
 80015b4:	20000208 	.word	0x20000208

080015b8 <dshot_dma_start>:

static void dshot_dma_start()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <dshot_dma_start+0x30>)
 80015be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015c0:	490a      	ldr	r1, [pc, #40]	; (80015ec <dshot_dma_start+0x34>)
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <dshot_dma_start+0x30>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3340      	adds	r3, #64	; 0x40
 80015c8:	461a      	mov	r2, r3
 80015ca:	2312      	movs	r3, #18
 80015cc:	f002 f9b0 	bl	8003930 <HAL_DMA_Start_IT>
	// HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <dshot_dma_start+0x38>)
 80015d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <dshot_dma_start+0x3c>)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <dshot_dma_start+0x38>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3340      	adds	r3, #64	; 0x40
 80015dc:	461a      	mov	r2, r3
 80015de:	2312      	movs	r3, #18
 80015e0:	f002 f9a6 	bl	8003930 <HAL_DMA_Start_IT>
	// HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002bc 	.word	0x200002bc
 80015ec:	200001c0 	.word	0x200001c0
 80015f0:	20000274 	.word	0x20000274
 80015f4:	20000208 	.word	0x20000208

080015f8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <dshot_enable_dma_request+0x30>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <dshot_enable_dma_request+0x30>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800160a:	60da      	str	r2, [r3, #12]
	// __HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC4);
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <dshot_enable_dma_request+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <dshot_enable_dma_request+0x34>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800161a:	60da      	str	r2, [r3, #12]
	// __HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200002bc 	.word	0x200002bc
 800162c:	20000274 	.word	0x20000274

08001630 <dshot_arm>:

void dshot_arm()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
	uint16_t arr[4] = {0,0,0,0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
	is_armed = true;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <dshot_arm+0x44>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < 2000 ; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e00a      	b.n	8001660 <dshot_arm+0x30>
	  {
		  dshot_write(arr , false);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fe36 	bl	80012c0 <dshot_write>
		  HAL_Delay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f001 fa5b 	bl	8002b10 <HAL_Delay>
	for(int i =0 ; i < 2000 ; i++)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001666:	dbf0      	blt.n	800164a <dshot_arm+0x1a>
		  // send 0 for first 2 seconds

	  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000250 	.word	0x20000250

08001678 <dshot_beep>:
		  // send 0 for first 2 seconds
	  }
	save_settings(motor_number);
}
void dshot_beep(uint8_t motor_number ,uint8_t beep_number)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	460a      	mov	r2, r1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	71bb      	strb	r3, [r7, #6]
	beep_number = beep_number < 0 ? 0:beep_number;
	beep_number = beep_number > 5 ? 5:beep_number;
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	2b05      	cmp	r3, #5
 800168c:	bf28      	it	cs
 800168e:	2305      	movcs	r3, #5
 8001690:	71bb      	strb	r3, [r7, #6]

	last_sent_motor_value[motor_number] = 2;
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <dshot_beep+0x3c>)
 8001696:	2102      	movs	r1, #2
 8001698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dshot_write(last_sent_motor_value,true);
 800169c:	2101      	movs	r1, #1
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <dshot_beep+0x3c>)
 80016a0:	f7ff fe0e 	bl	80012c0 <dshot_write>
	HAL_Delay(100);
 80016a4:	2064      	movs	r0, #100	; 0x64
 80016a6:	f001 fa33 	bl	8002b10 <HAL_Delay>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000254 	.word	0x20000254

080016b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_GPIO_Init+0xb4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a25      	ldr	r2, [pc, #148]	; (800176c <MX_GPIO_Init+0xb4>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_GPIO_Init+0xb4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_GPIO_Init+0xb4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <MX_GPIO_Init+0xb4>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_GPIO_Init+0xb4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_GPIO_Init+0xb4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <MX_GPIO_Init+0xb4>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_GPIO_Init+0xb4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_GPIO_Init+0xb4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <MX_GPIO_Init+0xb4>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_GPIO_Init+0xb4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2130      	movs	r1, #48	; 0x30
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <MX_GPIO_Init+0xb8>)
 8001744:	f002 fde4 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001748:	2330      	movs	r3, #48	; 0x30
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_GPIO_Init+0xb8>)
 8001760:	f002 fc3a 	bl	8003fd8 <HAL_GPIO_Init>

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177a:	f001 f957 	bl	8002a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177e:	f000 faa3 	bl	8001cc8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001782:	f7ff ff99 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001786:	f7ff fd3b 	bl	8001200 <MX_DMA_Init>
  MX_TIM2_Init();
 800178a:	f000 fd21 	bl	80021d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800178e:	f000 fd93 	bl	80022b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001792:	f000 fe55 	bl	8002440 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001796:	f001 f837 	bl	8002808 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 800179a:	f000 fe03 	bl	80023a4 <MX_TIM4_Init>
  MX_ADC1_Init();
 800179e:	f7ff fc47 	bl	8001030 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  dshot_init(DSHOT600);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff fd7a 	bl	800129c <dshot_init>
  crsf_init();
 80017a8:	f7ff fb16 	bl	8000dd8 <crsf_init>

	// want the timer to run at 1 mhz (u can choose any )
	// so prescaler = 48mhz(apb1) / 1mhz = 48
	__HAL_TIM_SET_PRESCALER(&htim5, 48);
 80017ac:	4bab      	ldr	r3, [pc, #684]	; (8001a5c <main+0x2e8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2230      	movs	r2, #48	; 0x30
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
		//for 50hz the arr value should be 1mhz/50 = 20000
	__HAL_TIM_SET_AUTORELOAD(&htim5, 20000);
 80017b4:	4ba9      	ldr	r3, [pc, #676]	; (8001a5c <main+0x2e8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017be:	4ba7      	ldr	r3, [pc, #668]	; (8001a5c <main+0x2e8>)
 80017c0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017c4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 , 1200);
 80017c6:	4ba5      	ldr	r3, [pc, #660]	; (8001a5c <main+0x2e8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	48a2      	ldr	r0, [pc, #648]	; (8001a5c <main+0x2e8>)
 80017d4:	f003 fba0 	bl	8004f18 <HAL_TIM_PWM_Start>


	// tim4 used for measurment of time
	__HAL_TIM_SET_PRESCALER(&htim4, 960); // so timer running at 0.05mhz ==> 20 us = 1 step => timer overflows in 1.3 seconds
 80017d8:	4ba1      	ldr	r3, [pc, #644]	; (8001a60 <main+0x2ec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_Base_Start(&htim4);
 80017e2:	489f      	ldr	r0, [pc, #636]	; (8001a60 <main+0x2ec>)
 80017e4:	f003 fad6 	bl	8004d94 <HAL_TIM_Base_Start>
	// adc
    //HAL_ADC_Start_DMA(&hadc1,(uint32_t *)raw_adc_data , 2); // take readings from adc


	// arm esc
    dshot_arm();
 80017e8:	f7ff ff22 	bl	8001630 <dshot_arm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80017ec:	2120      	movs	r1, #32
 80017ee:	489d      	ldr	r0, [pc, #628]	; (8001a64 <main+0x2f0>)
 80017f0:	f002 fda7 	bl	8004342 <HAL_GPIO_TogglePin>
	  if(arm_state == ARMED && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = IDLE ;
 80017f4:	4b9c      	ldr	r3, [pc, #624]	; (8001a68 <main+0x2f4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d110      	bne.n	800181e <main+0xaa>
 80017fc:	4b9b      	ldr	r3, [pc, #620]	; (8001a6c <main+0x2f8>)
 80017fe:	795a      	ldrb	r2, [r3, #5]
 8001800:	0912      	lsrs	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	799b      	ldrb	r3, [r3, #6]
 8001806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4313      	orrs	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001814:	d203      	bcs.n	800181e <main+0xaa>
 8001816:	4b94      	ldr	r3, [pc, #592]	; (8001a68 <main+0x2f4>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e085      	b.n	800192a <main+0x1b6>
	  else if(arm_state == IDLE && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 < CRSF_CHANNEL_VALUE_MID + 20) arm_state = PREARMED ;
 800181e:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <main+0x2f4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d120      	bne.n	8001868 <main+0xf4>
 8001826:	4b91      	ldr	r3, [pc, #580]	; (8001a6c <main+0x2f8>)
 8001828:	799a      	ldrb	r2, [r3, #6]
 800182a:	09d2      	lsrs	r2, r2, #7
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	79d9      	ldrb	r1, [r3, #7]
 8001830:	0049      	lsls	r1, r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	7a1b      	ldrb	r3, [r3, #8]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	4313      	orrs	r3, r2
 800183e:	b29b      	uxth	r3, r3
 8001840:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001844:	d910      	bls.n	8001868 <main+0xf4>
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <main+0x2f8>)
 8001848:	795a      	ldrb	r2, [r3, #5]
 800184a:	0912      	lsrs	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	799b      	ldrb	r3, [r3, #6]
 8001850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4313      	orrs	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800185e:	d203      	bcs.n	8001868 <main+0xf4>
 8001860:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <main+0x2f4>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e060      	b.n	800192a <main+0x1b6>
	  else if(arm_state == IDLE && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = NOPREARM ;
 8001868:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <main+0x2f4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d120      	bne.n	80018b2 <main+0x13e>
 8001870:	4b7e      	ldr	r3, [pc, #504]	; (8001a6c <main+0x2f8>)
 8001872:	799a      	ldrb	r2, [r3, #6]
 8001874:	09d2      	lsrs	r2, r2, #7
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	79d9      	ldrb	r1, [r3, #7]
 800187a:	0049      	lsls	r1, r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	7a1b      	ldrb	r3, [r3, #8]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	4313      	orrs	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800188e:	d210      	bcs.n	80018b2 <main+0x13e>
 8001890:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <main+0x2f8>)
 8001892:	795a      	ldrb	r2, [r3, #5]
 8001894:	0912      	lsrs	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	799b      	ldrb	r3, [r3, #6]
 800189a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80018a8:	d903      	bls.n	80018b2 <main+0x13e>
 80018aa:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <main+0x2f4>)
 80018ac:	2202      	movs	r2, #2
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e03b      	b.n	800192a <main+0x1b6>
	  else if(arm_state == PREARMED && channel_data.channel6 > CRSF_CHANNEL_VALUE_MID + 20 && channel_data.channel5 > CRSF_CHANNEL_VALUE_MID + 20) arm_state = ARMED ;
 80018b2:	4b6d      	ldr	r3, [pc, #436]	; (8001a68 <main+0x2f4>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d120      	bne.n	80018fc <main+0x188>
 80018ba:	4b6c      	ldr	r3, [pc, #432]	; (8001a6c <main+0x2f8>)
 80018bc:	799a      	ldrb	r2, [r3, #6]
 80018be:	09d2      	lsrs	r2, r2, #7
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	79d9      	ldrb	r1, [r3, #7]
 80018c4:	0049      	lsls	r1, r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80018d8:	d910      	bls.n	80018fc <main+0x188>
 80018da:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <main+0x2f8>)
 80018dc:	795a      	ldrb	r2, [r3, #5]
 80018de:	0912      	lsrs	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	799b      	ldrb	r3, [r3, #6]
 80018e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80018f2:	d903      	bls.n	80018fc <main+0x188>
 80018f4:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <main+0x2f4>)
 80018f6:	2203      	movs	r2, #3
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e016      	b.n	800192a <main+0x1b6>
	  else if(arm_state == NOPREARM && channel_data.channel6 < CRSF_CHANNEL_VALUE_MID + 20 ) arm_state = IDLE ;
 80018fc:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <main+0x2f4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d112      	bne.n	800192a <main+0x1b6>
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <main+0x2f8>)
 8001906:	799a      	ldrb	r2, [r3, #6]
 8001908:	09d2      	lsrs	r2, r2, #7
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	79d9      	ldrb	r1, [r3, #7]
 800190e:	0049      	lsls	r1, r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	7a1b      	ldrb	r3, [r3, #8]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	4313      	orrs	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8001922:	d202      	bcs.n	800192a <main+0x1b6>
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <main+0x2f4>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
//	  if(rx_buffer[0] | rx_buffer[1] | rx_buffer[2] | rx_buffer[3] | rx_buffer[4])
//	  {
//		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
//	  }

	  if(arm_state == ARMED) // arm channel
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <main+0x2f4>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b03      	cmp	r3, #3
 8001930:	f040 8105 	bne.w	8001b3e <main+0x3ca>
	  {
		  if(channel_data.channel6 < 1500)
 8001934:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <main+0x2f8>)
 8001936:	799a      	ldrb	r2, [r3, #6]
 8001938:	09d2      	lsrs	r2, r2, #7
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	79d9      	ldrb	r1, [r3, #7]
 800193e:	0049      	lsls	r1, r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	7a1b      	ldrb	r3, [r3, #8]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	4313      	orrs	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001952:	4293      	cmp	r3, r2
 8001954:	d827      	bhi.n	80019a6 <main+0x232>
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true);
 8001956:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <main+0x2f8>)
 8001958:	789a      	ldrb	r2, [r3, #2]
 800195a:	0992      	lsrs	r2, r2, #6
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	78d9      	ldrb	r1, [r3, #3]
 8001960:	0089      	lsls	r1, r1, #2
 8001962:	430a      	orrs	r2, r1
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4313      	orrs	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001978:	2001      	movs	r0, #1
 800197a:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8001a70 <main+0x2fc>
 800197e:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8001a74 <main+0x300>
 8001982:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8001a78 <main+0x304>
 8001986:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001a7c <main+0x308>
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f000 fa07 	bl	8001da0 <map>
 8001992:	eef0 7a40 	vmov.f32	s15, s0
 8001996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <main+0x30c>)
 80019a2:	809a      	strh	r2, [r3, #4]
 80019a4:	e026      	b.n	80019f4 <main+0x280>
		  else
			  my_motor_value[2] = map(channel_data.channel3, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_2000, DSHOT_3DR_MIN_THROTTLE, DSHOT_3DR_MAX_THROTTLE, true);
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <main+0x2f8>)
 80019a8:	789a      	ldrb	r2, [r3, #2]
 80019aa:	0992      	lsrs	r2, r2, #6
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	78d9      	ldrb	r1, [r3, #3]
 80019b0:	0089      	lsls	r1, r1, #2
 80019b2:	430a      	orrs	r2, r1
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	029b      	lsls	r3, r3, #10
 80019bc:	4313      	orrs	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	2001      	movs	r0, #1
 80019ca:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8001a84 <main+0x310>
 80019ce:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8001a88 <main+0x314>
 80019d2:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8001a78 <main+0x304>
 80019d6:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001a7c <main+0x308>
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	f000 f9df 	bl	8001da0 <map>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
 80019e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ea:	ee17 3a90 	vmov	r3, s15
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <main+0x30c>)
 80019f2:	809a      	strh	r2, [r3, #4]


		  // back motor
		  if(channel_data.channel2 >= CRSF_CHANNEL_VALUE_MID + deadband)
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <main+0x2f8>)
 80019f6:	785a      	ldrb	r2, [r3, #1]
 80019f8:	08d2      	lsrs	r2, r2, #3
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	789b      	ldrb	r3, [r3, #2]
 80019fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f240 4243 	movw	r2, #1091	; 0x443
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d93f      	bls.n	8001a90 <main+0x31c>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_MID + deadband, CRSF_CHANNEL_VALUE_2000, DSHOT_3DN_MIN_THROTTLE, DSHOT_3DN_MAX_THROTTLE, true); // correct this
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <main+0x2f8>)
 8001a12:	785a      	ldrb	r2, [r3, #1]
 8001a14:	08d2      	lsrs	r2, r2, #3
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	789b      	ldrb	r3, [r3, #2]
 8001a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	4313      	orrs	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8001a70 <main+0x2fc>
 8001a32:	eddf 1a10 	vldr	s3, [pc, #64]	; 8001a74 <main+0x300>
 8001a36:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001a78 <main+0x304>
 8001a3a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001a8c <main+0x318>
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	f000 f9ad 	bl	8001da0 <map>
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
 8001a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a4e:	ee17 3a90 	vmov	r3, s15
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <main+0x30c>)
 8001a56:	801a      	strh	r2, [r3, #0]
 8001a58:	e04f      	b.n	8001afa <main+0x386>
 8001a5a:	bf00      	nop
 8001a5c:	2000034c 	.word	0x2000034c
 8001a60:	20000304 	.word	0x20000304
 8001a64:	40020400 	.word	0x40020400
 8001a68:	20000268 	.word	0x20000268
 8001a6c:	200000f4 	.word	0x200000f4
 8001a70:	447a0000 	.word	0x447a0000
 8001a74:	42400000 	.word	0x42400000
 8001a78:	44e00000 	.word	0x44e00000
 8001a7c:	433f0000 	.word	0x433f0000
 8001a80:	2000025c 	.word	0x2000025c
 8001a84:	44ffe000 	.word	0x44ffe000
 8001a88:	4483e000 	.word	0x4483e000
 8001a8c:	44888000 	.word	0x44888000
		  else if(channel_data.channel2 <= CRSF_CHANNEL_VALUE_MID - deadband)
 8001a90:	4b7a      	ldr	r3, [pc, #488]	; (8001c7c <main+0x508>)
 8001a92:	785a      	ldrb	r2, [r3, #1]
 8001a94:	08d2      	lsrs	r2, r2, #3
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9e:	015b      	lsls	r3, r3, #5
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f5b3 7f5f 	cmp.w	r3, #892	; 0x37c
 8001aa8:	d824      	bhi.n	8001af4 <main+0x380>
			  my_motor_value[0] = map(channel_data.channel2, CRSF_CHANNEL_VALUE_1000, CRSF_CHANNEL_VALUE_MID - deadband, DSHOT_3DR_MAX_THROTTLE, DSHOT_3DR_MIN_THROTTLE, true); // correct this
 8001aaa:	4b74      	ldr	r3, [pc, #464]	; (8001c7c <main+0x508>)
 8001aac:	785a      	ldrb	r2, [r3, #1]
 8001aae:	08d2      	lsrs	r2, r2, #3
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	789b      	ldrb	r3, [r3, #2]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8001c80 <main+0x50c>
 8001acc:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8001c84 <main+0x510>
 8001ad0:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8001c88 <main+0x514>
 8001ad4:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8001c8c <main+0x518>
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f000 f960 	bl	8001da0 <map>
 8001ae0:	eef0 7a40 	vmov.f32	s15, s0
 8001ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae8:	ee17 3a90 	vmov	r3, s15
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <main+0x51c>)
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	e002      	b.n	8001afa <main+0x386>
		  else
			  my_motor_value[0]= 0;
 8001af4:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <main+0x51c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	801a      	strh	r2, [r3, #0]


		  angle = map(channel_data.channel1,CRSF_CHANNEL_VALUE_1000,CRSF_CHANNEL_VALUE_2000,min_servo, max_servo,true);
 8001afa:	4b60      	ldr	r3, [pc, #384]	; (8001c7c <main+0x508>)
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	2001      	movs	r0, #1
 8001b14:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 8001c94 <main+0x520>
 8001b18:	eddf 1a5f 	vldr	s3, [pc, #380]	; 8001c98 <main+0x524>
 8001b1c:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8001c9c <main+0x528>
 8001b20:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001c8c <main+0x518>
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	f000 f93a 	bl	8001da0 <map>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 2a90 	vmov	r2, s15
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <main+0x52c>)
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e009      	b.n	8001b52 <main+0x3de>
	  }
	  else{
		  my_motor_value[0] = 0;
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <main+0x51c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
		  my_motor_value[2] = 0;
 8001b44:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <main+0x51c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	809a      	strh	r2, [r3, #4]
		  angle = (min_servo+max_servo)/2;
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <main+0x52c>)
 8001b4c:	f240 621d 	movw	r2, #1565	; 0x61d
 8001b50:	601a      	str	r2, [r3, #0]
	  }

	  if(arm_state == FAILSAFE )
 8001b52:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <main+0x530>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d10f      	bne.n	8001b7a <main+0x406>
	  {
		  if(!(USART6->SR && (1<<3)))
 8001b5a:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <main+0x534>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <main+0x3f6>
		  {
			  // not over run error
			  dshot_beep(0,2);
 8001b62:	2102      	movs	r1, #2
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fd87 	bl	8001678 <dshot_beep>
		  }else
		  {
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
		  }
		  dshot_beep(2,2);
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f7ff fd83 	bl	8001678 <dshot_beep>
		  angle = 1000;
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <main+0x52c>)
 8001b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b78:	601a      	str	r2, [r3, #0]

	  }
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1 ,angle);
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <main+0x52c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <main+0x538>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34
	  if(my_motor_value[0] == 0 && my_motor_value[2] == 0 && channel_data.channel9 > 1500)
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <main+0x51c>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d118      	bne.n	8001bbe <main+0x44a>
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <main+0x51c>)
 8001b8e:	889b      	ldrh	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d114      	bne.n	8001bbe <main+0x44a>
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <main+0x508>)
 8001b96:	7ada      	ldrb	r2, [r3, #11]
 8001b98:	7b1b      	ldrb	r3, [r3, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d908      	bls.n	8001bbe <main+0x44a>
	  {
		  dshot_beep(0,2);
 8001bac:	2102      	movs	r1, #2
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fd62 	bl	8001678 <dshot_beep>
		  dshot_beep(2,2);
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f7ff fd5e 	bl	8001678 <dshot_beep>
 8001bbc:	e003      	b.n	8001bc6 <main+0x452>
	  }else{
	  dshot_write(my_motor_value , false);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4833      	ldr	r0, [pc, #204]	; (8001c90 <main+0x51c>)
 8001bc2:	f7ff fb7d 	bl	80012c0 <dshot_write>
	  }


	  // telemetry
	  if((uint16_t)(HAL_GetTick() - battery_telem_last_sent) > 500) // send battery telemetry every 500ms
 8001bc6:	f000 ff97 	bl	8002af8 <HAL_GetTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <main+0x53c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bda:	d92b      	bls.n	8001c34 <main+0x4c0>
	  {
		  battery_telem_last_sent = HAL_GetTick();
 8001bdc:	f000 ff8c 	bl	8002af8 <HAL_GetTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <main+0x53c>)
 8001be6:	801a      	strh	r2, [r3, #0]
		  crsf_sensor_battery_t temp_bat = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
		  memcpy((void*)&temp_bat , (void*)&bat, sizeof(bat));
 8001bf0:	4a30      	ldr	r2, [pc, #192]	; (8001cb4 <main+0x540>)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf8:	e883 0003 	stmia.w	r3, {r0, r1}
		  convert_to_big_endian((uint8_t*)&temp_bat, 2); // battery voltage
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f943 	bl	8001e8c <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&temp_bat)[2]), 2); // battery current
 8001c06:	463b      	mov	r3, r7
 8001c08:	3302      	adds	r3, #2
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f93d 	bl	8001e8c <convert_to_big_endian>
		  convert_to_big_endian(&(((uint8_t*)&temp_bat)[4]), 3); // mah
 8001c12:	463b      	mov	r3, r7
 8001c14:	3304      	adds	r3, #4
 8001c16:	2103      	movs	r1, #3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f937 	bl	8001e8c <convert_to_big_endian>
		  send_telem(CRSF_FRAMETYPE_BATTERY_SENSOR, (uint8_t*)&temp_bat, sizeof(temp_bat)/sizeof(uint8_t));
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2208      	movs	r2, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	2008      	movs	r0, #8
 8001c26:	f7ff f9c5 	bl	8000fb4 <send_telem>
		  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)raw_adc_data , 2); // take readings from adc
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <main+0x544>)
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <main+0x548>)
 8001c30:	f001 f8e6 	bl	8002e00 <HAL_ADC_Start_DMA>
		 // in future before sending check whether old data sent or not
	  }


	// FAILSAFE detection
	  if((uint32_t)(HAL_GetTick() - last_packet_received_time) > 500) // no packet received in 100ms // 20 us is the step size
 8001c34:	f000 ff60 	bl	8002af8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <main+0x54c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c44:	d90b      	bls.n	8001c5e <main+0x4ea>
	  {
		  arm_state = FAILSAFE;
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <main+0x530>)
 8001c48:	2204      	movs	r2, #4
 8001c4a:	701a      	strb	r2, [r3, #0]
		  new_packet_recieved = false;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <main+0x550>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
		  last_packet_received_time = HAL_GetTick();
 8001c52:	f000 ff51 	bl	8002af8 <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <main+0x54c>)
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e5c6      	b.n	80017ec <main+0x78>

	  }else if(arm_state == FAILSAFE && new_packet_recieved == true)
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <main+0x530>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	f47f adc2 	bne.w	80017ec <main+0x78>
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <main+0x550>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f43f adbc 	beq.w	80017ec <main+0x78>
	  {
		  arm_state = IDLE;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <main+0x530>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001c7a:	e5b7      	b.n	80017ec <main+0x78>
 8001c7c:	200000f4 	.word	0x200000f4
 8001c80:	4483e000 	.word	0x4483e000
 8001c84:	44ffe000 	.word	0x44ffe000
 8001c88:	445f0000 	.word	0x445f0000
 8001c8c:	433f0000 	.word	0x433f0000
 8001c90:	2000025c 	.word	0x2000025c
 8001c94:	45084000 	.word	0x45084000
 8001c98:	446d8000 	.word	0x446d8000
 8001c9c:	44e00000 	.word	0x44e00000
 8001ca0:	20000264 	.word	0x20000264
 8001ca4:	20000268 	.word	0x20000268
 8001ca8:	40011400 	.word	0x40011400
 8001cac:	2000034c 	.word	0x2000034c
 8001cb0:	2000026a 	.word	0x2000026a
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	2000026c 	.word	0x2000026c
 8001cbc:	20000118 	.word	0x20000118
 8001cc0:	2000010c 	.word	0x2000010c
 8001cc4:	20000110 	.word	0x20000110

08001cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b094      	sub	sp, #80	; 0x50
 8001ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2230      	movs	r2, #48	; 0x30
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f005 f94e 	bl	8006f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <SystemClock_Config+0xd0>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <SystemClock_Config+0xd0>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <SystemClock_Config+0xd0>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <SystemClock_Config+0xd4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <SystemClock_Config+0xd4>)
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <SystemClock_Config+0xd4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001d3c:	23c0      	movs	r3, #192	; 0xc0
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 fb13 	bl	8004378 <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d58:	f000 f988 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2302      	movs	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	2103      	movs	r1, #3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 fd74 	bl	8004868 <HAL_RCC_ClockConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d86:	f000 f971 	bl	800206c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001d8a:	f002 fe53 	bl	8004a34 <HAL_RCC_EnableCSS>
}
 8001d8e:	bf00      	nop
 8001d90:	3750      	adds	r7, #80	; 0x50
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000

08001da0 <map>:

/* USER CODE BEGIN 4 */

float map(float value_to_map , float from_low ,float from_high , float to_low , float to_high , bool constrain_within_range)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001daa:	edc7 0a04 	vstr	s1, [r7, #16]
 8001dae:	ed87 1a03 	vstr	s2, [r7, #12]
 8001db2:	edc7 1a02 	vstr	s3, [r7, #8]
 8001db6:	ed87 2a01 	vstr	s4, [r7, #4]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]

	value_to_map = (value_to_map- from_low)*((to_high - to_low)/(from_high- from_low)) + to_low;
 8001dbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dca:	edd7 6a01 	vldr	s13, [r7, #4]
 8001dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001dd6:	edd7 6a03 	vldr	s13, [r7, #12]
 8001dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001de2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	edc7 7a05 	vstr	s15, [r7, #20]
	if(constrain_within_range)
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d03d      	beq.n	8001e78 <map+0xd8>
	{
		if(to_high>=to_low){
 8001dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	db1a      	blt.n	8001e44 <map+0xa4>
			value_to_map = value_to_map > to_high ? to_high : value_to_map;
 8001e0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	dd01      	ble.n	8001e24 <map+0x84>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	e000      	b.n	8001e26 <map+0x86>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map < to_low ? to_low : value_to_map;
 8001e28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d501      	bpl.n	8001e3e <map+0x9e>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	e000      	b.n	8001e40 <map+0xa0>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e019      	b.n	8001e78 <map+0xd8>
		}else{
			// to low is the higher limit
			value_to_map = value_to_map < to_high ? to_high : value_to_map;
 8001e44:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d501      	bpl.n	8001e5a <map+0xba>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	e000      	b.n	8001e5c <map+0xbc>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	617b      	str	r3, [r7, #20]
			value_to_map = value_to_map > to_low ? to_low : value_to_map;
 8001e5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	dd01      	ble.n	8001e74 <map+0xd4>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	e000      	b.n	8001e76 <map+0xd6>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	617b      	str	r3, [r7, #20]

		}
	}
	return value_to_map;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	ee07 3a90 	vmov	s15, r3
}
 8001e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <convert_to_big_endian>:


void convert_to_big_endian(uint8_t * dst , uint8_t bytes)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
	uint8_t temp =0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i < bytes/2;i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e01c      	b.n	8001edc <convert_to_big_endian+0x50>
	{
		//swap
		temp = dst[i];
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	72fb      	strb	r3, [r7, #11]
		dst[i] = dst[(bytes-1)-i];
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	441a      	add	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	440b      	add	r3, r1
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	701a      	strb	r2, [r3, #0]
		dst[(bytes-1)-i] = temp;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	7afa      	ldrb	r2, [r7, #11]
 8001ed4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < bytes/2;i++)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	dbdb      	blt.n	8001ea2 <convert_to_big_endian+0x16>
	}

}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_ADC_ConvCpltCallback+0x148>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f040 8090 	bne.w	800202c <HAL_ADC_ConvCpltCallback+0x134>
	{
		bat.voltage = (uint16_t)(((raw_adc_data[0]*3.3/(float)1024)*vbat_scale*vbat_multiplier/(float)vbat_divider)*10.0); // battery voltage in 0.1V units
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_ADC_ConvCpltCallback+0x14c>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe faaa 	bl	800046c <__aeabi_i2d>
 8001f18:	a347      	add	r3, pc, #284	; (adr r3, 8002038 <HAL_ADC_ConvCpltCallback+0x140>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb0f 	bl	8000540 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_ADC_ConvCpltCallback+0x150>)
 8001f30:	f7fe fc30 	bl	8000794 <__aeabi_ddiv>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_ADC_ConvCpltCallback+0x154>)
 8001f42:	f7fe fafd 	bl	8000540 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_ADC_ConvCpltCallback+0x158>)
 8001f54:	f7fe fc1e 	bl	8000794 <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_ADC_ConvCpltCallback+0x158>)
 8001f66:	f7fe faeb 	bl	8000540 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fcf7 	bl	8000964 <__aeabi_d2uiz>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b299      	uxth	r1, r3
 8001f7a:	4a36      	ldr	r2, [pc, #216]	; (8002054 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f361 030f 	bfi	r3, r1, #0, #16
 8001f82:	6013      	str	r3, [r2, #0]
		bat.current = (uint16_t)(((raw_adc_data[1]*3.3/(float)1024)*ibata_scale - ibata_offset)*10.0); // battery voltage in 0.1A units
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_ADC_ConvCpltCallback+0x14c>)
 8001f86:	885b      	ldrh	r3, [r3, #2]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa6e 	bl	800046c <__aeabi_i2d>
 8001f90:	a329      	add	r3, pc, #164	; (adr r3, 8002038 <HAL_ADC_ConvCpltCallback+0x140>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fad3 	bl	8000540 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <HAL_ADC_ConvCpltCallback+0x150>)
 8001fa8:	f7fe fbf4 	bl	8000794 <__aeabi_ddiv>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_ADC_ConvCpltCallback+0x160>)
 8001fba:	f7fe fac1 	bl	8000540 <__aeabi_dmul>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_ADC_ConvCpltCallback+0x158>)
 8001fcc:	f7fe fab8 	bl	8000540 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7fe fcc4 	bl	8000964 <__aeabi_d2uiz>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	f361 431f 	bfi	r3, r1, #16, #16
 8001fe8:	6013      	str	r3, [r2, #0]
		bat.remaining = (uint8_t)(map(bat.voltage,150,168,0,100,true));
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	ed9f 2a18 	vldr	s4, [pc, #96]	; 800205c <HAL_ADC_ConvCpltCallback+0x164>
 8001ffe:	eddf 1a18 	vldr	s3, [pc, #96]	; 8002060 <HAL_ADC_ConvCpltCallback+0x168>
 8002002:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8002064 <HAL_ADC_ConvCpltCallback+0x16c>
 8002006:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002068 <HAL_ADC_ConvCpltCallback+0x170>
 800200a:	eeb0 0a67 	vmov.f32	s0, s15
 800200e:	f7ff fec7 	bl	8001da0 <map>
 8002012:	eef0 7a40 	vmov.f32	s15, s0
 8002016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201a:	edc7 7a00 	vstr	s15, [r7]
 800201e:	783b      	ldrb	r3, [r7, #0]
 8002020:	b2d9      	uxtb	r1, r3
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_ADC_ConvCpltCallback+0x15c>)
 8002024:	6853      	ldr	r3, [r2, #4]
 8002026:	f361 631f 	bfi	r3, r1, #24, #8
 800202a:	6053      	str	r3, [r2, #4]
	}
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	f3af 8000 	nop.w
 8002038:	66666666 	.word	0x66666666
 800203c:	400a6666 	.word	0x400a6666
 8002040:	40012000 	.word	0x40012000
 8002044:	2000026c 	.word	0x2000026c
 8002048:	40900000 	.word	0x40900000
 800204c:	405b8000 	.word	0x405b8000
 8002050:	40240000 	.word	0x40240000
 8002054:	20000004 	.word	0x20000004
 8002058:	40790000 	.word	0x40790000
 800205c:	42c80000 	.word	0x42c80000
 8002060:	00000000 	.word	0x00000000
 8002064:	43280000 	.word	0x43280000
 8002068:	43160000 	.word	0x43160000

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	e7fe      	b.n	8002074 <Error_Handler+0x8>
	...

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_MspInit+0x4c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_MspInit+0x4c>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_MspInit+0x4c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80020cc:	f002 fdf8 	bl	8004cc0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x8>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 fcda 	bl	8002ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA1_Stream2_IRQHandler+0x10>)
 8002126:	f001 fced 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200003f4 	.word	0x200003f4

08002134 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA1_Stream6_IRQHandler+0x10>)
 800213a:	f001 fce3 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000394 	.word	0x20000394

08002148 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <ADC_IRQHandler+0x10>)
 800214e:	f000 fd46 	bl	8002bde <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000118 	.word	0x20000118

0800215c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <DMA2_Stream0_IRQHandler+0x10>)
 8002162:	f001 fccf 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000160 	.word	0x20000160

08002170 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <DMA2_Stream1_IRQHandler+0x10>)
 8002176:	f001 fcc5 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000498 	.word	0x20000498

08002184 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <DMA2_Stream6_IRQHandler+0x10>)
 800218a:	f001 fcbb 	bl	8003b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200004f8 	.word	0x200004f8

08002198 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <USART6_IRQHandler+0x10>)
 800219e:	f003 fe15 	bl	8005dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000454 	.word	0x20000454

080021ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <SystemInit+0x20>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <SystemInit+0x20>)
 80021b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch2_ch4;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	; 0x38
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <MX_TIM2_Init+0xe4>)
 800220a:	2200      	movs	r2, #0
 800220c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <MX_TIM2_Init+0xe4>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002226:	4823      	ldr	r0, [pc, #140]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002228:	f002 fd65 	bl	8004cf6 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002232:	f7ff ff1b 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002240:	4619      	mov	r1, r3
 8002242:	481c      	ldr	r0, [pc, #112]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002244:	f002 fff2 	bl	800522c <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800224e:	f7ff ff0d 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002254:	f002 fe06 	bl	8004e64 <HAL_TIM_PWM_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800225e:	f7ff ff05 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	4619      	mov	r1, r3
 8002270:	4810      	ldr	r0, [pc, #64]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002272:	f003 fbb3 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800227c:	f7ff fef6 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002280:	2360      	movs	r3, #96	; 0x60
 8002282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	220c      	movs	r2, #12
 8002294:	4619      	mov	r1, r3
 8002296:	4807      	ldr	r0, [pc, #28]	; (80022b4 <MX_TIM2_Init+0xe4>)
 8002298:	f002 ff06 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80022a2:	f7ff fee3 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a6:	4803      	ldr	r0, [pc, #12]	; (80022b4 <MX_TIM2_Init+0xe4>)
 80022a8:	f000 fa28 	bl	80026fc <HAL_TIM_MspPostInit>

}
 80022ac:	bf00      	nop
 80022ae:	3738      	adds	r7, #56	; 0x38
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000274 	.word	0x20000274

080022b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	; 0x38
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	f107 0320 	add.w	r3, r7, #32
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	615a      	str	r2, [r3, #20]
 80022e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <MX_TIM3_Init+0xe4>)
 80022ea:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <MX_TIM3_Init+0xe8>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <MX_TIM3_Init+0xe4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <MX_TIM3_Init+0xe4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <MX_TIM3_Init+0xe4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <MX_TIM3_Init+0xe4>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <MX_TIM3_Init+0xe4>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800230c:	4823      	ldr	r0, [pc, #140]	; (800239c <MX_TIM3_Init+0xe4>)
 800230e:	f002 fcf2 	bl	8004cf6 <HAL_TIM_Base_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002318:	f7ff fea8 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800231c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002326:	4619      	mov	r1, r3
 8002328:	481c      	ldr	r0, [pc, #112]	; (800239c <MX_TIM3_Init+0xe4>)
 800232a:	f002 ff7f 	bl	800522c <HAL_TIM_ConfigClockSource>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002334:	f7ff fe9a 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002338:	4818      	ldr	r0, [pc, #96]	; (800239c <MX_TIM3_Init+0xe4>)
 800233a:	f002 fd93 	bl	8004e64 <HAL_TIM_PWM_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002344:	f7ff fe92 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	4619      	mov	r1, r3
 8002356:	4811      	ldr	r0, [pc, #68]	; (800239c <MX_TIM3_Init+0xe4>)
 8002358:	f003 fb40 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002362:	f7ff fe83 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002366:	2360      	movs	r3, #96	; 0x60
 8002368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	220c      	movs	r2, #12
 800237a:	4619      	mov	r1, r3
 800237c:	4807      	ldr	r0, [pc, #28]	; (800239c <MX_TIM3_Init+0xe4>)
 800237e:	f002 fe93 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002388:	f7ff fe70 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <MX_TIM3_Init+0xe4>)
 800238e:	f000 f9b5 	bl	80026fc <HAL_TIM_MspPostInit>

}
 8002392:	bf00      	nop
 8002394:	3738      	adds	r7, #56	; 0x38
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200002bc 	.word	0x200002bc
 80023a0:	40000400 	.word	0x40000400

080023a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	463b      	mov	r3, r7
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_TIM4_Init+0x94>)
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <MX_TIM4_Init+0x98>)
 80023c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <MX_TIM4_Init+0x94>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_TIM4_Init+0x94>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_TIM4_Init+0x94>)
 80023d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_TIM4_Init+0x94>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MX_TIM4_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023e6:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_TIM4_Init+0x94>)
 80023e8:	f002 fc85 	bl	8004cf6 <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80023f2:	f7ff fe3b 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	4619      	mov	r1, r3
 8002402:	480d      	ldr	r0, [pc, #52]	; (8002438 <MX_TIM4_Init+0x94>)
 8002404:	f002 ff12 	bl	800522c <HAL_TIM_ConfigClockSource>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800240e:	f7ff fe2d 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	4619      	mov	r1, r3
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <MX_TIM4_Init+0x94>)
 8002420:	f003 fadc 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800242a:	f7ff fe1f 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000304 	.word	0x20000304
 800243c:	40000800 	.word	0x40000800

08002440 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08e      	sub	sp, #56	; 0x38
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	f107 0320 	add.w	r3, r7, #32
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	615a      	str	r2, [r3, #20]
 800246e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <MX_TIM5_Init+0xe8>)
 8002474:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <MX_TIM5_Init+0xe4>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <MX_TIM5_Init+0xe4>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002494:	4823      	ldr	r0, [pc, #140]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002496:	f002 fc2e 	bl	8004cf6 <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80024a0:	f7ff fde4 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ae:	4619      	mov	r1, r3
 80024b0:	481c      	ldr	r0, [pc, #112]	; (8002524 <MX_TIM5_Init+0xe4>)
 80024b2:	f002 febb 	bl	800522c <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80024bc:	f7ff fdd6 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024c0:	4818      	ldr	r0, [pc, #96]	; (8002524 <MX_TIM5_Init+0xe4>)
 80024c2:	f002 fccf 	bl	8004e64 <HAL_TIM_PWM_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80024cc:	f7ff fdce 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4619      	mov	r1, r3
 80024de:	4811      	ldr	r0, [pc, #68]	; (8002524 <MX_TIM5_Init+0xe4>)
 80024e0:	f003 fa7c 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80024ea:	f7ff fdbf 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ee:	2360      	movs	r3, #96	; 0x60
 80024f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	4807      	ldr	r0, [pc, #28]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002506:	f002 fdcf 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8002510:	f7ff fdac 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <MX_TIM5_Init+0xe4>)
 8002516:	f000 f8f1 	bl	80026fc <HAL_TIM_MspPostInit>

}
 800251a:	bf00      	nop
 800251c:	3738      	adds	r7, #56	; 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000034c 	.word	0x2000034c
 8002528:	40000c00 	.word	0x40000c00

0800252c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d14e      	bne.n	80025dc <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800255a:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 800255c:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <HAL_TIM_Base_MspInit+0x1b8>)
 800255e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 8002562:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002566:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002568:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002574:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 800257e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002582:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002584:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 8002586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800258a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800258c:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 8002594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002598:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 800259c:	2204      	movs	r2, #4
 800259e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80025a0:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80025a6:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025ac:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80025b2:	484b      	ldr	r0, [pc, #300]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025b4:	f001 f90e 	bl	80037d4 <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 80025be:	f7ff fd55 	bl	800206c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
 80025c8:	4a45      	ldr	r2, [pc, #276]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a43      	ldr	r2, [pc, #268]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
 80025d4:	4a42      	ldr	r2, [pc, #264]	; (80026e0 <HAL_TIM_Base_MspInit+0x1b4>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80025da:	e07a      	b.n	80026d2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_TIM_Base_MspInit+0x1bc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d14e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002604:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002606:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800260a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800260e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b33      	ldr	r3, [pc, #204]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800261e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002622:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002626:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800262a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800262e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002632:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800263c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002640:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002644:	2204      	movs	r2, #4
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002650:	2200      	movs	r2, #0
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800265a:	4824      	ldr	r0, [pc, #144]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800265c:	f001 f8ba 	bl	80037d4 <HAL_DMA_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_TIM_Base_MspInit+0x13e>
      Error_Handler();
 8002666:	f7ff fd01 	bl	800206c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
 8002670:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800267a:	621a      	str	r2, [r3, #32]
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_TIM_Base_MspInit+0x1c0>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002682:	e026      	b.n	80026d2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM4)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_TIM_Base_MspInit+0x1c8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	e012      	b.n	80026d2 <HAL_TIM_Base_MspInit+0x1a6>
  else if(tim_baseHandle->Instance==TIM5)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_TIM_Base_MspInit+0x1cc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10d      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a07      	ldr	r2, [pc, #28]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_TIM_Base_MspInit+0x1b0>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	20000394 	.word	0x20000394
 80026e4:	400260a0 	.word	0x400260a0
 80026e8:	40000400 	.word	0x40000400
 80026ec:	200003f4 	.word	0x200003f4
 80026f0:	40026040 	.word	0x40026040
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40000c00 	.word	0x40000c00

080026fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d11e      	bne.n	800275c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800273a:	2308      	movs	r3, #8
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800274a:	2301      	movs	r3, #1
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4828      	ldr	r0, [pc, #160]	; (80027f8 <HAL_TIM_MspPostInit+0xfc>)
 8002756:	f001 fc3f 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800275a:	e046      	b.n	80027ea <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM3)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_TIM_MspPostInit+0x100>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d11e      	bne.n	80027a4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002782:	2302      	movs	r3, #2
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002792:	2302      	movs	r3, #2
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4818      	ldr	r0, [pc, #96]	; (8002800 <HAL_TIM_MspPostInit+0x104>)
 800279e:	f001 fc1b 	bl	8003fd8 <HAL_GPIO_Init>
}
 80027a2:	e022      	b.n	80027ea <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM5)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <HAL_TIM_MspPostInit+0x108>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d11d      	bne.n	80027ea <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_TIM_MspPostInit+0xf8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ca:	2301      	movs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027da:	2302      	movs	r3, #2
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <HAL_TIM_MspPostInit+0xfc>)
 80027e6:	f001 fbf7 	bl	8003fd8 <HAL_GPIO_Init>
}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40020400 	.word	0x40020400
 8002804:	40000c00 	.word	0x40000c00

08002808 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_USART6_UART_Init+0x48>)
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <MX_USART6_UART_Init+0x4c>)
 8002810:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 420000;
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_USART6_UART_Init+0x48>)
 8002814:	4a10      	ldr	r2, [pc, #64]	; (8002858 <MX_USART6_UART_Init+0x50>)
 8002816:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <MX_USART6_UART_Init+0x48>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USART6_UART_Init+0x48>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <MX_USART6_UART_Init+0x48>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USART6_UART_Init+0x48>)
 800282c:	220c      	movs	r2, #12
 800282e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <MX_USART6_UART_Init+0x48>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USART6_UART_Init+0x48>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <MX_USART6_UART_Init+0x48>)
 800283e:	f003 f949 	bl	8005ad4 <HAL_UART_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8002848:	f7ff fc10 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000454 	.word	0x20000454
 8002854:	40011400 	.word	0x40011400
 8002858:	000668a0 	.word	0x000668a0

0800285c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a50      	ldr	r2, [pc, #320]	; (80029bc <HAL_UART_MspInit+0x160>)
 800287a:	4293      	cmp	r3, r2
 800287c:	f040 809a 	bne.w	80029b4 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_UART_MspInit+0x164>)
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	4a4d      	ldr	r2, [pc, #308]	; (80029c0 <HAL_UART_MspInit+0x164>)
 800288a:	f043 0320 	orr.w	r3, r3, #32
 800288e:	6453      	str	r3, [r2, #68]	; 0x44
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_UART_MspInit+0x164>)
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_UART_MspInit+0x164>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <HAL_UART_MspInit+0x164>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30
 80028ac:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_UART_MspInit+0x164>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028c8:	2308      	movs	r3, #8
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	483c      	ldr	r0, [pc, #240]	; (80029c4 <HAL_UART_MspInit+0x168>)
 80028d4:	f001 fb80 	bl	8003fd8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 80028da:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <HAL_UART_MspInit+0x170>)
 80028dc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 80028e0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80028e4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028f2:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 80028f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002908:	2200      	movs	r2, #0
 800290a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 800290e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002912:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002916:	2204      	movs	r2, #4
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800291a:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 800291c:	2201      	movs	r2, #1
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002922:	2200      	movs	r2, #0
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800292c:	4826      	ldr	r0, [pc, #152]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 800292e:	f000 ff51 	bl	80037d4 <HAL_DMA_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002938:	f7ff fb98 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_UART_MspInit+0x16c>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_UART_MspInit+0x174>)
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_UART_MspInit+0x178>)
 800294c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_UART_MspInit+0x174>)
 8002950:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002954:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_UART_MspInit+0x174>)
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_UART_MspInit+0x174>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_UART_MspInit+0x174>)
 8002964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002968:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_UART_MspInit+0x174>)
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_UART_MspInit+0x174>)
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_UART_MspInit+0x174>)
 8002978:	2200      	movs	r2, #0
 800297a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_UART_MspInit+0x174>)
 800297e:	2200      	movs	r2, #0
 8002980:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_UART_MspInit+0x174>)
 8002984:	2200      	movs	r2, #0
 8002986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002988:	4811      	ldr	r0, [pc, #68]	; (80029d0 <HAL_UART_MspInit+0x174>)
 800298a:	f000 ff23 	bl	80037d4 <HAL_DMA_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002994:	f7ff fb6a 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_UART_MspInit+0x174>)
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <HAL_UART_MspInit+0x174>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2101      	movs	r1, #1
 80029a8:	2047      	movs	r0, #71	; 0x47
 80029aa:	f000 fedc 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80029ae:	2047      	movs	r0, #71	; 0x47
 80029b0:	f000 fef5 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40011400 	.word	0x40011400
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020800 	.word	0x40020800
 80029c8:	20000498 	.word	0x20000498
 80029cc:	40026428 	.word	0x40026428
 80029d0:	200004f8 	.word	0x200004f8
 80029d4:	400264a0 	.word	0x400264a0

080029d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029dc:	480d      	ldr	r0, [pc, #52]	; (8002a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029de:	490e      	ldr	r1, [pc, #56]	; (8002a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029f4:	4c0b      	ldr	r4, [pc, #44]	; (8002a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a02:	f7ff fbd3 	bl	80021ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f004 fabf 	bl	8006f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0a:	f7fe feb3 	bl	8001774 <main>
  bx  lr    
 8002a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a18:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002a1c:	080070bc 	.word	0x080070bc
  ldr r2, =_sbss
 8002a20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002a24:	2000055c 	.word	0x2000055c

08002a28 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <CAN1_RX0_IRQHandler>
	...

08002a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_Init+0x40>)
 8002a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <HAL_Init+0x40>)
 8002a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <HAL_Init+0x40>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a54:	2003      	movs	r0, #3
 8002a56:	f000 fe7b 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5a:	200f      	movs	r0, #15
 8002a5c:	f000 f808 	bl	8002a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a60:	f7ff fb0a 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00

08002a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_InitTick+0x54>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_InitTick+0x58>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fe93 	bl	80037ba <HAL_SYSTICK_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00e      	b.n	8002abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d80a      	bhi.n	8002aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f000 fe5b 	bl	8003766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <HAL_InitTick+0x5c>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	2000000c 	.word	0x2000000c
 8002ac8:	20000014 	.word	0x20000014
 8002acc:	20000010 	.word	0x20000010

08002ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_IncTick+0x20>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_IncTick+0x24>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_IncTick+0x24>)
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000014 	.word	0x20000014
 8002af4:	20000558 	.word	0x20000558

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_GetTick+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000558 	.word	0x20000558

08002b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff ffee 	bl	8002af8 <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d005      	beq.n	8002b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_Delay+0x44>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b36:	bf00      	nop
 8002b38:	f7ff ffde 	bl	8002af8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d8f7      	bhi.n	8002b38 <HAL_Delay+0x28>
  {
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000014 	.word	0x20000014

08002b58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e033      	b.n	8002bd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe faba 	bl	80010f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b9e:	f023 0302 	bic.w	r3, r3, #2
 8002ba2:	f043 0202 	orr.w	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fb78 	bl	80032a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc6:	e001      	b.n	8002bcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d049      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0xca>
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d046      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12b      	bne.n	8002c98 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d127      	bne.n	8002c98 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d119      	bne.n	8002c98 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0220 	bic.w	r2, r2, #32
 8002c72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff f92d 	bl	8001ef8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0212 	mvn.w	r2, #18
 8002ca6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d057      	beq.n	8002d6e <HAL_ADC_IRQHandler+0x190>
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d054      	beq.n	8002d6e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d139      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d12b      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d124      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11d      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d119      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fc1c 	bl	800359c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 020c 	mvn.w	r2, #12
 8002d6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d017      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x1d6>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d014      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10d      	bne.n	8002db4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f945 	bl	8003034 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f06f 0201 	mvn.w	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d015      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x218>
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f043 0202 	orr.w	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0220 	mvn.w	r2, #32
 8002de4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f92e 	bl	8003048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0220 	mvn.w	r2, #32
 8002df4:	601a      	str	r2, [r3, #0]
  }
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x1e>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e0e9      	b.n	8002ff2 <HAL_ADC_Start_DMA+0x1f2>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d018      	beq.n	8002e66 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e44:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_ADC_Start_DMA+0x1fc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <HAL_ADC_Start_DMA+0x200>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0c9a      	lsrs	r2, r3, #18
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e58:	e002      	b.n	8002e60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f9      	bne.n	8002e5a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e74:	d107      	bne.n	8002e86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	f040 80a1 	bne.w	8002fd8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f023 0206 	bic.w	r2, r3, #6
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ee2:	e002      	b.n	8002eea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef2:	4b44      	ldr	r3, [pc, #272]	; (8003004 <HAL_ADC_Start_DMA+0x204>)
 8002ef4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4a43      	ldr	r2, [pc, #268]	; (8003008 <HAL_ADC_Start_DMA+0x208>)
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a42      	ldr	r2, [pc, #264]	; (800300c <HAL_ADC_Start_DMA+0x20c>)
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4a41      	ldr	r2, [pc, #260]	; (8003010 <HAL_ADC_Start_DMA+0x210>)
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	334c      	adds	r3, #76	; 0x4c
 8002f42:	4619      	mov	r1, r3
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f000 fcf2 	bl	8003930 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d12a      	bne.n	8002fae <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <HAL_ADC_Start_DMA+0x214>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d015      	beq.n	8002f8e <HAL_ADC_Start_DMA+0x18e>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <HAL_ADC_Start_DMA+0x218>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_Start_DMA+0x178>
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_ADC_Start_DMA+0x204>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <HAL_ADC_Start_DMA+0x21c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d136      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_ADC_Start_DMA+0x204>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d130      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d129      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e020      	b.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_ADC_Start_DMA+0x214>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d114      	bne.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c
 8003000:	431bde83 	.word	0x431bde83
 8003004:	40012300 	.word	0x40012300
 8003008:	08003499 	.word	0x08003499
 800300c:	08003553 	.word	0x08003553
 8003010:	0800356f 	.word	0x0800356f
 8003014:	40012000 	.word	0x40012000
 8003018:	40012100 	.word	0x40012100
 800301c:	40012200 	.word	0x40012200

08003020 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1c>
 8003074:	2302      	movs	r3, #2
 8003076:	e105      	b.n	8003284 <HAL_ADC_ConfigChannel+0x228>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b09      	cmp	r3, #9
 8003086:	d925      	bls.n	80030d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	3b1e      	subs	r3, #30
 800309e:	2207      	movs	r2, #7
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43da      	mvns	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4403      	add	r3, r0
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	e022      	b.n	800311a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	2207      	movs	r2, #7
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	4603      	mov	r3, r0
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4403      	add	r3, r0
 8003110:	409a      	lsls	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d824      	bhi.n	800316c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b05      	subs	r3, #5
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b05      	subs	r3, #5
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	; 0x34
 800316a:	e04c      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d824      	bhi.n	80031be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	3b23      	subs	r3, #35	; 0x23
 8003186:	221f      	movs	r2, #31
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b23      	subs	r3, #35	; 0x23
 80031b0:	fa00 f203 	lsl.w	r2, r0, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
 80031bc:	e023      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b41      	subs	r3, #65	; 0x41
 80031d0:	221f      	movs	r2, #31
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b41      	subs	r3, #65	; 0x41
 80031fa:	fa00 f203 	lsl.w	r2, r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_ADC_ConfigChannel+0x234>)
 8003208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <HAL_ADC_ConfigChannel+0x238>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d109      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1cc>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b12      	cmp	r3, #18
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_ADC_ConfigChannel+0x238>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d123      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d003      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x1e6>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b11      	cmp	r3, #17
 8003240:	d11b      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b10      	cmp	r3, #16
 8003254:	d111      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_ADC_ConfigChannel+0x23c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_ADC_ConfigChannel+0x240>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9a      	lsrs	r2, r3, #18
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800326c:	e002      	b.n	8003274 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012300 	.word	0x40012300
 8003294:	40012000 	.word	0x40012000
 8003298:	2000000c 	.word	0x2000000c
 800329c:	431bde83 	.word	0x431bde83

080032a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032a8:	4b79      	ldr	r3, [pc, #484]	; (8003490 <ADC_Init+0x1f0>)
 80032aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	4a58      	ldr	r2, [pc, #352]	; (8003494 <ADC_Init+0x1f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	e00f      	b.n	800339e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800339c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0202 	bic.w	r2, r2, #2
 80033ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e1b      	ldrb	r3, [r3, #24]
 80033b8:	005a      	lsls	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	3b01      	subs	r3, #1
 80033f8:	035a      	lsls	r2, r3, #13
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e007      	b.n	8003414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	3b01      	subs	r3, #1
 8003430:	051a      	lsls	r2, r3, #20
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003456:	025a      	lsls	r2, r3, #9
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	029a      	lsls	r2, r3, #10
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012300 	.word	0x40012300
 8003494:	0f000001 	.word	0x0f000001

08003498 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d13c      	bne.n	800352c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d12b      	bne.n	8003524 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d127      	bne.n	8003524 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d119      	bne.n	8003524 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0220 	bic.w	r2, r2, #32
 80034fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7fe fce7 	bl	8001ef8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800352a:	e00e      	b.n	800354a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff fd85 	bl	8003048 <HAL_ADC_ErrorCallback>
}
 800353e:	e004      	b.n	800354a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fd5d 	bl	8003020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fd5a 	bl	8003048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035cc:	4013      	ands	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035e2:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <__NVIC_SetPriorityGrouping+0x44>)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	60d3      	str	r3, [r2, #12]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <__NVIC_GetPriorityGrouping+0x18>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	f003 0307 	and.w	r3, r3, #7
}
 8003606:	4618      	mov	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	2b00      	cmp	r3, #0
 8003624:	db0b      	blt.n	800363e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4907      	ldr	r1, [pc, #28]	; (800364c <__NVIC_EnableIRQ+0x38>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	2001      	movs	r0, #1
 8003636:	fa00 f202 	lsl.w	r2, r0, r2
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db0a      	blt.n	800367a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	; (800369c <__NVIC_SetPriority+0x4c>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003678:	e00a      	b.n	8003690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <__NVIC_SetPriority+0x50>)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3b04      	subs	r3, #4
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	440b      	add	r3, r1
 800368e:	761a      	strb	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f1c3 0307 	rsb	r3, r3, #7
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf28      	it	cs
 80036c2:	2304      	movcs	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d902      	bls.n	80036d4 <NVIC_EncodePriority+0x30>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3b03      	subs	r3, #3
 80036d2:	e000      	b.n	80036d6 <NVIC_EncodePriority+0x32>
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	4313      	orrs	r3, r2
         );
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800371c:	d301      	bcc.n	8003722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371e:	2301      	movs	r3, #1
 8003720:	e00f      	b.n	8003742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <SysTick_Config+0x40>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372a:	210f      	movs	r1, #15
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	f7ff ff8e 	bl	8003650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <SysTick_Config+0x40>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <SysTick_Config+0x40>)
 800373c:	2207      	movs	r2, #7
 800373e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff29 	bl	80035b0 <__NVIC_SetPriorityGrouping>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003778:	f7ff ff3e 	bl	80035f8 <__NVIC_GetPriorityGrouping>
 800377c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff ff8e 	bl	80036a4 <NVIC_EncodePriority>
 8003788:	4602      	mov	r2, r0
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff5d 	bl	8003650 <__NVIC_SetPriority>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff31 	bl	8003614 <__NVIC_EnableIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffa2 	bl	800370c <SysTick_Config>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7ff f98a 	bl	8002af8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e099      	b.n	8003924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003810:	e00f      	b.n	8003832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003812:	f7ff f971 	bl	8002af8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b05      	cmp	r3, #5
 800381e:	d908      	bls.n	8003832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2203      	movs	r2, #3
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e078      	b.n	8003924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e8      	bne.n	8003812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_DMA_Init+0x158>)
 800384c:	4013      	ands	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b04      	cmp	r3, #4
 800388a:	d107      	bne.n	800389c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	4313      	orrs	r3, r2
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0307 	bic.w	r3, r3, #7
 80038b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d117      	bne.n	80038f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb01 	bl	8003ee0 <DMA_CheckFifoParam>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038f2:	2301      	movs	r3, #1
 80038f4:	e016      	b.n	8003924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fab8 	bl	8003e74 <DMA_CalcBaseAndBitshift>
 8003904:	4603      	mov	r3, r0
 8003906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	223f      	movs	r2, #63	; 0x3f
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	f010803f 	.word	0xf010803f

08003930 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_DMA_Start_IT+0x26>
 8003952:	2302      	movs	r3, #2
 8003954:	e040      	b.n	80039d8 <HAL_DMA_Start_IT+0xa8>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d12f      	bne.n	80039ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fa4a 	bl	8003e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	223f      	movs	r2, #63	; 0x3f
 800398a:	409a      	lsls	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0216 	orr.w	r2, r2, #22
 800399e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0208 	orr.w	r2, r2, #8
 80039b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e005      	b.n	80039d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039d2:	2302      	movs	r3, #2
 80039d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039ee:	f7ff f883 	bl	8002af8 <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d008      	beq.n	8003a12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e052      	b.n	8003ab8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0216 	bic.w	r2, r2, #22
 8003a20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_DMA_Abort+0x62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0208 	bic.w	r2, r2, #8
 8003a50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a62:	e013      	b.n	8003a8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a64:	f7ff f848 	bl	8002af8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d90c      	bls.n	8003a8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e015      	b.n	8003ab8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e4      	bne.n	8003a64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	223f      	movs	r2, #63	; 0x3f
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d004      	beq.n	8003ade <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00c      	b.n	8003af8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2205      	movs	r2, #5
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b10:	4b8e      	ldr	r3, [pc, #568]	; (8003d4c <HAL_DMA_IRQHandler+0x248>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a8e      	ldr	r2, [pc, #568]	; (8003d50 <HAL_DMA_IRQHandler+0x24c>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0a9b      	lsrs	r3, r3, #10
 8003b1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	2208      	movs	r2, #8
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01a      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d012      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2201      	movs	r2, #1
 8003b94:	409a      	lsls	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0202 	orr.w	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	2204      	movs	r2, #4
 8003bac:	409a      	lsls	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	2204      	movs	r2, #4
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	2210      	movs	r2, #16
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d043      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d03c      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	2210      	movs	r2, #16
 8003c00:	409a      	lsls	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d024      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
 8003c32:	e01f      	b.n	8003c74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	e016      	b.n	8003c74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0208 	bic.w	r2, r2, #8
 8003c62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	2220      	movs	r2, #32
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 808f 	beq.w	8003da4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8087 	beq.w	8003da4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d136      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0216 	bic.w	r2, r2, #22
 8003cbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ccc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_DMA_IRQHandler+0x1da>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	223f      	movs	r2, #63	; 0x3f
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d07e      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
        }
        return;
 8003d1a:	e079      	b.n	8003e10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01d      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d031      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4798      	blx	r3
 8003d48:	e02c      	b.n	8003da4 <HAL_DMA_IRQHandler+0x2a0>
 8003d4a:	bf00      	nop
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d023      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e01e      	b.n	8003da4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10f      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0210 	bic.w	r2, r2, #16
 8003d82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d032      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d022      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2205      	movs	r2, #5
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d307      	bcc.n	8003dec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f2      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x2cc>
 8003dea:	e000      	b.n	8003dee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e10:	bf00      	nop
    }
  }
}
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d108      	bne.n	8003e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e56:	e007      	b.n	8003e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	3b10      	subs	r3, #16
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e8e:	4a13      	ldr	r2, [pc, #76]	; (8003edc <DMA_CalcBaseAndBitshift+0x68>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d909      	bls.n	8003eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb4:	e007      	b.n	8003ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	aaaaaaab 	.word	0xaaaaaaab
 8003edc:	0800709c 	.word	0x0800709c

08003ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d11f      	bne.n	8003f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d856      	bhi.n	8003fae <DMA_CheckFifoParam+0xce>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <DMA_CheckFifoParam+0x28>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f2b 	.word	0x08003f2b
 8003f10:	08003f19 	.word	0x08003f19
 8003f14:	08003faf 	.word	0x08003faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d046      	beq.n	8003fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f28:	e043      	b.n	8003fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f32:	d140      	bne.n	8003fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f38:	e03d      	b.n	8003fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f42:	d121      	bne.n	8003f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d837      	bhi.n	8003fba <DMA_CheckFifoParam+0xda>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <DMA_CheckFifoParam+0x70>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f67 	.word	0x08003f67
 8003f58:	08003f61 	.word	0x08003f61
 8003f5c:	08003f79 	.word	0x08003f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e030      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d025      	beq.n	8003fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f76:	e022      	b.n	8003fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f80:	d11f      	bne.n	8003fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f86:	e01c      	b.n	8003fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d903      	bls.n	8003f96 <DMA_CheckFifoParam+0xb6>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d003      	beq.n	8003f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f94:	e018      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9a:	e015      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e00b      	b.n	8003fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e00a      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e008      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e006      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e004      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e16b      	b.n	80042cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	f040 815a 	bne.w	80042c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d005      	beq.n	800402a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004026:	2b02      	cmp	r3, #2
 8004028:	d130      	bne.n	800408c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 0201 	and.w	r2, r3, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b03      	cmp	r3, #3
 8004096:	d017      	beq.n	80040c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d123      	bne.n	800411c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	08da      	lsrs	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3208      	adds	r2, #8
 80040dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	220f      	movs	r2, #15
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	08da      	lsrs	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3208      	adds	r2, #8
 8004116:	69b9      	ldr	r1, [r7, #24]
 8004118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80b4 	beq.w	80042c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b60      	ldr	r3, [pc, #384]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	4a5f      	ldr	r2, [pc, #380]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800416c:	6453      	str	r3, [r2, #68]	; 0x44
 800416e:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800417a:	4a5b      	ldr	r2, [pc, #364]	; (80042e8 <HAL_GPIO_Init+0x310>)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	220f      	movs	r2, #15
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_GPIO_Init+0x314>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02b      	beq.n	80041fe <HAL_GPIO_Init+0x226>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a51      	ldr	r2, [pc, #324]	; (80042f0 <HAL_GPIO_Init+0x318>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d025      	beq.n	80041fa <HAL_GPIO_Init+0x222>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a50      	ldr	r2, [pc, #320]	; (80042f4 <HAL_GPIO_Init+0x31c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <HAL_GPIO_Init+0x21e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4f      	ldr	r2, [pc, #316]	; (80042f8 <HAL_GPIO_Init+0x320>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d019      	beq.n	80041f2 <HAL_GPIO_Init+0x21a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4e      	ldr	r2, [pc, #312]	; (80042fc <HAL_GPIO_Init+0x324>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_GPIO_Init+0x216>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4d      	ldr	r2, [pc, #308]	; (8004300 <HAL_GPIO_Init+0x328>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00d      	beq.n	80041ea <HAL_GPIO_Init+0x212>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4c      	ldr	r2, [pc, #304]	; (8004304 <HAL_GPIO_Init+0x32c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <HAL_GPIO_Init+0x20e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_GPIO_Init+0x330>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_GPIO_Init+0x20a>
 80041de:	2307      	movs	r3, #7
 80041e0:	e00e      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041e2:	2308      	movs	r3, #8
 80041e4:	e00c      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e00a      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e008      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e006      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e004      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e002      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041fe:	2300      	movs	r3, #0
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	f002 0203 	and.w	r2, r2, #3
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	4093      	lsls	r3, r2
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004210:	4935      	ldr	r1, [pc, #212]	; (80042e8 <HAL_GPIO_Init+0x310>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421e:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_GPIO_Init+0x334>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004242:	4a32      	ldr	r2, [pc, #200]	; (800430c <HAL_GPIO_Init+0x334>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004248:	4b30      	ldr	r3, [pc, #192]	; (800430c <HAL_GPIO_Init+0x334>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <HAL_GPIO_Init+0x334>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <HAL_GPIO_Init+0x334>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <HAL_GPIO_Init+0x334>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <HAL_GPIO_Init+0x334>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <HAL_GPIO_Init+0x334>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f ae90 	bls.w	8003ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40020800 	.word	0x40020800
 80042f8:	40020c00 	.word	0x40020c00
 80042fc:	40021000 	.word	0x40021000
 8004300:	40021400 	.word	0x40021400
 8004304:	40021800 	.word	0x40021800
 8004308:	40021c00 	.word	0x40021c00
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800432c:	e003      	b.n	8004336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	041a      	lsls	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004354:	887a      	ldrh	r2, [r7, #2]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4013      	ands	r3, r2
 800435a:	041a      	lsls	r2, r3, #16
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	43d9      	mvns	r1, r3
 8004360:	887b      	ldrh	r3, [r7, #2]
 8004362:	400b      	ands	r3, r1
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	619a      	str	r2, [r3, #24]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e267      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d075      	beq.n	8004482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004396:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00c      	beq.n	80043bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4b85      	ldr	r3, [pc, #532]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d112      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4b82      	ldr	r3, [pc, #520]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b7e      	ldr	r3, [pc, #504]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05b      	beq.n	8004480 <HAL_RCC_OscConfig+0x108>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d157      	bne.n	8004480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e242      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d106      	bne.n	80043ec <HAL_RCC_OscConfig+0x74>
 80043de:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a75      	ldr	r2, [pc, #468]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <HAL_RCC_OscConfig+0xb0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x98>
 80043f6:	4b70      	ldr	r3, [pc, #448]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6f      	ldr	r2, [pc, #444]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b6d      	ldr	r3, [pc, #436]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a6c      	ldr	r2, [pc, #432]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0xb0>
 8004410:	4b69      	ldr	r3, [pc, #420]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a68      	ldr	r2, [pc, #416]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b66      	ldr	r3, [pc, #408]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a65      	ldr	r2, [pc, #404]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fe fb62 	bl	8002af8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe fb5e 	bl	8002af8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e207      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xc0>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fb4e 	bl	8002af8 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe fb4a 	bl	8002af8 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1f3      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004472:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0xe8>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d063      	beq.n	8004556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448e:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d11c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b44      	ldr	r3, [pc, #272]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d116      	bne.n	80044e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_RCC_OscConfig+0x152>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d001      	beq.n	80044ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e1c7      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4937      	ldr	r1, [pc, #220]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	e03a      	b.n	8004556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e8:	4b34      	ldr	r3, [pc, #208]	; (80045bc <HAL_RCC_OscConfig+0x244>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fe fb03 	bl	8002af8 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f6:	f7fe faff 	bl	8002af8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e1a8      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4925      	ldr	r1, [pc, #148]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	e015      	b.n	8004556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <HAL_RCC_OscConfig+0x244>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe fae2 	bl	8002af8 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004538:	f7fe fade 	bl	8002af8 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e187      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d036      	beq.n	80045d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <HAL_RCC_OscConfig+0x248>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fe fac2 	bl	8002af8 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004578:	f7fe fabe 	bl	8002af8 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e167      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458a:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_OscConfig+0x240>)
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x200>
 8004596:	e01b      	b.n	80045d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_OscConfig+0x248>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459e:	f7fe faab 	bl	8002af8 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	e00e      	b.n	80045c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a6:	f7fe faa7 	bl	8002af8 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d907      	bls.n	80045c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e150      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
 80045b8:	40023800 	.word	0x40023800
 80045bc:	42470000 	.word	0x42470000
 80045c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	4b88      	ldr	r3, [pc, #544]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ea      	bne.n	80045a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8097 	beq.w	800470c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e2:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	4b7d      	ldr	r3, [pc, #500]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a7c      	ldr	r2, [pc, #496]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b7a      	ldr	r3, [pc, #488]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b77      	ldr	r3, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x474>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d118      	bne.n	800464c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461a:	4b74      	ldr	r3, [pc, #464]	; (80047ec <HAL_RCC_OscConfig+0x474>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a73      	ldr	r2, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x474>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7fe fa67 	bl	8002af8 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fe fa63 	bl	8002af8 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e10c      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <HAL_RCC_OscConfig+0x474>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x2ea>
 8004654:	4b64      	ldr	r3, [pc, #400]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a63      	ldr	r2, [pc, #396]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
 8004660:	e01c      	b.n	800469c <HAL_RCC_OscConfig+0x324>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b05      	cmp	r3, #5
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x30c>
 800466a:	4b5f      	ldr	r3, [pc, #380]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a5e      	ldr	r2, [pc, #376]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004670:	f043 0304 	orr.w	r3, r3, #4
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
 8004676:	4b5c      	ldr	r3, [pc, #368]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a5b      	ldr	r2, [pc, #364]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	e00b      	b.n	800469c <HAL_RCC_OscConfig+0x324>
 8004684:	4b58      	ldr	r3, [pc, #352]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4a57      	ldr	r2, [pc, #348]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
 8004690:	4b55      	ldr	r3, [pc, #340]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	4a54      	ldr	r2, [pc, #336]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 0304 	bic.w	r3, r3, #4
 800469a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fe fa28 	bl	8002af8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fe fa24 	bl	8002af8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0cb      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	4b49      	ldr	r3, [pc, #292]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0ee      	beq.n	80046ac <HAL_RCC_OscConfig+0x334>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d0:	f7fe fa12 	bl	8002af8 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fe fa0e 	bl	8002af8 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0b5      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ee:	4b3e      	ldr	r3, [pc, #248]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1ee      	bne.n	80046d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004700:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	4a38      	ldr	r2, [pc, #224]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 80a1 	beq.w	8004858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004716:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b08      	cmp	r3, #8
 8004720:	d05c      	beq.n	80047dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d141      	bne.n	80047ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <HAL_RCC_OscConfig+0x478>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe f9e2 	bl	8002af8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004738:	f7fe f9de 	bl	8002af8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e087      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	019b      	lsls	r3, r3, #6
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	3b01      	subs	r3, #1
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	491b      	ldr	r1, [pc, #108]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <HAL_RCC_OscConfig+0x478>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7fe f9b7 	bl	8002af8 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478e:	f7fe f9b3 	bl	8002af8 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e05c      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x416>
 80047ac:	e054      	b.n	8004858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <HAL_RCC_OscConfig+0x478>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe f9a0 	bl	8002af8 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe f99c 	bl	8002af8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e045      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_RCC_OscConfig+0x470>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x444>
 80047da:	e03d      	b.n	8004858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e038      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40007000 	.word	0x40007000
 80047f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x4ec>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d028      	beq.n	8004854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d121      	bne.n	8004854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d11a      	bne.n	8004854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004824:	4013      	ands	r3, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800482a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800482c:	4293      	cmp	r3, r2
 800482e:	d111      	bne.n	8004854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	3b01      	subs	r3, #1
 800483e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d107      	bne.n	8004854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800

08004868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0cc      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d90c      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0b8      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a58      	ldr	r2, [pc, #352]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e0:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	494d      	ldr	r1, [pc, #308]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d044      	beq.n	8004988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d119      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e07f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d003      	beq.n	8004926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	2b03      	cmp	r3, #3
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e06f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e067      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4934      	ldr	r1, [pc, #208]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004958:	f7fe f8ce 	bl	8002af8 <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fe f8ca 	bl	8002af8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 020c 	and.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d1eb      	bne.n	8004960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d20c      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e032      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4916      	ldr	r1, [pc, #88]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	490e      	ldr	r1, [pc, #56]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ee:	f000 f82d 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 80049f2:	4602      	mov	r2, r0
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	490a      	ldr	r1, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	5ccb      	ldrb	r3, [r1, r3]
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe f82e 	bl	8002a70 <HAL_InitTick>

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023c00 	.word	0x40023c00
 8004a24:	40023800 	.word	0x40023800
 8004a28:	08007084 	.word	0x08007084
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	20000010 	.word	0x20000010

08004a34 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <HAL_RCC_EnableCSS+0x14>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	4247004c 	.word	0x4247004c

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a50:	b094      	sub	sp, #80	; 0x50
 8004a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	647b      	str	r3, [r7, #68]	; 0x44
 8004a58:	2300      	movs	r3, #0
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a64:	4b79      	ldr	r3, [pc, #484]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d00d      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x40>
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	f200 80e1 	bhi.w	8004c38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7e:	e0db      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b73      	ldr	r3, [pc, #460]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a84:	e0db      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a8a:	e0d8      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a8c:	4b6f      	ldr	r3, [pc, #444]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a96:	4b6d      	ldr	r3, [pc, #436]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d063      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004abe:	4622      	mov	r2, r4
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	0159      	lsls	r1, r3, #5
 8004acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad0:	0150      	lsls	r0, r2, #5
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	1a51      	subs	r1, r2, r1
 8004ada:	6139      	str	r1, [r7, #16]
 8004adc:	4629      	mov	r1, r5
 8004ade:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af0:	4659      	mov	r1, fp
 8004af2:	018b      	lsls	r3, r1, #6
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004afa:	4651      	mov	r1, sl
 8004afc:	018a      	lsls	r2, r1, #6
 8004afe:	4651      	mov	r1, sl
 8004b00:	ebb2 0801 	subs.w	r8, r2, r1
 8004b04:	4659      	mov	r1, fp
 8004b06:	eb63 0901 	sbc.w	r9, r3, r1
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b1e:	4690      	mov	r8, r2
 8004b20:	4699      	mov	r9, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	eb18 0303 	adds.w	r3, r8, r3
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	eb49 0303 	adc.w	r3, r9, r3
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	024b      	lsls	r3, r1, #9
 8004b42:	4621      	mov	r1, r4
 8004b44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b48:	4621      	mov	r1, r4
 8004b4a:	024a      	lsls	r2, r1, #9
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b52:	2200      	movs	r2, #0
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5c:	f7fb ff22 	bl	80009a4 <__aeabi_uldivmod>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4613      	mov	r3, r2
 8004b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b68:	e058      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	099b      	lsrs	r3, r3, #6
 8004b70:	2200      	movs	r2, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	4611      	mov	r1, r2
 8004b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	f04f 0000 	mov.w	r0, #0
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	0159      	lsls	r1, r3, #5
 8004b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b96:	0150      	lsls	r0, r2, #5
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bbc:	ebb2 040a 	subs.w	r4, r2, sl
 8004bc0:	eb63 050b 	sbc.w	r5, r3, fp
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	00eb      	lsls	r3, r5, #3
 8004bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd2:	00e2      	lsls	r2, r4, #3
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	18e3      	adds	r3, r4, r3
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	464b      	mov	r3, r9
 8004be0:	eb45 0303 	adc.w	r3, r5, r3
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	028b      	lsls	r3, r1, #10
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	028a      	lsls	r2, r1, #10
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c06:	2200      	movs	r2, #0
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	61fa      	str	r2, [r7, #28]
 8004c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c10:	f7fb fec8 	bl	80009a4 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4613      	mov	r3, r2
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	3301      	adds	r3, #1
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3750      	adds	r7, #80	; 0x50
 8004c44:	46bd      	mov	sp, r7
 8004c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	00f42400 	.word	0x00f42400
 8004c54:	007a1200 	.word	0x007a1200

08004c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c74:	f7ff fff0 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	08007094 	.word	0x08007094

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c9c:	f7ff ffdc 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0b5b      	lsrs	r3, r3, #13
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	08007094 	.word	0x08007094

08004cc0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d104      	bne.n	8004cda <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004cd0:	f000 f80a 	bl	8004ce8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	701a      	strb	r2, [r3, #0]
  }
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	4002380e 	.word	0x4002380e

08004ce8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e041      	b.n	8004d8c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fd fc05 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f000 fb41 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d001      	beq.n	8004dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e046      	b.n	8004e3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <HAL_TIM_Base_Start+0xb4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d022      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d01d      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_TIM_Base_Start+0xb8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d018      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_TIM_Base_Start+0xbc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d013      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <HAL_TIM_Base_Start+0xc0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00e      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <HAL_TIM_Base_Start+0xc4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <HAL_TIM_Base_Start+0xc8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_TIM_Base_Start+0x70>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_TIM_Base_Start+0xcc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d111      	bne.n	8004e28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d010      	beq.n	8004e38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e26:	e007      	b.n	8004e38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	40010400 	.word	0x40010400
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40001800 	.word	0x40001800

08004e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e041      	b.n	8004efa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f839 	bl	8004f02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f000 fa8a 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x24>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e022      	b.n	8004f82 <HAL_TIM_PWM_Start+0x6a>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d109      	bne.n	8004f56 <HAL_TIM_PWM_Start+0x3e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	e015      	b.n	8004f82 <HAL_TIM_PWM_Start+0x6a>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d109      	bne.n	8004f70 <HAL_TIM_PWM_Start+0x58>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_TIM_PWM_Start+0x6a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07c      	b.n	8005084 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0x82>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f98:	e013      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xaa>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0x92>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xaa>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xa2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb8:	e003      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fce0 	bl	8005990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_TIM_PWM_Start+0x174>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_PWM_Start+0xcc>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <HAL_TIM_PWM_Start+0x178>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIM_PWM_Start+0xd0>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_TIM_PWM_Start+0xd2>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a22      	ldr	r2, [pc, #136]	; (800508c <HAL_TIM_PWM_Start+0x174>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d01d      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_TIM_PWM_Start+0x17c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d018      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_TIM_PWM_Start+0x180>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_TIM_PWM_Start+0x184>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <HAL_TIM_PWM_Start+0x178>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_TIM_PWM_Start+0x188>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_PWM_Start+0x136>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <HAL_TIM_PWM_Start+0x18c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b06      	cmp	r3, #6
 800505e:	d010      	beq.n	8005082 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005070:	e007      	b.n	8005082 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800

080050a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0ae      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	f200 809f 	bhi.w	8005214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005215 	.word	0x08005215
 80050e4:	08005215 	.word	0x08005215
 80050e8:	08005215 	.word	0x08005215
 80050ec:	08005151 	.word	0x08005151
 80050f0:	08005215 	.word	0x08005215
 80050f4:	08005215 	.word	0x08005215
 80050f8:	08005215 	.word	0x08005215
 80050fc:	08005193 	.word	0x08005193
 8005100:	08005215 	.word	0x08005215
 8005104:	08005215 	.word	0x08005215
 8005108:	08005215 	.word	0x08005215
 800510c:	080051d3 	.word	0x080051d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f9f0 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0204 	bic.w	r2, r2, #4
 800513a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6999      	ldr	r1, [r3, #24]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	619a      	str	r2, [r3, #24]
      break;
 800514e:	e064      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fa40 	bl	80055dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6999      	ldr	r1, [r3, #24]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	619a      	str	r2, [r3, #24]
      break;
 8005190:	e043      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fa95 	bl	80056c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0208 	orr.w	r2, r2, #8
 80051ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0204 	bic.w	r2, r2, #4
 80051bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69d9      	ldr	r1, [r3, #28]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	61da      	str	r2, [r3, #28]
      break;
 80051d0:	e023      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fae9 	bl	80057b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	021a      	lsls	r2, r3, #8
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	61da      	str	r2, [r3, #28]
      break;
 8005212:	e002      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
      break;
 8005218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIM_ConfigClockSource+0x1c>
 8005244:	2302      	movs	r3, #2
 8005246:	e0b4      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x186>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d03e      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0xd4>
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	f200 8087 	bhi.w	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	f000 8086 	beq.w	800539e <HAL_TIM_ConfigClockSource+0x172>
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d87f      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b70      	cmp	r3, #112	; 0x70
 800529a:	d01a      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xa6>
 800529c:	2b70      	cmp	r3, #112	; 0x70
 800529e:	d87b      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d050      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x11a>
 80052a4:	2b60      	cmp	r3, #96	; 0x60
 80052a6:	d877      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d03c      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0xfa>
 80052ac:	2b50      	cmp	r3, #80	; 0x50
 80052ae:	d873      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d058      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x13a>
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d86f      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d064      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d86b      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d060      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d867      	bhi.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05c      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d05a      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0x15a>
 80052d0:	e062      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6899      	ldr	r1, [r3, #8]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f000 fb35 	bl	8005950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	609a      	str	r2, [r3, #8]
      break;
 80052fe:	e04f      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6899      	ldr	r1, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f000 fb1e 	bl	8005950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005322:	609a      	str	r2, [r3, #8]
      break;
 8005324:	e03c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	461a      	mov	r2, r3
 8005334:	f000 fa92 	bl	800585c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2150      	movs	r1, #80	; 0x50
 800533e:	4618      	mov	r0, r3
 8005340:	f000 faeb 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 8005344:	e02c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	461a      	mov	r2, r3
 8005354:	f000 fab1 	bl	80058ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2160      	movs	r1, #96	; 0x60
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fadb 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 8005364:	e01c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	461a      	mov	r2, r3
 8005374:	f000 fa72 	bl	800585c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	4618      	mov	r0, r3
 8005380:	f000 facb 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 8005384:	e00c      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f000 fac2 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 8005396:	e003      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e000      	b.n	80053a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800539e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3d      	ldr	r2, [pc, #244]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <TIM_Base_SetConfig+0x120>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3a      	ldr	r2, [pc, #232]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d02b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d027      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TIM_Base_SetConfig+0x120>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <TIM_Base_SetConfig+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <TIM_Base_SetConfig+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0x130>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0x134>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <TIM_Base_SetConfig+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_Base_SetConfig+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	40001800 	.word	0x40001800
 80054f4:	40001c00 	.word	0x40001c00
 80054f8:	40002000 	.word	0x40002000

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <TIM_OC1_SetConfig+0xd8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC1_SetConfig+0x64>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <TIM_OC1_SetConfig+0xdc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10c      	bne.n	800557a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0308 	bic.w	r3, r3, #8
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <TIM_OC1_SetConfig+0xd8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC1_SetConfig+0x8e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <TIM_OC1_SetConfig+0xdc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d111      	bne.n	80055ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0210 	bic.w	r2, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0320 	bic.w	r3, r3, #32
 8005626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <TIM_OC2_SetConfig+0xe4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC2_SetConfig+0x68>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <TIM_OC2_SetConfig+0xe8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10d      	bne.n	8005660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <TIM_OC2_SetConfig+0xe4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC2_SetConfig+0x94>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <TIM_OC2_SetConfig+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d113      	bne.n	8005698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40010400 	.word	0x40010400

080056c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <TIM_OC3_SetConfig+0xe0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0x66>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC3_SetConfig+0xe0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC3_SetConfig+0x92>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d113      	bne.n	8005782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a12      	ldr	r2, [pc, #72]	; (8005854 <TIM_OC4_SetConfig+0xa4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC4_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a11      	ldr	r2, [pc, #68]	; (8005858 <TIM_OC4_SetConfig+0xa8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 030a 	bic.w	r3, r3, #10
 8005898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0210 	bic.w	r2, r3, #16
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	f043 0307 	orr.w	r3, r3, #7
 800593c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	431a      	orrs	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2201      	movs	r2, #1
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e05a      	b.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d01d      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10c      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40001800 	.word	0x40001800

08005ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e03f      	b.n	8005b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc feae 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ffb9 	bl	8006a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08c      	sub	sp, #48	; 0x30
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d165      	bne.n	8005c56 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_UART_Transmit_DMA+0x26>
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e05e      	b.n	8005c58 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UART_Transmit_DMA+0x38>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e057      	b.n	8005c58 <HAL_UART_Transmit_DMA+0xe8>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	88fa      	ldrh	r2, [r7, #6]
 8005bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2221      	movs	r2, #33	; 0x21
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <HAL_UART_Transmit_DMA+0xf0>)
 8005bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <HAL_UART_Transmit_DMA+0xf4>)
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_UART_Transmit_DMA+0xf8>)
 8005be6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	2200      	movs	r2, #0
 8005bee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3304      	adds	r3, #4
 8005c04:	461a      	mov	r2, r3
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	f7fd fe92 	bl	8003930 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c14:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3314      	adds	r3, #20
 8005c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005c40:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6a39      	ldr	r1, [r7, #32]
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3730      	adds	r7, #48	; 0x30
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	08006329 	.word	0x08006329
 8005c64:	080063c3 	.word	0x080063c3
 8005c68:	0800653b 	.word	0x0800653b

08005c6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d11d      	bne.n	8005cc2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_UART_Receive_DMA+0x26>
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e016      	b.n	8005cc4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Receive_DMA+0x38>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e00f      	b.n	8005cc4 <HAL_UART_Receive_DMA+0x58>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fc89 	bl	80065d0 <UART_Start_Receive_DMA>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	e000      	b.n	8005cc4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b090      	sub	sp, #64	; 0x40
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b21      	cmp	r3, #33	; 0x21
 8005cf8:	d128      	bne.n	8005d4c <HAL_UART_DMAStop+0x80>
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d025      	beq.n	8005d4c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d20:	633a      	str	r2, [r7, #48]	; 0x30
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e5      	bne.n	8005d00 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fd fe4d 	bl	80039e0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fce0 	bl	800670c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	bf0c      	ite	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b22      	cmp	r3, #34	; 0x22
 8005d6c:	d128      	bne.n	8005dc0 <HAL_UART_DMAStop+0xf4>
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d025      	beq.n	8005dc0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d94:	61fa      	str	r2, [r7, #28]
 8005d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	617b      	str	r3, [r7, #20]
   return(result);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fd fe13 	bl	80039e0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fcce 	bl	800675c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3740      	adds	r7, #64	; 0x40
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0ba      	sub	sp, #232	; 0xe8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_UART_IRQHandler+0x66>
 8005e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fd75 	bl	800691a <UART_Receive_IT>
      return;
 8005e30:	e256      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80de 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x22c>
 8005e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80d1 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_UART_IRQHandler+0xae>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0201 	orr.w	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xd2>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xf6>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f043 0204 	orr.w	r2, r3, #4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x126>
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0208 	orr.w	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 81ed 	beq.w	80062d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14e>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fd00 	bl	800691a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	bf0c      	ite	eq
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_UART_IRQHandler+0x17a>
 8005f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04f      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fc08 	bl	800675c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d141      	bne.n	8005fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d9      	bne.n	8005f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d013      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	4a7d      	ldr	r2, [pc, #500]	; (80061a8 <HAL_UART_IRQHandler+0x3dc>)
 8005fb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fd fd80 	bl	8003ac0 <HAL_DMA_Abort_IT>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00e      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fa fe62 	bl	8000ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00a      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fa fe5e 	bl	8000ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e006      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fa fe5a 	bl	8000ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ff2:	e170      	b.n	80062d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	bf00      	nop
    return;
 8005ff6:	e16e      	b.n	80062d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 814a 	bne.w	8006296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 8143 	beq.w	8006296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 813c 	beq.w	8006296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	f040 80b4 	bne.w	80061ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8140 	beq.w	80062da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800605e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006062:	429a      	cmp	r2, r3
 8006064:	f080 8139 	bcs.w	80062da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800606e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607a:	f000 8088 	beq.w	800618e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1d9      	bne.n	800607e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3314      	adds	r3, #20
 80060d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e1      	bne.n	80060ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3314      	adds	r3, #20
 8006126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800612a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800612c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e3      	bne.n	8006106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800615c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615e:	f023 0310 	bic.w	r3, r3, #16
 8006162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006170:	65ba      	str	r2, [r7, #88]	; 0x58
 8006172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800617e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e3      	bne.n	800614c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd fc29 	bl	80039e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006196:	b29b      	uxth	r3, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8b6 	bl	8006310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a4:	e099      	b.n	80062da <HAL_UART_IRQHandler+0x50e>
 80061a6:	bf00      	nop
 80061a8:	08006823 	.word	0x08006823
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 808b 	beq.w	80062de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8086 	beq.w	80062de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061f6:	647a      	str	r2, [r7, #68]	; 0x44
 80061f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e3      	bne.n	80061d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	623b      	str	r3, [r7, #32]
   return(result);
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800622e:	633a      	str	r2, [r7, #48]	; 0x30
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006274:	61fa      	str	r2, [r7, #28]
 8006276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	69b9      	ldr	r1, [r7, #24]
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	617b      	str	r3, [r7, #20]
   return(result);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e3      	bne.n	8006250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f83e 	bl	8006310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006294:	e023      	b.n	80062de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_UART_IRQHandler+0x4ea>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 facb 	bl	800684a <UART_Transmit_IT>
    return;
 80062b4:	e014      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <HAL_UART_IRQHandler+0x514>
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fb0b 	bl	80068ea <UART_EndTransmit_IT>
    return;
 80062d4:	e004      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
    return;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
      return;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
      return;
 80062de:	bf00      	nop
  }
}
 80062e0:	37e8      	adds	r7, #232	; 0xe8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop

080062e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b090      	sub	sp, #64	; 0x40
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d137      	bne.n	80063b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006346:	2200      	movs	r2, #0
 8006348:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3314      	adds	r3, #20
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	623b      	str	r3, [r7, #32]
   return(result);
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006360:	63bb      	str	r3, [r7, #56]	; 0x38
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636a:	633a      	str	r2, [r7, #48]	; 0x30
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	60fb      	str	r3, [r7, #12]
   return(result);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
 8006396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800639e:	61fa      	str	r2, [r7, #28]
 80063a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	69b9      	ldr	r1, [r7, #24]
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	617b      	str	r3, [r7, #20]
   return(result);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e5      	bne.n	800637e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063b2:	e002      	b.n	80063ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063b6:	f7ff ff97 	bl	80062e8 <HAL_UART_TxCpltCallback>
}
 80063ba:	bf00      	nop
 80063bc:	3740      	adds	r7, #64	; 0x40
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff ff93 	bl	80062fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b09c      	sub	sp, #112	; 0x70
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d172      	bne.n	80064e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	2200      	movs	r2, #0
 80063fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006416:	66bb      	str	r3, [r7, #104]	; 0x68
 8006418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006420:	65ba      	str	r2, [r7, #88]	; 0x58
 8006422:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800642e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e5      	bne.n	8006400 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3314      	adds	r3, #20
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	667b      	str	r3, [r7, #100]	; 0x64
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006454:	647a      	str	r2, [r7, #68]	; 0x44
 8006456:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	623b      	str	r3, [r7, #32]
   return(result);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647e:	663b      	str	r3, [r7, #96]	; 0x60
 8006480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006488:	633a      	str	r2, [r7, #48]	; 0x30
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800648e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e5      	bne.n	8006468 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800649c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d119      	bne.n	80064e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064cc:	61fa      	str	r2, [r7, #28]
 80064ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d106      	bne.n	80064f6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ec:	4619      	mov	r1, r3
 80064ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064f0:	f7ff ff0e 	bl	8006310 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064f4:	e002      	b.n	80064fc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80064f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064f8:	f7fa fc7c 	bl	8000df4 <HAL_UART_RxCpltCallback>
}
 80064fc:	bf00      	nop
 80064fe:	3770      	adds	r7, #112	; 0x70
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	2b01      	cmp	r3, #1
 8006518:	d108      	bne.n	800652c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff fef3 	bl	8006310 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800652a:	e002      	b.n	8006532 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7fa fbe7 	bl	8000d00 <HAL_UART_RxHalfCpltCallback>
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	bf0c      	ite	eq
 800655a:	2301      	moveq	r3, #1
 800655c:	2300      	movne	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b21      	cmp	r3, #33	; 0x21
 800656c:	d108      	bne.n	8006580 <UART_DMAError+0x46>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	f000 f8c6 	bl	800670c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b22      	cmp	r3, #34	; 0x22
 80065a0:	d108      	bne.n	80065b4 <UART_DMAError+0x7a>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80065ae:	68b8      	ldr	r0, [r7, #8]
 80065b0:	f000 f8d4 	bl	800675c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	f043 0210 	orr.w	r2, r3, #16
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f7fa fb6d 	bl	8000ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b098      	sub	sp, #96	; 0x60
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2222      	movs	r2, #34	; 0x22
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	4a40      	ldr	r2, [pc, #256]	; (8006700 <UART_Start_Receive_DMA+0x130>)
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	4a3f      	ldr	r2, [pc, #252]	; (8006704 <UART_Start_Receive_DMA+0x134>)
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	4a3e      	ldr	r2, [pc, #248]	; (8006708 <UART_Start_Receive_DMA+0x138>)
 800660e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	2200      	movs	r2, #0
 8006616:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	f7fd f97e 	bl	8003930 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d019      	beq.n	800668e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006670:	65bb      	str	r3, [r7, #88]	; 0x58
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800667a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800667c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e5      	bne.n	800665a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	657b      	str	r3, [r7, #84]	; 0x54
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3314      	adds	r3, #20
 80066ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e5      	bne.n	800668e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d8:	653b      	str	r3, [r7, #80]	; 0x50
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3314      	adds	r3, #20
 80066e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066e2:	627a      	str	r2, [r7, #36]	; 0x24
 80066e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6a39      	ldr	r1, [r7, #32]
 80066e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e5      	bne.n	80066c2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3760      	adds	r7, #96	; 0x60
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	080063df 	.word	0x080063df
 8006704:	08006505 	.word	0x08006505
 8006708:	0800653b 	.word	0x0800653b

0800670c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	60bb      	str	r3, [r7, #8]
   return(result);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	61ba      	str	r2, [r7, #24]
 8006736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6979      	ldr	r1, [r7, #20]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006750:	bf00      	nop
 8006752:	3724      	adds	r7, #36	; 0x24
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b095      	sub	sp, #84	; 0x54
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006784:	643a      	str	r2, [r7, #64]	; 0x40
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800678a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e5      	bne.n	8006798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d119      	bne.n	8006808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0310 	bic.w	r3, r3, #16
 80067ea:	647b      	str	r3, [r7, #68]	; 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f4:	61ba      	str	r2, [r7, #24]
 80067f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6979      	ldr	r1, [r7, #20]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006816:	bf00      	nop
 8006818:	3754      	adds	r7, #84	; 0x54
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7fa fa2f 	bl	8000ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b21      	cmp	r3, #33	; 0x21
 800685c:	d13e      	bne.n	80068dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d114      	bne.n	8006892 <UART_Transmit_IT+0x48>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d110      	bne.n	8006892 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006884:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	621a      	str	r2, [r3, #32]
 8006890:	e008      	b.n	80068a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	1c59      	adds	r1, r3, #1
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6211      	str	r1, [r2, #32]
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4619      	mov	r1, r3
 80068b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10f      	bne.n	80068d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fcec 	bl	80062e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b08c      	sub	sp, #48	; 0x30
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b22      	cmp	r3, #34	; 0x22
 800692c:	f040 80ab 	bne.w	8006a86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006938:	d117      	bne.n	800696a <UART_Receive_IT+0x50>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d113      	bne.n	800696a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006958:	b29a      	uxth	r2, r3
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
 8006968:	e026      	b.n	80069b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d007      	beq.n	800698e <UART_Receive_IT+0x74>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <UART_Receive_IT+0x82>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e008      	b.n	80069ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4619      	mov	r1, r3
 80069c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d15a      	bne.n	8006a82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0220 	bic.w	r2, r2, #32
 80069da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0201 	bic.w	r2, r2, #1
 80069fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d135      	bne.n	8006a78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f023 0310 	bic.w	r3, r3, #16
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	623a      	str	r2, [r7, #32]
 8006a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	69f9      	ldr	r1, [r7, #28]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d10a      	bne.n	8006a6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fc4d 	bl	8006310 <HAL_UARTEx_RxEventCallback>
 8006a76:	e002      	b.n	8006a7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fa f9bb 	bl	8000df4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e002      	b.n	8006a88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3730      	adds	r7, #48	; 0x30
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a94:	b0c0      	sub	sp, #256	; 0x100
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aac:	68d9      	ldr	r1, [r3, #12]
 8006aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	ea40 0301 	orr.w	r3, r0, r1
 8006ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ae8:	f021 010c 	bic.w	r1, r1, #12
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006af6:	430b      	orrs	r3, r1
 8006af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0a:	6999      	ldr	r1, [r3, #24]
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	ea40 0301 	orr.w	r3, r0, r1
 8006b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b8f      	ldr	r3, [pc, #572]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d005      	beq.n	8006b30 <UART_SetConfig+0xa0>
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b8d      	ldr	r3, [pc, #564]	; (8006d60 <UART_SetConfig+0x2d0>)
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d104      	bne.n	8006b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b30:	f7fe f8b2 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8006b34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b38:	e003      	b.n	8006b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b3a:	f7fe f899 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8006b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4c:	f040 810c 	bne.w	8006d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	1891      	adds	r1, r2, r2
 8006b68:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b6a:	415b      	adcs	r3, r3
 8006b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b72:	4621      	mov	r1, r4
 8006b74:	eb12 0801 	adds.w	r8, r2, r1
 8006b78:	4629      	mov	r1, r5
 8006b7a:	eb43 0901 	adc.w	r9, r3, r1
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b92:	4690      	mov	r8, r2
 8006b94:	4699      	mov	r9, r3
 8006b96:	4623      	mov	r3, r4
 8006b98:	eb18 0303 	adds.w	r3, r8, r3
 8006b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	eb49 0303 	adc.w	r3, r9, r3
 8006ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	18db      	adds	r3, r3, r3
 8006bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	eb42 0303 	adc.w	r3, r2, r3
 8006bca:	657b      	str	r3, [r7, #84]	; 0x54
 8006bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bd4:	f7f9 fee6 	bl	80009a4 <__aeabi_uldivmod>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4b61      	ldr	r3, [pc, #388]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006bde:	fba3 2302 	umull	r2, r3, r3, r2
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	011c      	lsls	r4, r3, #4
 8006be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	1891      	adds	r1, r2, r2
 8006bfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c00:	415b      	adcs	r3, r3
 8006c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c08:	4641      	mov	r1, r8
 8006c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c0e:	4649      	mov	r1, r9
 8006c10:	eb43 0b01 	adc.w	fp, r3, r1
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c28:	4692      	mov	sl, r2
 8006c2a:	469b      	mov	fp, r3
 8006c2c:	4643      	mov	r3, r8
 8006c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c36:	464b      	mov	r3, r9
 8006c38:	eb4b 0303 	adc.w	r3, fp, r3
 8006c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c54:	460b      	mov	r3, r1
 8006c56:	18db      	adds	r3, r3, r3
 8006c58:	643b      	str	r3, [r7, #64]	; 0x40
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	eb42 0303 	adc.w	r3, r2, r3
 8006c60:	647b      	str	r3, [r7, #68]	; 0x44
 8006c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c6a:	f7f9 fe9b 	bl	80009a4 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	4b3b      	ldr	r3, [pc, #236]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006c76:	fba3 2301 	umull	r2, r3, r3, r1
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	2264      	movs	r2, #100	; 0x64
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
 8006c82:	1acb      	subs	r3, r1, r3
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c8a:	4b36      	ldr	r3, [pc, #216]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c98:	441c      	add	r4, r3
 8006c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	1891      	adds	r1, r2, r2
 8006cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cb4:	415b      	adcs	r3, r3
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	1851      	adds	r1, r2, r1
 8006cc0:	6339      	str	r1, [r7, #48]	; 0x30
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	414b      	adcs	r3, r1
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	00cb      	lsls	r3, r1, #3
 8006cd8:	4651      	mov	r1, sl
 8006cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cde:	4651      	mov	r1, sl
 8006ce0:	00ca      	lsls	r2, r1, #3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4642      	mov	r2, r8
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	460a      	mov	r2, r1
 8006cf4:	eb42 0303 	adc.w	r3, r2, r3
 8006cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d10:	460b      	mov	r3, r1
 8006d12:	18db      	adds	r3, r3, r3
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d16:	4613      	mov	r3, r2
 8006d18:	eb42 0303 	adc.w	r3, r2, r3
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d26:	f7f9 fe3d 	bl	80009a4 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006d30:	fba3 1302 	umull	r1, r3, r3, r2
 8006d34:	095b      	lsrs	r3, r3, #5
 8006d36:	2164      	movs	r1, #100	; 0x64
 8006d38:	fb01 f303 	mul.w	r3, r1, r3
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	3332      	adds	r3, #50	; 0x32
 8006d42:	4a08      	ldr	r2, [pc, #32]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006d44:	fba2 2303 	umull	r2, r3, r2, r3
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	f003 0207 	and.w	r2, r3, #7
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4422      	add	r2, r4
 8006d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d58:	e106      	b.n	8006f68 <UART_SetConfig+0x4d8>
 8006d5a:	bf00      	nop
 8006d5c:	40011000 	.word	0x40011000
 8006d60:	40011400 	.word	0x40011400
 8006d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d7a:	4642      	mov	r2, r8
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	1891      	adds	r1, r2, r2
 8006d80:	6239      	str	r1, [r7, #32]
 8006d82:	415b      	adcs	r3, r3
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
 8006d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	1854      	adds	r4, r2, r1
 8006d8e:	4649      	mov	r1, r9
 8006d90:	eb43 0501 	adc.w	r5, r3, r1
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	00eb      	lsls	r3, r5, #3
 8006d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006da2:	00e2      	lsls	r2, r4, #3
 8006da4:	4614      	mov	r4, r2
 8006da6:	461d      	mov	r5, r3
 8006da8:	4643      	mov	r3, r8
 8006daa:	18e3      	adds	r3, r4, r3
 8006dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006db0:	464b      	mov	r3, r9
 8006db2:	eb45 0303 	adc.w	r3, r5, r3
 8006db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	008b      	lsls	r3, r1, #2
 8006dda:	4621      	mov	r1, r4
 8006ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006de0:	4621      	mov	r1, r4
 8006de2:	008a      	lsls	r2, r1, #2
 8006de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006de8:	f7f9 fddc 	bl	80009a4 <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4b60      	ldr	r3, [pc, #384]	; (8006f74 <UART_SetConfig+0x4e4>)
 8006df2:	fba3 2302 	umull	r2, r3, r3, r2
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	011c      	lsls	r4, r3, #4
 8006dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	1891      	adds	r1, r2, r2
 8006e12:	61b9      	str	r1, [r7, #24]
 8006e14:	415b      	adcs	r3, r3
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	1851      	adds	r1, r2, r1
 8006e20:	6139      	str	r1, [r7, #16]
 8006e22:	4649      	mov	r1, r9
 8006e24:	414b      	adcs	r3, r1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e34:	4659      	mov	r1, fp
 8006e36:	00cb      	lsls	r3, r1, #3
 8006e38:	4651      	mov	r1, sl
 8006e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3e:	4651      	mov	r1, sl
 8006e40:	00ca      	lsls	r2, r1, #3
 8006e42:	4610      	mov	r0, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	4642      	mov	r2, r8
 8006e4a:	189b      	adds	r3, r3, r2
 8006e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e50:	464b      	mov	r3, r9
 8006e52:	460a      	mov	r2, r1
 8006e54:	eb42 0303 	adc.w	r3, r2, r3
 8006e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e74:	4649      	mov	r1, r9
 8006e76:	008b      	lsls	r3, r1, #2
 8006e78:	4641      	mov	r1, r8
 8006e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e7e:	4641      	mov	r1, r8
 8006e80:	008a      	lsls	r2, r1, #2
 8006e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e86:	f7f9 fd8d 	bl	80009a4 <__aeabi_uldivmod>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <UART_SetConfig+0x4e4>)
 8006e92:	fba3 2301 	umull	r2, r3, r3, r1
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	2264      	movs	r2, #100	; 0x64
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	1acb      	subs	r3, r1, r3
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	3332      	adds	r3, #50	; 0x32
 8006ea4:	4a33      	ldr	r2, [pc, #204]	; (8006f74 <UART_SetConfig+0x4e4>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eb0:	441c      	add	r4, r3
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	673b      	str	r3, [r7, #112]	; 0x70
 8006eba:	677a      	str	r2, [r7, #116]	; 0x74
 8006ebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	1891      	adds	r1, r2, r2
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	415b      	adcs	r3, r3
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	1851      	adds	r1, r2, r1
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	414b      	adcs	r3, r1
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ee8:	4659      	mov	r1, fp
 8006eea:	00cb      	lsls	r3, r1, #3
 8006eec:	4651      	mov	r1, sl
 8006eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	00ca      	lsls	r2, r1, #3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	4642      	mov	r2, r8
 8006efe:	189b      	adds	r3, r3, r2
 8006f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f02:	464b      	mov	r3, r9
 8006f04:	460a      	mov	r2, r1
 8006f06:	eb42 0303 	adc.w	r3, r2, r3
 8006f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	663b      	str	r3, [r7, #96]	; 0x60
 8006f16:	667a      	str	r2, [r7, #100]	; 0x64
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f24:	4649      	mov	r1, r9
 8006f26:	008b      	lsls	r3, r1, #2
 8006f28:	4641      	mov	r1, r8
 8006f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2e:	4641      	mov	r1, r8
 8006f30:	008a      	lsls	r2, r1, #2
 8006f32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f36:	f7f9 fd35 	bl	80009a4 <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <UART_SetConfig+0x4e4>)
 8006f40:	fba3 1302 	umull	r1, r3, r3, r2
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	2164      	movs	r1, #100	; 0x64
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	3332      	adds	r3, #50	; 0x32
 8006f52:	4a08      	ldr	r2, [pc, #32]	; (8006f74 <UART_SetConfig+0x4e4>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4422      	add	r2, r4
 8006f66:	609a      	str	r2, [r3, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f74:	51eb851f 	.word	0x51eb851f

08006f78 <memset>:
 8006f78:	4402      	add	r2, r0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d100      	bne.n	8006f82 <memset+0xa>
 8006f80:	4770      	bx	lr
 8006f82:	f803 1b01 	strb.w	r1, [r3], #1
 8006f86:	e7f9      	b.n	8006f7c <memset+0x4>

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	; (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	; (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	; (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	; (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 f866 	bl	800706c <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	080070b4 	.word	0x080070b4
 8006fc4:	080070b4 	.word	0x080070b4
 8006fc8:	080070b4 	.word	0x080070b4
 8006fcc:	080070b8 	.word	0x080070b8

08006fd0 <memcpy>:
 8006fd0:	440a      	add	r2, r1
 8006fd2:	4291      	cmp	r1, r2
 8006fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd8:	d100      	bne.n	8006fdc <memcpy+0xc>
 8006fda:	4770      	bx	lr
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	d1f9      	bne.n	8006fde <memcpy+0xe>
 8006fea:	bd10      	pop	{r4, pc}

08006fec <lrintf>:
 8006fec:	ee10 3a10 	vmov	r3, s0
 8006ff0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006ff4:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006ff8:	281e      	cmp	r0, #30
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	dc2f      	bgt.n	800705e <lrintf+0x72>
 8006ffe:	1c41      	adds	r1, r0, #1
 8007000:	da02      	bge.n	8007008 <lrintf+0x1c>
 8007002:	2000      	movs	r0, #0
 8007004:	b002      	add	sp, #8
 8007006:	4770      	bx	lr
 8007008:	2816      	cmp	r0, #22
 800700a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800700e:	dd0a      	ble.n	8007026 <lrintf+0x3a>
 8007010:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007018:	3a96      	subs	r2, #150	; 0x96
 800701a:	fa03 f002 	lsl.w	r0, r3, r2
 800701e:	2900      	cmp	r1, #0
 8007020:	d0f0      	beq.n	8007004 <lrintf+0x18>
 8007022:	4240      	negs	r0, r0
 8007024:	e7ee      	b.n	8007004 <lrintf+0x18>
 8007026:	4b10      	ldr	r3, [pc, #64]	; (8007068 <lrintf+0x7c>)
 8007028:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800702c:	ed93 7a00 	vldr	s14, [r3]
 8007030:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007034:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007038:	eddd 7a01 	vldr	s15, [sp, #4]
 800703c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007040:	ee17 3a90 	vmov	r3, s15
 8007044:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007048:	d0db      	beq.n	8007002 <lrintf+0x16>
 800704a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800704e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007052:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007056:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800705a:	40d8      	lsrs	r0, r3
 800705c:	e7df      	b.n	800701e <lrintf+0x32>
 800705e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007062:	ee17 0a90 	vmov	r0, s15
 8007066:	e7cd      	b.n	8007004 <lrintf+0x18>
 8007068:	080070a4 	.word	0x080070a4

0800706c <_init>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr

08007078 <_fini>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr
